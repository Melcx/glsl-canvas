!function o(a,u,s){function f(t,e){if(!u[t]){if(!a[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};a[t][0].call(i.exports,function(e){return f(a[t][1][e]||e)},i,i.exports,o,a,u,s)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)f(s[e]);return f}({1:[function(e,t,r){var n,i,o=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:u}catch(e){i=u}}();var f,l=[],c=!1,h=-1;function d(){c&&f&&(c=!1,f.length?l=f.concat(l):h=-1,l.length&&v())}function v(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(f=l,l=[];++h<t;)f&&f[h].run();h=-1,t=l.length}f=null,c=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===u||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new m(e,t)),1!==l.length||c||s(v)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],2:[function(e,c,t){(function(t){"use strict";var r=setTimeout;function n(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(e,this)}function i(r,n){for(;3===r._state;)r=r._value;0!==r._state?(r._handled=!0,o._immediateFn(function(){var e=1===r._state?n.onFulfilled:n.onRejected;if(null!==e){var t;try{t=e(r._value)}catch(e){return void u(n.promise,e)}a(n.promise,t)}else(1===r._state?a:u)(n.promise,r._value)})):r._deferreds.push(n)}function a(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var r=e.then;if(e instanceof o)return t._state=3,t._value=e,void s(t);if("function"==typeof r)return void l((n=r,i=e,function(){n.apply(i,arguments)}),t)}t._state=1,t._value=e,s(t)}catch(e){u(t,e)}var n,i}function u(e,t){e._state=2,e._value=t,s(e)}function s(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var t=0,r=e._deferreds.length;t<r;t++)i(e,e._deferreds[t]);e._deferreds=null}function f(e,t,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=r}function l(e,t){var r=!1;try{e(function(e){r||(r=!0,a(t,e))},function(e){r||(r=!0,u(t,e))})}catch(e){if(r)return;r=!0,u(t,e)}}o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){var r=new this.constructor(n);return i(this,new f(e,t,r)),r},o.prototype.finally=function(t){var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){return r.reject(e)})})},o.all=function(t){return new o(function(n,i){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var o=Array.prototype.slice.call(t);if(0===o.length)return n([]);var a=o.length;function u(t,e){try{if(e&&("object"==typeof e||"function"==typeof e)){var r=e.then;if("function"==typeof r)return void r.call(e,function(e){u(t,e)},i)}o[t]=e,0==--a&&n(o)}catch(e){i(e)}}for(var e=0;e<o.length;e++)u(e,o[e])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(r){return new o(function(e,t){t(r)})},o.race=function(i){return new o(function(e,t){for(var r=0,n=i.length;r<n;r++)i[r].then(e,t)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){r(e,0)},o._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},c.exports=o}).call(this,e("timers").setImmediate)},{timers:3}],3:[function(s,e,f){(function(e,t){var n=s("process/browser.js").nextTick,r=Function.prototype.apply,i=Array.prototype.slice,o={},a=0;function u(e,t){this._id=e,this._clearFn=t}f.setTimeout=function(){return new u(r.call(setTimeout,window,arguments),clearTimeout)},f.setInterval=function(){return new u(r.call(setInterval,window,arguments),clearInterval)},f.clearTimeout=f.clearInterval=function(e){e.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},f.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},f.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},f._unrefActive=f.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;0<=t&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},f.setImmediate="function"==typeof e?e:function(e){var t=a++,r=!(arguments.length<2)&&i.call(arguments,1);return o[t]=!0,n(function(){o[t]&&(r?e.apply(null,r):e.call(null),f.clearImmediate(t))}),t},f.clearImmediate="function"==typeof t?t:function(e){delete o[e]}}).call(this,s("timers").setImmediate,s("timers").clearImmediate)},{"process/browser.js":1,timers:3}],4:[function(r,n,i){"use strict";function o(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var l=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":s(n))&&"object"===s(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./context","./iterable"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var u,r,s=l(e("./context")),n=l(e("./iterable"));(r=u=t.BufferFloatType||(t.BufferFloatType={}))[r.FLOAT=0]="FLOAT",r[r.HALF_FLOAT=1]="HALF_FLOAT";var f=function(){function a(e,t,r,n){d(this,a);var i=e.createFramebuffer(),o=this.getTexture(e,t,r,n);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),this.texture=o,this.buffer=i,this.BW=t,this.BH=r,this.index=n}return v(a,[{key:"getFloatType",value:function(e){var t,r;if(a.floatType===u.FLOAT){if(!(r=e.getExtension("OES_texture_float")))return a.floatType=u.HALF_FLOAT,this.getFloatType(e);t=e.FLOAT}else{if(!(r=e.getExtension("OES_texture_half_float")))return a.floatType=u.FLOAT,this.getFloatType(e);t=r.HALF_FLOAT_OES}return t}},{key:"getTexture",value:function(e,t,r,n){var i=this.getFloatType(e),o=e.createTexture();return e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_2D,o),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,r,0,e.RGBA,i,null),e.checkFramebufferStatus(e.FRAMEBUFFER)!==e.FRAMEBUFFER_COMPLETE?(a.floatType=a.floatType===u.FLOAT?u.HALF_FLOAT:u.FLOAT,this.getTexture(e,t,r,n)):o}},{key:"resize",value:function(e,t,r){if(t!==this.BW||r!==this.BH){var n=this.buffer,i=this.texture,o=this.index;e.bindFramebuffer(e.FRAMEBUFFER,n);var a,u=e.checkFramebufferStatus(e.FRAMEBUFFER),s=Math.min(t,this.BW),f=Math.min(r,this.BH),l=this.getFloatType(e);u===e.FRAMEBUFFER_COMPLETE&&(a=new Float32Array(s*f*4),e.readPixels(0,0,s,f,e.RGBA,l,a)),e.bindFramebuffer(e.FRAMEBUFFER,null);var c=o+1,h=this.getTexture(e,t,r,c);l=this.getFloatType(e),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),a&&e.texSubImage2D(e.TEXTURE_2D,0,0,0,s,f,e.RGBA,l,a);var d=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(i),e.activeTexture(e.TEXTURE0+o),e.bindTexture(e.TEXTURE_2D,h),this.index=o,this.texture=h,this.buffer=d,this.BW=t,this.BH=r}}}]),a}();f.floatType=u.HALF_FLOAT,t.Buffer=f;var c=function(){function i(e,t,r,n){d(this,i),this.isValid=!1,this.index=e,this.key=t,this.vertexString=r,this.fragmentString=n}return v(i,[{key:"create",value:function(e,t,r){var n=s.default.createShader(e,this.vertexString,e.VERTEX_SHADER),i=s.default.createShader(e,this.fragmentString,e.FRAGMENT_SHADER,1);this.isValid=!!i||(i=s.default.createShader(e,"void main(){\n\tgl_FragColor = vec4(1.0);\n}",e.FRAGMENT_SHADER),!1);var o=s.default.createProgram(e,[n,i]),a=new f(e,t,r,this.index+0),u=new f(e,t,r,this.index+2);this.program=o,this.input=a,this.output=u,e.deleteShader(n),e.deleteShader(i)}},{key:"render",value:function(e,t,r){e.useProgram(this.program),e.viewport(0,0,t,r),e.bindFramebuffer(e.FRAMEBUFFER,this.output.buffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.output.texture,0),e.drawArrays(e.TRIANGLES,0,6);var n=this.input,i=this.output,o=n;this.input=i,this.output=o}},{key:"resize",value:function(e,t,r){e.useProgram(this.program),e.viewport(0,0,t,r),this.input.resize(e,t,r),this.output.resize(e,t,r)}},{key:"destroy",value:function(e){e.deleteProgram(this.program),this.program=null,this.input=null,this.output=null}}]),i}();t.IOBuffer=c;var i=function(e){function l(){return d(this,l),o(this,a(l).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(l,n.default),v(l,[{key:"count",get:function(){return 4*Object.keys(this.values).length}}],[{key:"getBuffers",value:function(e,t,r){var n=new l,i=0;if(t)for(var o,a=/(?:^\s*)((?:#if|#elif)(?:\s*)(defined\s*\(\s*BUFFER_)(\d+)(?:\s*\))|(?:#ifdef)(?:\s*BUFFER_)(\d+)(?:\s*))/gm;null!==(o=a.exec(t));){var u=o[3]||o[4],s="u_buffer"+u,f=new c(i,s,r,"#define BUFFER_"+u+"\n"+t);f.create(e,e.drawingBufferWidth,e.drawingBufferHeight),n.set(s,f),i+=4}return n}}]),l}();t.default=i})},{"./context":6,"./iterable":8}],5:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":a(n))&&"object"===a(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","promise-polyfill"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),e("promise-polyfill");var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"fetch",value:function(n){return new Promise(function(e,t){var r=new XMLHttpRequest;r.onload=function(){e(r.response||r.responseText)},r.onerror=function(){t(new Error("Network request failed"))},r.ontimeout=function(){t(new Error("Network request failed"))},r.onabort=function(){t(new Error("Aborted"))},r.open("GET",n,!0),r.send(null)})}}],(r=null)&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{"promise-polyfill":2}],6:[function(r,n,i){"use strict";function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":o(n))&&"object"===o(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.ContextDefaultVertex="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\n\nvarying vec2 v_texcoord;\n\nvoid main(){\n\tgl_Position = vec4(a_position, 0.0, 1.0);\n\tv_texcoord = a_texcoord;\n}\n",t.ContextDefaultFragment="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 v_texcoord;\n\nvoid main(){\n\tgl_FragColor = vec4(0.0);\n}\n",(r=o=t.ContextError||(t.ContextError={}))[r.BrowserSupport=1]="BrowserSupport",r[r.Other=2]="Other";var a=function e(){f(this,e)};t.ContextVertexBuffers=a;var n=function(){function u(){f(this,u)}var e,t,r;return e=u,r=[{key:"tryGetContext",value:function(n,e,i){function t(e,t){if("function"==typeof i)i(e);else{var r=n.parentNode;r&&(r.innerHTML='<div class="glsl-canvas--error">'.concat(t,"</div>"))}}if(!WebGLRenderingContext)return t(o.BrowserSupport,'This page requires a browser that supports WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org">Click here to upgrade your browser.</a>'),null;var r=u.getContext(n,e);return r?r.getExtension("OES_standard_derivatives"):t(o.Other,'It does not appear your computer can support WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>'),r}},{key:"getContext",value:function(e,t){for(var r=["webgl","experimental-webgl"],n=null,i=0;i<r.length;++i)try{n=e.getContext(r[i],t)}catch(e){if(n)break}return n}},{key:"createShader",value:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,i=e.createShader(r);if(e.shaderSource(i,t),e.compileShader(i),!e.getShaderParameter(i,e.COMPILE_STATUS))throw u.lastError=e.getShaderInfoLog(i),console.error("*** Error compiling shader "+i+":"+u.lastError),e.deleteShader(i),{shader:i,source:t,type:r,error:u.lastError,offset:n};return i}},{key:"createProgram",value:function(e,t,r,n){for(var i=e.createProgram(),o=0;o<t.length;++o)e.attachShader(i,t[o]);if(r&&n)for(var a=0;a<r.length;++a)e.bindAttribLocation(i,n?n[a]:a,r[a]);return e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS)?i:(u.lastError=e.getProgramInfoLog(i),console.log("Error in program linking:"+u.lastError),e.deleteProgram(i),null)}},{key:"createVertexBuffers",value:function(e,t){var r=new a,n=e.getAttribLocation(t,"a_texcoord");r.texcoord=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,r.texcoord),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0);var i=e.getAttribLocation(t,"a_position");return r.position=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,r.position),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(i),e.vertexAttribPointer(i,2,e.FLOAT,!1,0,0),r}}],(t=null)&&s(e.prototype,t),r&&s(e,r),u}();n.lastError="",t.default=n})},{}],7:[function(r,n,i){"use strict";function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?y(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var b=function(e){return e&&e.__esModule?e:{default:e}},E=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};!function(e){if("object"===(void 0===n?"undefined":a(n))&&"object"===a(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","promise-polyfill","./buffers","./common","./context","./subscriber","./textures","./uniforms"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),e("promise-polyfill");var a=b(e("./buffers")),u=b(e("./common")),s=E(e("./context")),r=b(e("./subscriber")),f=E(e("./textures")),v=E(e("./uniforms"));t.GlslCanvasOptions=function e(){g(this,e)};var m=function(){function e(){g(this,e),this.delay=0,this.current=0,this.delta=0,this.paused=!1,this.start=this.previous=this.now()}return p(e,[{key:"now",value:function(){return performance.now()}},{key:"play",value:function(){if(this.previous){var e=this.now();this.delay+=e-this.previous,this.previous=e}this.paused=!1}},{key:"pause",value:function(){this.paused=!0}},{key:"next",value:function(){var e=this.now();return this.delta=e-this.previous,this.current=e-this.start-this.delay,this.previous=e,this}}]),e}();t.GlslCanvasTimer=m;var n=function(e){function o(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(g(this,o),(t=c(this,h(o).call(this))).mouse={x:0,y:0},t.uniforms=new v.default,t.buffers=new a.default,t.textures=new f.default,t.textureList=[],t.valid=!1,t.animated=!1,t.dirty=!0,t.visible=!1,t.removeListeners=function(){},!e)return c(t);t.canvas=e,t.width=0,t.height=0,t.rect=e.getBoundingClientRect(),t.vertexString=r.vertexString||s.ContextDefaultVertex,t.fragmentString=r.fragmentString||s.ContextDefaultFragment;var i=s.default.tryGetContext(e,r,n.onError);return i?(t.gl=i,t.devicePixelRatio=window.devicePixelRatio||1,e.style.backgroundColor=r.backgroundColor||"rgba(0,0,0,0)",t.getShaders().then(function(e){t.load(),t.program&&(t.addListeners(),t.loop())},function(e){console.log("error",e)}),o.items.push(y(y(t))),t):c(t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(o,r.default),p(o,[{key:"getShaders",value:function(){var i=this;return new Promise(function(t,e){var r=i.canvas,n={};r.hasAttribute("data-vertex-url")&&(n.vertex=r.getAttribute("data-vertex-url")),r.hasAttribute("data-fragment-url")&&(n.fragment=r.getAttribute("data-fragment-url")),r.hasAttribute("data-vertex")&&(i.vertexString=r.getAttribute("data-vertex")),r.hasAttribute("data-fragment")&&(i.fragmentString=r.getAttribute("data-fragment")),Object.keys(n).length?Promise.all(Object.keys(n).map(function(t,e){var r=n[t];return u.default.fetch(r).then(function(e){return"vertex"===t?i.vertexString=e:i.fragmentString=e})})).then(function(e){t([i.vertexString,i.fragmentString])}):t([i.vertexString,i.fragmentString])})}},{key:"addListeners",value:function(){var o=this,e=function(e){o.rect=o.canvas.getBoundingClientRect()},t=function(e){o.toggle(),o.trigger("click",e)},r=function(e,t){var r=o.rect,n=Math.max(-20,Math.min(r.width+20,(e-r.left)*o.devicePixelRatio)),i=Math.max(-20,Math.min(r.height+20,o.canvas.height-(t-r.top)*o.devicePixelRatio));n===o.mouse.x&&i===o.mouse.y||(o.mouse.x=n,o.mouse.y=i,o.trigger("move",o.mouse))},n=function(e){r(e.clientX||e.pageX,e.clientY||e.pageY)},i=function(e){o.play(),o.trigger("over",e)},a=function(e){o.pause(),o.trigger("out",e)},u=function(e){var t=[].slice.call(e.touches).reduce(function(e,t){return(e=e||{x:0,y:0}).x+=t.clientX,e.y+=t.clientY,e},null);t&&r(t.x/e.touches.length,t.y/e.touches.length)},s=function e(t){o.pause(),o.trigger("out",t),document.removeEventListener("touchend",e)},f=function(e){o.play(),o.trigger("over",e),document.addEventListener("touchend",s),document.removeEventListener("mousemove",n),o.canvas.hasAttribute("controls")&&(o.canvas.removeEventListener("mouseover",i),o.canvas.removeEventListener("mouseout",a))};this.loop=function e(t){o.checkRender(),window.requestAnimationFrame(e)},window.addEventListener("scroll",e),document.addEventListener("mousemove",n,!1),document.addEventListener("touchmove",u),this.canvas.hasAttribute("controls")&&(this.canvas.addEventListener("click",t),this.canvas.addEventListener("mouseover",i),this.canvas.addEventListener("mouseout",a),this.canvas.addEventListener("touchstart",f),this.canvas.hasAttribute("data-autoplay")||this.pause()),this.removeListeners=function(){window.removeEventListener("scroll",e),document.removeEventListener("mousemove",n),document.removeEventListener("touchmove",u),o.canvas.hasAttribute("controls")&&(o.canvas.removeEventListener("click",t),o.canvas.removeEventListener("mouseover",i),o.canvas.removeEventListener("mouseout",a),o.canvas.removeEventListener("touchstart",f))}}},{key:"load",value:function(e,t){t&&(this.vertexString=t),e&&(this.fragmentString=e);var r,n,i=this.gl;try{r=s.default.createShader(i,this.vertexString,i.VERTEX_SHADER),n=s.default.createShader(i,this.fragmentString,i.FRAGMENT_SHADER),this.valid=!!n||(n=s.default.createShader(i,s.ContextDefaultFragment,i.FRAGMENT_SHADER),!1)}catch(e){return console.log(e),void this.trigger("error",e)}var o=s.default.createProgram(i,[r,n]);i.useProgram(o),i.deleteShader(r),i.deleteShader(n),this.program=o,this.valid&&(this.buffers=a.default.getBuffers(i,this.fragmentString,this.vertexString),this.vertexBuffers=s.default.createVertexBuffers(i,o),this.createUniforms()),this.trigger("load",this)}},{key:"test",value:function(c,h){var d=this;return new Promise(function(i,e){var o=d.vertexString,a=d.fragmentString,u=d.timer.paused,s=d.gl.getExtension("EXT_disjoint_timer_query"),f=s.createQueryEXT(),l=d.valid;(c||h)&&(d.load(c,h),l=d.valid,d.render()),d.timer.paused=!0,s.beginQueryEXT(s.TIME_ELAPSED_EXT,f),d.render(),s.endQueryEXT(s.TIME_ELAPSED_EXT);!function e(){d.render();var t=s.getQueryObjectEXT(f,s.QUERY_RESULT_AVAILABLE_EXT),r=d.gl.getParameter(s.GPU_DISJOINT_EXT);if(t&&!r){var n={wasValid:l,fragment:c||d.fragmentString,vertex:h||d.vertexString,timeElapsedMs:s.getQueryObjectEXT(f,s.QUERY_RESULT_EXT)/1e6};d.timer.paused=u,(c||h)&&d.load(a,o),i(n)}else window.requestAnimationFrame(e)}()})}},{key:"destroy",value:function(){this.removeListeners(),this.animated=!1,this.valid=!1;var e=this.gl;for(var t in e.useProgram(null),e.deleteProgram(this.program),this.buffers.values){this.buffers.values[t].destroy(e)}for(var r in this.textures.values){this.textures.values[r].destroy(e)}this.buffers=null,this.textures=null,this.uniforms=null,this.program=null,this.gl=null,o.items.splice(o.items.indexOf(this),1)}},{key:"setUniformArray",value:function(e,t){var r,n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,o=(r=v.default).parseUniform.apply(r,[e].concat(l(t)));if(Array.isArray(o))o.forEach(function(e){return n.loadTexture(e.key,e.values[0])},i);else if(o)switch(o.type){case v.UniformType.Sampler2D:this.loadTexture(e,t[0]);break;default:this.uniforms.set(e,o)}}},{key:"setUniform",value:function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return this.setUniformArray(e,r)}},{key:"setTexture",value:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return this.setUniformArray(e,[t],r)}},{key:"setUniforms",value:function(e){for(var t in e)this.setUniform(t,e[t])}},{key:"pause",value:function(){this.valid&&(this.timer.pause(),this.canvas.classList.add("paused"),this.trigger("pause"))}},{key:"play",value:function(){this.valid&&(this.timer.play(),this.canvas.classList.remove("paused"),this.trigger("play"))}},{key:"toggle",value:function(){this.valid&&(this.timer.paused?this.play():this.pause())}},{key:"isVisible",value:function(){var e=this.rect;return 0<e.top+e.height&&e.top<(window.innerHeight||document.documentElement.clientHeight)}},{key:"isAnimated",value:function(){return(this.animated||this.textures.animated)&&!this.timer.paused}},{key:"isDirty",value:function(){return this.dirty||this.uniforms.dirty||this.textures.dirty}},{key:"sizeDidChanged",value:function(){var e=this.gl,t=Math.ceil(this.canvas.clientWidth),r=Math.ceil(this.canvas.clientHeight);if(this.width===t&&this.height===r)return!1;this.width=t,this.height=r;var n=Math.ceil(t*this.devicePixelRatio),i=Math.ceil(r*this.devicePixelRatio);for(var o in this.canvas.width=n,this.canvas.height=i,this.buffers.values){this.buffers.values[o].resize(e,n,i)}return this.rect=this.canvas.getBoundingClientRect(),this.trigger("resize"),!0}},{key:"checkRender",value:function(){this.isVisible()&&(this.sizeDidChanged()||this.isAnimated()||this.isDirty())?(this.render(),this.canvas.classList.add("playing")):this.canvas.classList.remove("playing")}},{key:"createUniforms",value:function(){var t=this,e=this.gl,r=this.fragmentString,n=e.drawingBufferWidth,i=e.drawingBufferHeight,o=this.timer=new m,a=1<(r.match(/u_delta/g)||[]).length,u=1<(r.match(/u_time/g)||[]).length,s=1<(r.match(/u_date/g)||[]).length,f=1<(r.match(/u_mouse/g)||[]).length,l=this.parseTextures(r);if(this.animated=u||s||f,this.animated?this.canvas.classList.add("animated"):this.canvas.classList.remove("animated"),this.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_resolution",n,i),a&&this.uniforms.create(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_delta",o.delta/1e3),u&&this.uniforms.create(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_time",o.current/1e3),s){var c=new Date;this.uniforms.create(v.UniformMethod.Uniform4f,v.UniformType.Float,"u_date",c.getFullYear(),c.getMonth(),c.getDate(),3600*c.getHours()+60*c.getMinutes()+c.getSeconds()+.001*c.getMilliseconds())}for(var h in f&&this.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_mouse",0,0),this.buffers.values){var d=this.buffers.values[h];this.uniforms.create(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,d.key,d.input.index)}l&&(this.textureList.forEach(function(e){t.loadTexture(e.key,e.url)}),this.textureList=[])}},{key:"parseTextures",value:function(e){for(var t,n=this,r=/uniform\s*sampler2D\s*([\w]*);(\s*\/\/\s*([\w|\:\/\/|\.|\-|\_]*)|\s*)/gm;null!==(t=r.exec(e));){var i=t[1];if(t[3]){var o=t[3].split(".").pop().toLowerCase(),a=t[3];a&&-1!==f.TextureExtensions.indexOf(o)&&this.textureList.push({key:i,url:a})}else this.buffers.has(i)||this.textureList.push({key:i,url:null})}this.canvas.hasAttribute("data-textures")&&this.canvas.getAttribute("data-textures").split(",").forEach(function(e,t){var r="u_tex"+t;n.textureList.push({key:r,url:e})});return 0<this.textureList.length}},{key:"loadTexture",value:function(n,e){var i=this,t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(this.valid)return this.textures.createOrUpdate(this.gl,n,e,this.buffers.count,t).then(function(e){var t=e.index;i.uniforms.createTexture(n,t).texture=e;var r=-1!==n.indexOf("[")?n.replace("[","Resolution["):n+"Resolution";i.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,r,e.width,e.height);return e});this.textureList.push({key:n,url:e})}},{key:"updateUniforms",value:function(){var e=this.gl,t=e.drawingBufferWidth,r=e.drawingBufferHeight,n=this.timer.next();if(this.uniforms.update(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_resolution",t,r),this.uniforms.has("u_delta")&&this.uniforms.update(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_delta",n.delta/1e3),this.uniforms.has("u_time")&&this.uniforms.update(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_time",n.current/1e3),this.uniforms.has("u_date")){var i=new Date;this.uniforms.update(v.UniformMethod.Uniform4f,v.UniformType.Float,"u_date",i.getFullYear(),i.getMonth(),i.getDate(),3600*i.getHours()+60*i.getMinutes()+i.getSeconds()+.001*i.getMilliseconds())}if(this.uniforms.has("u_mouse")){var o=this.mouse;this.uniforms.update(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_mouse",o.x,o.y)}for(var a in this.buffers.values){var u=this.buffers.values[a];this.uniforms.update(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,u.key,u.input.index)}for(var s in this.textures.values){var f=this.textures.values[s];f.tryUpdate(e),this.uniforms.update(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,f.key,f.index)}}},{key:"render",value:function(){var e=this.gl,t=e.drawingBufferWidth,r=e.drawingBufferHeight;for(var n in this.updateUniforms(),this.buffers.values){var i=this.buffers.values[n];this.uniforms.apply(e,i.program),i.render(e,t,r)}e.useProgram(this.program),this.uniforms.apply(e,this.program),e.viewport(0,0,t,r),e.bindFramebuffer(e.FRAMEBUFFER,null),e.drawArrays(e.TRIANGLES,0,6),this.uniforms.clean(),this.textures.clean(),this.dirty=!1,this.trigger("render",this)}}],[{key:"version",value:function(){return"0.2.0"}},{key:"of",value:function(t){return o.items.find(function(e){return e.canvas===t})||new o(t)}},{key:"loadAll",value:function(){return[].slice.call(document.getElementsByClassName("glsl-canvas")).filter(function(e){return e instanceof HTMLCanvasElement}).map(function(e){return o.of(e)})}}]),o}();n.items=[],t.default=n,window.GlslCanvas=n,document.addEventListener("DOMContentLoaded",n.loadAll)})},{"./buffers":4,"./common":5,"./context":6,"./subscriber":9,"./textures":10,"./uniforms":11,"promise-polyfill":2}],8:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.NumberMap=function e(){a(this,e)};var i=function e(){a(this,e)};t.StringMap=i;var r=function(){function e(){a(this,e),this.values=new i}var t,r,n;return t=e,(r=[{key:"has",value:function(e){return this.values.hasOwnProperty(e)}},{key:"set",value:function(e,t){this.values[e]=t}},{key:"get",value:function(e){return this.values[e]}},{key:"forEach",value:function(e){var t=0;for(var r in this.values)e(this.values[r],t,this.values),t++}},{key:"reduce",value:function(e,t){var r=t,n=0;for(var i in this.values)r=e(r,this.values[i],n,this.values),n++;return r}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{}],9:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var i=function e(t,r){a(this,e),this.event=t,this.callback=r};t.Listener=i;var r=function(){function e(){a(this,e),this.listeners=new Set}var t,r,n;return t=e,(r=[{key:"logListeners",value:function(){this.listeners.forEach(function(e){return console.log(e)})}},{key:"subscribe",value:function(e){this.listeners.add(e)}},{key:"unsubscribe",value:function(e){this.listeners.delete(e)}},{key:"unsubscribeAll",value:function(){this.listeners.clear()}},{key:"on",value:function(e,t){return this.listeners.add(new i(e,t)),this}},{key:"off",value:function(t,e){var r=this;return e?this.listeners.delete(new i(t,e)):this.listeners.forEach(function(e){e.event===t&&r.listeners.delete(e)}),this}},{key:"trigger",value:function(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return this.listeners.forEach(function(e){e.event===t&&"function"==typeof e.callback&&e.callback.apply(e,r)}),this}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{}],10:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var p=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./iterable","./subscriber"],e)}(function(e,s){Object.defineProperty(s,"__esModule",{value:!0});var f,t,a,r,n=p(e("./iterable")),i=p(e("./subscriber"));s.TextureImageExtensions=["jpg","jpeg","png"],s.TextureVideoExtensions=["ogv","webm","mp4"],s.TextureExtensions=s.TextureImageExtensions.concat(s.TextureVideoExtensions),(t=f||(f={}))[t.Data=0]="Data",t[t.Element=1]="Element",t[t.Url=2]="Url",(r=a||(a={})).MipMap="mipmap",r.Linear="linear",r.Nearest="nearest";var o=function e(){y(this,e)};s.TextureData=o;var l=function e(){y(this,e)};s.TextureOptions=l;var c=function(e){function u(e,t,r){var n,i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:new l;return y(this,u),(n=d(this,v(u).call(this))).valid=!1,n.dirty=!1,n.animated=!1,n.powerOf2=!1,n.key=t,n.index=r,n.options=i,n.create(e),n}return m(u,i.default),h(u,[{key:"create",value:function(e){this.texture=e.createTexture(),this.texture&&(this.valid=!0),this.setData(e,1,1,new Uint8Array([0,0,0,0]),{filtering:a.Linear})}},{key:"load",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof(this.options=t).url?void 0===this.url||t.url!==this.url?this.setUrl(e,t.url,t):Promise.resolve(this):t.element?this.setElement(e,t.element,t):t.data&&t.width&&t.height?this.setData(e,t.width,t.height,t.data,t):void 0}},{key:"setUrl",value:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(this.valid){this.url=t,this.source=t,this.sourceType=f.Url,this.options=Object.assign(this.options,r);var n,i,o=t.split(".").pop().toLowerCase(),a=-1!==s.TextureVideoExtensions.indexOf(o);return n.src=(a?(n=document.createElement("video"),i=this.setElement(e,n,r),n.setAttribute("playsinline","true"),n.autoplay=!0,n.muted=!0):(n=new Image,i=this.setElement(e,n,r),u.isSafari()&&"data:"===t.slice(0,5)||(n.crossOrigin="anonymous")),t),i}}},{key:"setElement",value:function(o,a){var u=this,s=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return this.options=Object.assign(this.options,s),new Promise(function(t,r){var e=a;if("string"==typeof a&&(a=document.querySelector(a)),a instanceof HTMLCanvasElement||a instanceof HTMLImageElement||a instanceof HTMLVideoElement)if(u.source=a,u.sourceType=f.Element,a instanceof HTMLVideoElement){var n=a;n.addEventListener("loadeddata",function(e){u.update(o,s),u.setFiltering(o,s),t(u)}),n.addEventListener("error",function(e){r(e)})}else a instanceof HTMLImageElement?(a.addEventListener("load",function(){u.update(o,s),u.setFiltering(o,s),t(u)}),a.addEventListener("error",function(e){r(e)})):(u.update(o,s),u.setFiltering(o,s),t(u));else{var i="the 'element' parameter (`element: ".concat(JSON.stringify(e),"`) must be a CSS selector string, or a <canvas>, <image> or <video> object");console.log("Texture '".concat(u.key,"': ").concat(i),s),r(i)}})}},{key:"setData",value:function(e,t,r,n){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{};return this.width=t,this.height=r,this.options=Object.assign(this.options,i),this.source=n,this.sourceType=f.Data,this.update(e,i),this.setFiltering(e,i),Promise.resolve(this)}},{key:"update",value:function(e,t){if(this.valid){if(e.activeTexture(e.TEXTURE0+this.index),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1===t.UNPACK_FLIP_Y_WEBGL?0:1),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.UNPACK_PREMULTIPLY_ALPHA_WEBGL||0),this.sourceType===f.Element)this.source instanceof HTMLImageElement&&this.source.naturalWidth&&this.source.naturalHeight?(this.width=this.source.naturalWidth,this.height=this.source.naturalHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLVideoElement&&this.source.videoWidth&&this.source.videoHeight?(this.width=this.source.videoWidth,this.height=this.source.videoHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLCanvasElement&&(this.width=this.source.width,this.height=this.source.height,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source));else if(this.sourceType===f.Data){var r=this.source;e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.width,this.height,0,e.RGBA,e.UNSIGNED_BYTE,r)}this.trigger("loaded",this)}}},{key:"tryUpdate",value:function(e){var t=!1;return this.animated&&(t=!0,this.update(e,this.options)),t}},{key:"destroy",value:function(e){this.valid&&(e.deleteTexture(this.texture),this.texture=null,delete this.source,this.source=null,this.valid=!1)}},{key:"setFiltering",value:function(e,t){if(this.valid){var r=u.isPowerOf2(this.width)&&u.isPowerOf2(this.height),n=t.filtering||a.MipMap,i=t.TEXTURE_WRAP_S||t.repeat&&e.REPEAT||e.CLAMP_TO_EDGE,o=t.TEXTURE_WRAP_T||t.repeat&&e.REPEAT||e.CLAMP_TO_EDGE;r||(n=n===a.MipMap?a.Linear:n,i=o=e.CLAMP_TO_EDGE),this.powerOf2=r,this.filtering=n,e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,o),this.filtering===a.MipMap?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.generateMipmap(e.TEXTURE_2D)):this.filtering===a.Nearest?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)):this.filtering===a.Linear&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR))}}}],[{key:"isPowerOf2",value:function(e){return 0==(e&e-1)}},{key:"isSafari",value:function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}},{key:"isTextureUrl",value:function(e){return/\.(jpg|jpeg|png|ogv|webm|mp4)$/i.test(e)}},{key:"isTexture",value:function(e){return void 0!==u.getTextureOptions(e)}},{key:"getMaxTextureSize",value:function(e){return e.getParameter(e.MAX_TEXTURE_SIZE)}},{key:"getTextureOptions",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if("string"==typeof e){if(u.isTextureUrl(e))return t.url=e,t;document&&(e=document.querySelector(e))}return e instanceof HTMLCanvasElement||e instanceof HTMLImageElement||e instanceof HTMLVideoElement?(t.element=e,t):e instanceof o?(t.data=e.data,t.width=e.width,t.height=e.height,t):void 0}}]),u}();s.Texture=c;var u=function(e){function t(){var e;return y(this,t),(e=d(this,v(t).apply(this,arguments))).count=0,e.dirty=!1,e.animated=!1,e}return m(t,n.default),h(t,[{key:"clean",value:function(){for(var e in this.values)this.values[e].dirty=!1;this.dirty=!1}},{key:"createOrUpdate",value:function(r,e,t){var n,i=this,o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},u=c.getTextureOptions(t,a);return(n=this.get(e))||(n=new c(r,e,o+this.count,u),this.count++,this.set(e,n)),void 0!==u?n.load(r,u).then(function(e){if(e.source instanceof HTMLVideoElement){var t=e.source;t.addEventListener("play",function(){e.animated=!0,i.animated=!0}),t.addEventListener("pause",function(){e.animated=!1,i.animated=i.reduce(function(e,t){return e||t.animated},!1)}),t.addEventListener("seeked",function(){e.update(r,e.options),i.dirty=!0})}return e}):Promise.resolve(n)}}]),t}();s.default=u})},{"./iterable":8,"./subscriber":9}],11:[function(r,n,i){"use strict";function c(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var y=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./iterable","./textures"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var u,r,s,n,i=y(e("./iterable")),f=e("./textures");(r=u=t.UniformMethod||(t.UniformMethod={})).Uniform1i="uniform1i",r.Uniform2i="uniform2i",r.Uniform3i="uniform3i",r.Uniform4i="uniform4i",r.Uniform1f="uniform1f",r.Uniform2f="uniform2f",r.Uniform3f="uniform3f",r.Uniform4f="uniform4f",r.Uniform1iv="uniform1iv",r.Uniform2iv="uniform2iv",r.Uniform3iv="uniform3iv",r.Uniform4iv="uniform4iv",r.Uniform1fv="uniform1fv",r.Uniform2fv="uniform2fv",r.Uniform3fv="uniform3fv",r.Uniform4fv="uniform4fv",r.UniformMatrix2fv="uniformMatrix2fv",r.UniformMatrix3fv="uniformMatrix3fv",r.UniformMatrix4fv="uniformMatrix4fv",(n=s=t.UniformType||(t.UniformType={}))[n.Int=0]="Int",n[n.IntArray=1]="IntArray",n[n.IntVec2=2]="IntVec2",n[n.IntVec2Array=3]="IntVec2Array",n[n.IntVec3=4]="IntVec3",n[n.IntVec3Array=5]="IntVec3Array",n[n.IntVec4=6]="IntVec4",n[n.IntVec4Array=7]="IntVec4Array",n[n.Float=8]="Float",n[n.FloatArray=9]="FloatArray",n[n.FloatVec2=10]="FloatVec2",n[n.FloatVec2Array=11]="FloatVec2Array",n[n.FloatVec3=12]="FloatVec3",n[n.FloatVec3Array=13]="FloatVec3Array",n[n.FloatVec4=14]="FloatVec4",n[n.FloatVec4Array=15]="FloatVec4Array",n[n.Bool=16]="Bool",n[n.BoolArray=17]="BoolArray",n[n.BoolVec2=18]="BoolVec2",n[n.BoolVec2Array=19]="BoolVec2Array",n[n.BoolVec3=20]="BoolVec3",n[n.BoolVec3Array=21]="BoolVec3Array",n[n.BoolVec4=22]="BoolVec4",n[n.BoolVec4Array=23]="BoolVec4Array",n[n.Sampler2D=24]="Sampler2D",n[n.Sampler2DArray=25]="Sampler2DArray",n[n.SamplerCube=26]="SamplerCube",n[n.SamplerCubeArray=27]="SamplerCubeArray",n[n.Matrix2fv=28]="Matrix2fv",n[n.Matrix3fv=29]="Matrix3fv",n[n.Matrix4fv=30]="Matrix4fv";var l=function(){function t(e){var n=this;v(this,t),this.dirty=!0,e&&Object.assign(this,e),this.apply=function(e,t){if(n.dirty){e.useProgram(t);var r=e.getUniformLocation(t,n.key);e[n.method].apply(e,[r].concat(n.values))}}}return m(t,null,[{key:"Differs",value:function(e,n){return e.length!==n.length||e.reduce(function(e,t,r){return e||t!==n[r]},!1)}}]),t}();t.Uniform=l;var o=function(e){function t(e){return v(this,t),c(this,h(t).call(this,e))}return d(t,l),t}();t.UniformTexture=o;var a=function(e){function a(){var e;return v(this,a),(e=c(this,h(a).apply(this,arguments))).dirty=!1,e}return d(a,i.default),m(a,[{key:"clean",value:function(){for(var e in this.values)this.values[e].dirty=!1;this.dirty=!1}},{key:"create",value:function(e,t,r){for(var n=arguments.length,i=new Array(3<n?n-3:0),o=3;o<n;o++)i[o-3]=arguments[o];var a=new l({method:e,type:t,key:r,values:i});return this.set(r,a),this.dirty=!0,a}},{key:"createTexture",value:function(e,t){var r;return r=-1!==e.indexOf("]")?new o({method:u.Uniform1iv,type:s.Sampler2DArray,key:e,values:[[t]]}):new o({method:u.Uniform1i,type:s.Sampler2D,key:e,values:[t]}),this.set(e,r),this.dirty=!0,r}},{key:"update",value:function(e,t,r){for(var n=this.get(r),i=arguments.length,o=new Array(3<i?i-3:0),a=3;a<i;a++)o[a-3]=arguments[a];n&&(n.method!==e||n.type!==t||l.Differs(n.values,o))&&(n.method=e,n.type=t,n.values=o,n.dirty=!0,this.dirty=!0)}},{key:"createOrUpdate",value:function(e,t,r){for(var n=arguments.length,i=new Array(3<n?n-3:0),o=3;o<n;o++)i[o-3]=arguments[o];this.has(r)?this.update.apply(this,[e,t,r].concat(i)):this.create.apply(this,[e,t,r].concat(i))}},{key:"apply",value:function(e,t){for(var r in this.values)this.values[r].apply(e,t)}}],[{key:"isArrayOfInteger",value:function(e){return e.reduce(function(e,t){return e&&Number.isInteger(t)},!0)}},{key:"isArrayOfNumber",value:function(e){return e.reduce(function(e,t){return e&&"number"==typeof t},!0)}},{key:"isArrayOfBoolean",value:function(e){return e.reduce(function(e,t){return e&&"boolean"==typeof t},!0)}},{key:"isArrayOfTexture",value:function(e){return e.reduce(function(e,t){return e&&f.Texture.isTexture(t)},!0)}},{key:"parseUniform",value:function(r){for(var e=arguments.length,t=new Array(1<e?e-1:0),n=1;n<e;n++)t[n-1]=arguments[n];var i;if(a.isArrayOfInteger(t))switch(t.length){case 1:i=new l({method:u.Uniform1i,type:s.Int,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.IntVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.IntVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.IntVec4,key:r,values:t})}else if(a.isArrayOfNumber(t))switch(t.length){case 1:i=new l({method:u.Uniform1f,type:s.Float,key:r,values:t});break;case 2:i=new l({method:u.Uniform2f,type:s.FloatVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3f,type:s.FloatVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4f,type:s.FloatVec4,key:r,values:t})}else if(a.isArrayOfBoolean(t))switch(t.length){case 1:i=new l({method:u.Uniform1i,type:s.Bool,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.BoolVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.BoolVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.BoolVec4,key:r,values:t})}else if(1===t.length){var o=t[0];if(f.Texture.isTexture(o))i=new l({method:u.Uniform1i,type:s.Sampler2D,key:r,values:o});else if(Array.isArray(o))if(a.isArrayOfInteger(o))switch(o.length){case 1:i=new l({method:u.Uniform1iv,type:s.IntArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2iv,type:s.IntVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3iv,type:s.IntVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4iv,type:s.IntVec4Array,key:r,values:t})}else if(a.isArrayOfNumber(o))switch(o.length){case 1:i=new l({method:u.Uniform1fv,type:s.FloatArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2fv,type:s.FloatVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3fv,type:s.FloatVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4fv,type:s.FloatVec4Array,key:r,values:t})}else if(a.isArrayOfBoolean(o))switch(o.length){case 1:i=new l({method:u.Uniform1iv,type:s.BoolArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.BoolVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.BoolVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.BoolVec4Array,key:r,values:t})}else if(a.isArrayOfTexture(o)){return o.map(function(e,t){return new l({method:u.Uniform1iv,type:s.Sampler2DArray,key:r+"["+t+"]",values:[e]})})}}return i}}]),a}();t.default=a})},{"./iterable":8,"./textures":10}]},{},[7]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvY3MvanMvZ2xzbC1jYW52YXMuanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwidGhpcyIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJwdXNoIiwicHJvdG90eXBlIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiMiIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXRGdW5jIiwiUHJvbWlzZSIsImZuIiwiVHlwZUVycm9yIiwiX3N0YXRlIiwiX2hhbmRsZWQiLCJfdmFsdWUiLCJ1bmRlZmluZWQiLCJfZGVmZXJyZWRzIiwiZG9SZXNvbHZlIiwiaGFuZGxlIiwic2VsZiIsImRlZmVycmVkIiwiX2ltbWVkaWF0ZUZuIiwiY2IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyZXQiLCJyZWplY3QiLCJwcm9taXNlIiwicmVzb2x2ZSIsIm5ld1ZhbHVlIiwidGhlbiIsImZpbmFsZSIsInRoaXNBcmciLCJfdW5oYW5kbGVkUmVqZWN0aW9uRm4iLCJIYW5kbGVyIiwiZG9uZSIsInZhbHVlIiwicmVhc29uIiwiZXgiLCJwcm9tIiwiY29uc3RydWN0b3IiLCJjYWxsYmFjayIsImFsbCIsImFyciIsInNsaWNlIiwicmVtYWluaW5nIiwicmVzIiwidmFsIiwicmFjZSIsInZhbHVlcyIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwidGltZXJzIiwiMyIsImNsZWFySW1tZWRpYXRlIiwiRnVuY3Rpb24iLCJpbW1lZGlhdGVJZHMiLCJuZXh0SW1tZWRpYXRlSWQiLCJUaW1lb3V0IiwiaWQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJwcm9jZXNzL2Jyb3dzZXIuanMiLCI0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfdHlwZW9mIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZhY3RvcnkiLCJ2IiwiZGVmaW5lIiwiYW1kIiwiQnVmZmVyRmxvYXRUeXBlIiwiY29udGV4dF8xIiwiaXRlcmFibGVfMSIsIkJ1ZmZlciIsImdsIiwiQlciLCJCSCIsImluZGV4IiwiYnVmZmVyIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ0ZXh0dXJlIiwiZ2V0VGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFXzJEIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiZmxvYXRUeXBlIiwiZXh0ZW5zaW9uIiwiRkxPQVQiLCJnZXRFeHRlbnNpb24iLCJIQUxGX0ZMT0FUIiwiZ2V0RmxvYXRUeXBlIiwiSEFMRl9GTE9BVF9PRVMiLCJjcmVhdGVUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUiIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiYmluZEZyYW1lYnVmZmVyIiwicGl4ZWxzIiwic3RhdHVzIiwibWluVyIsIk1hdGgiLCJtaW4iLCJtaW5IIiwiRmxvYXQzMkFycmF5IiwicmVhZFBpeGVscyIsIm5ld0luZGV4IiwibmV3VGV4dHVyZSIsInRleFN1YkltYWdlMkQiLCJuZXdCdWZmZXIiLCJkZWxldGVUZXh0dXJlIiwiSU9CdWZmZXIiLCJ2ZXJ0ZXhTdHJpbmciLCJmcmFnbWVudFN0cmluZyIsImlzVmFsaWQiLCJ2ZXJ0ZXhTaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJwcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImlucHV0Iiwib3V0cHV0IiwiZGVsZXRlU2hhZGVyIiwidXNlUHJvZ3JhbSIsInZpZXdwb3J0IiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJ0ZW1wIiwicmVzaXplIiwiZGVsZXRlUHJvZ3JhbSIsIkJ1ZmZlcnMiLCJfaXRlcmFibGVfMSRkZWZhdWx0Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX2luaGVyaXRzIiwiZ2V0Iiwia2V5cyIsImJ1ZmZlcnMiLCJjb3VudCIsIm1hdGNoZXMiLCJyZWdleHAiLCJleGVjIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInNldCIsIi4vY29udGV4dCIsIi4vaXRlcmFibGUiLCI1IiwiQ29tbW9uIiwidXJsIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbmxvYWQiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsInNlbmQiLCJwcm9taXNlLXBvbHlmaWxsIiwiNiIsIkNvbnRleHRFcnJvciIsIkNvbnRleHREZWZhdWx0VmVydGV4IiwiQ29udGV4dERlZmF1bHRGcmFnbWVudCIsIkNvbnRleHRWZXJ0ZXhCdWZmZXJzIiwiQ29udGV4dCIsImNhbnZhcyIsImF0dHJpYnV0ZXMiLCJlcnJvckNhbGxiYWNrIiwiaGFuZGxlRXJyb3IiLCJlcnJvckNvZGUiLCJodG1sIiwiY29udGFpbmVyIiwicGFyZW50Tm9kZSIsImlubmVySFRNTCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsIkJyb3dzZXJTdXBwb3J0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJPdGhlciIsIm9wdGlvbnMiLCJuYW1lcyIsInNvdXJjZSIsInR5cGUiLCJvZmZzZXQiLCJzaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJsYXN0RXJyb3IiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZXJyb3IiLCJzaGFkZXJzIiwibG9jYXRpb25zIiwiYXR0YWNoU2hhZGVyIiwiX2kiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwibG9nIiwidmVydGV4QnVmZmVycyIsInRleGNvb3JkSW5kZXgiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInRleGNvb3JkIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsInBvc2l0aW9uSW5kZXgiLCJwb3NpdGlvbiIsIjciLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpc0FycmF5IiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJ0b1N0cmluZyIsImZyb20iLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX19pbXBvcnRTdGFyIiwicmVzdWx0IiwiayIsImhhc093blByb3BlcnR5IiwiYnVmZmVyc18xIiwiY29tbW9uXzEiLCJzdWJzY3JpYmVyXzEiLCJ0ZXh0dXJlc18xIiwidW5pZm9ybXNfMSIsIkdsc2xDYW52YXNPcHRpb25zIiwiR2xzbENhbnZhc1RpbWVyIiwiZGVsYXkiLCJjdXJyZW50IiwiZGVsdGEiLCJwYXVzZWQiLCJzdGFydCIsInByZXZpb3VzIiwibm93IiwicGVyZm9ybWFuY2UiLCJHbHNsQ2FudmFzIiwiX3N1YnNjcmliZXJfMSRkZWZhdWx0IiwiX3RoaXMiLCJjb250ZXh0T3B0aW9ucyIsIm1vdXNlIiwieCIsInkiLCJ1bmlmb3JtcyIsInRleHR1cmVzIiwidGV4dHVyZUxpc3QiLCJ2YWxpZCIsImFuaW1hdGVkIiwiZGlydHkiLCJ2aXNpYmxlIiwicmVtb3ZlTGlzdGVuZXJzIiwid2lkdGgiLCJoZWlnaHQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidHJ5R2V0Q29udGV4dCIsIm9uRXJyb3IiLCJkZXZpY2VQaXhlbFJhdGlvIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRTaGFkZXJzIiwic3VjY2VzcyIsImxvYWQiLCJhZGRMaXN0ZW5lcnMiLCJsb29wIiwiaXRlbXMiLCJfdGhpczIiLCJ1cmxzIiwiaGFzQXR0cmlidXRlIiwidmVydGV4IiwiZ2V0QXR0cmlidXRlIiwiZnJhZ21lbnQiLCJtYXAiLCJmZXRjaCIsImJvZHkiLCJfdGhpczMiLCJzY3JvbGwiLCJjbGljayIsInRvZ2dsZSIsInRyaWdnZXIiLCJtb3ZlIiwibXgiLCJteSIsIm1heCIsImxlZnQiLCJ0b3AiLCJtb3VzZW1vdmUiLCJjbGllbnRYIiwicGFnZVgiLCJjbGllbnRZIiwicGFnZVkiLCJtb3VzZW92ZXIiLCJwbGF5IiwibW91c2VvdXQiLCJwYXVzZSIsInRvdWNobW92ZSIsInRvdWNoIiwidG91Y2hlcyIsInJlZHVjZSIsInRvdWNoZW5kIiwiZG9jdW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG91Y2hzdGFydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aW1lIiwiY2hlY2tSZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRCdWZmZXJzIiwiY3JlYXRlVmVydGV4QnVmZmVycyIsImNyZWF0ZVVuaWZvcm1zIiwiX3RoaXM0IiwidGltZXIiLCJxdWVyeSIsImNyZWF0ZVF1ZXJ5RVhUIiwid2FzVmFsaWQiLCJyZW5kZXIiLCJiZWdpblF1ZXJ5RVhUIiwiVElNRV9FTEFQU0VEX0VYVCIsImVuZFF1ZXJ5RVhUIiwid2FpdEZvclRlc3QiLCJhdmFpbGFibGUiLCJnZXRRdWVyeU9iamVjdEVYVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUIiwiZGlzam9pbnQiLCJnZXRQYXJhbWV0ZXIiLCJHUFVfRElTSk9JTlRfRVhUIiwidGltZUVsYXBzZWRNcyIsIlFVRVJZX1JFU1VMVF9FWFQiLCJkZXN0cm95IiwiX2tleSIsInNwbGljZSIsImluZGV4T2YiLCJfdW5pZm9ybXNfMSRkZWZhdWx0IiwiX3RoaXM1IiwidW5pZm9ybSIsInBhcnNlVW5pZm9ybSIsImZvckVhY2giLCJsb2FkVGV4dHVyZSIsIlVuaWZvcm1UeXBlIiwiU2FtcGxlcjJEIiwiX2xlbiIsIl9rZXkyIiwic2V0VW5pZm9ybUFycmF5IiwidXJsRWxlbWVudE9yRGF0YSIsInNldFVuaWZvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsIlciLCJjZWlsIiwiY2xpZW50V2lkdGgiLCJIIiwiaXNWaXNpYmxlIiwic2l6ZURpZENoYW5nZWQiLCJpc0FuaW1hdGVkIiwiaXNEaXJ0eSIsIl90aGlzNiIsImhhc0RlbHRhIiwibWF0Y2giLCJoYXNUaW1lIiwiaGFzRGF0ZSIsImhhc01vdXNlIiwiaGFzVGV4dHVyZXMiLCJwYXJzZVRleHR1cmVzIiwiVW5pZm9ybU1ldGhvZCIsIlVuaWZvcm0yZiIsIkZsb2F0VmVjMiIsIlVuaWZvcm0xZiIsIkZsb2F0IiwiZGF0ZSIsIkRhdGUiLCJVbmlmb3JtNGYiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJVbmlmb3JtMWkiLCJfdGhpczciLCJleHQiLCJzcGxpdCIsInBvcCIsInRvTG93ZXJDYXNlIiwiVGV4dHVyZUV4dGVuc2lvbnMiLCJoYXMiLCJfdGhpczgiLCJjcmVhdGVPclVwZGF0ZSIsImtleVJlc29sdXRpb24iLCJyZXBsYWNlIiwibmV4dCIsInVwZGF0ZSIsIl9rZXkzIiwidHJ5VXBkYXRlIiwidXBkYXRlVW5pZm9ybXMiLCJjbGVhbiIsImZpbmQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZmlsdGVyIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJvZiIsImxvYWRBbGwiLCIuL2J1ZmZlcnMiLCIuL2NvbW1vbiIsIi4vc3Vic2NyaWJlciIsIi4vdGV4dHVyZXMiLCIuL3VuaWZvcm1zIiwiOCIsIk51bWJlck1hcCIsIlN0cmluZ01hcCIsIkl0ZXJhYmxlU3RyaW5nTWFwIiwiY2FsbGJhY2tmbiIsImluaXRpYWxWYWx1ZSIsIjkiLCJMaXN0ZW5lciIsImV2ZW50IiwiU3Vic2NyaWJlciIsIlNldCIsImxpc3RlbmVyIiwiZGVsZXRlIiwiY2xlYXIiLCJkYXRhIiwiMTAiLCJUZXh0dXJlU291cmNlVHlwZSIsIlRleHR1cmVGaWx0ZXJpbmdUeXBlIiwiVGV4dHVyZUltYWdlRXh0ZW5zaW9ucyIsIlRleHR1cmVWaWRlb0V4dGVuc2lvbnMiLCJUZXh0dXJlRGF0YSIsIlRleHR1cmVPcHRpb25zIiwiVGV4dHVyZSIsInBvd2VyT2YyIiwic2V0RGF0YSIsIlVpbnQ4QXJyYXkiLCJmaWx0ZXJpbmciLCJMaW5lYXIiLCJzZXRVcmwiLCJlbGVtZW50Iiwic2V0RWxlbWVudCIsInNvdXJjZVR5cGUiLCJVcmwiLCJhc3NpZ24iLCJpc1ZpZGVvIiwic3JjIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImF1dG9wbGF5IiwibXV0ZWQiLCJJbWFnZSIsImlzU2FmYXJpIiwiY3Jvc3NPcmlnaW4iLCJvcmlnaW5hbEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTEltYWdlRWxlbWVudCIsIkhUTUxWaWRlb0VsZW1lbnQiLCJFbGVtZW50IiwidmlkZW8iLCJzZXRGaWx0ZXJpbmciLCJtZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsIkRhdGEiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiVU5TSUdORURfQllURSIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsImltYWdlQnVmZmVyIiwiaXNQb3dlck9mMiIsIk1pcE1hcCIsIndyYXBTIiwicmVwZWF0IiwiUkVQRUFUIiwid3JhcFQiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsImdlbmVyYXRlTWlwbWFwIiwiTmVhcmVzdCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0ZXh0IiwiZ2V0VGV4dHVyZU9wdGlvbnMiLCJNQVhfVEVYVFVSRV9TSVpFIiwiaXNUZXh0dXJlVXJsIiwiVGV4dHVyZXMiLCJ0ZXh0dXJlT3B0aW9ucyIsImZsYWciLCIxMSIsIlVuaWZvcm0iLCJsb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsIm1ldGhvZCIsImIiLCJVbmlmb3JtVGV4dHVyZSIsIl9Vbmlmb3JtIiwiVW5pZm9ybXMiLCJVbmlmb3JtMWl2IiwiU2FtcGxlcjJEQXJyYXkiLCJfbGVuMiIsIkRpZmZlcnMiLCJfbGVuMyIsIk51bWJlciIsImlzSW50ZWdlciIsImlzVGV4dHVyZSIsIl9sZW40IiwiX2tleTQiLCJpc0FycmF5T2ZJbnRlZ2VyIiwiSW50IiwiVW5pZm9ybTJpIiwiSW50VmVjMiIsIlVuaWZvcm0zaSIsIkludFZlYzMiLCJVbmlmb3JtNGkiLCJJbnRWZWM0IiwiaXNBcnJheU9mTnVtYmVyIiwiVW5pZm9ybTNmIiwiRmxvYXRWZWMzIiwiRmxvYXRWZWM0IiwiaXNBcnJheU9mQm9vbGVhbiIsIkJvb2wiLCJCb29sVmVjMiIsIkJvb2xWZWMzIiwiQm9vbFZlYzQiLCJJbnRBcnJheSIsIlVuaWZvcm0yaXYiLCJJbnRWZWMyQXJyYXkiLCJVbmlmb3JtM2l2IiwiSW50VmVjM0FycmF5IiwiVW5pZm9ybTRpdiIsIkludFZlYzRBcnJheSIsIlVuaWZvcm0xZnYiLCJGbG9hdEFycmF5IiwiVW5pZm9ybTJmdiIsIkZsb2F0VmVjMkFycmF5IiwiVW5pZm9ybTNmdiIsIkZsb2F0VmVjM0FycmF5IiwiVW5pZm9ybTRmdiIsIkZsb2F0VmVjNEFycmF5IiwiQm9vbEFycmF5IiwiQm9vbFZlYzJBcnJheSIsIkJvb2xWZWMzQXJyYXkiLCJCb29sVmVjNEFycmF5IiwiaXNBcnJheU9mVGV4dHVyZSJdLCJtYXBwaW5ncyI6IkNBQVksU0FBU0EsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxTQUFTQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsSUFBSUUsRUFBRSxtQkFBbUJDLFNBQVNBLFFBQVEsSUFBSUYsR0FBR0MsRUFBRSxPQUFPQSxFQUFFRixHQUFFLEdBQUksR0FBR0ksRUFBRSxPQUFPQSxFQUFFSixHQUFFLEdBQUksSUFBSUssRUFBRSxJQUFJQyxNQUFNLHVCQUF1Qk4sRUFBRSxLQUFLLE1BQU1LLEVBQUVFLEtBQUssbUJBQW1CRixFQUFFLElBQUlHLEVBQUVYLEVBQUVHLEdBQUcsQ0FBQ1MsUUFBUSxJQUFJYixFQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBb0IsT0FBT0ksRUFBbEJILEVBQUVJLEdBQUcsR0FBR0wsSUFBZUEsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxPQUFPRCxFQUFFRyxHQUFHUyxRQUFRLElBQUksSUFBSUwsRUFBRSxtQkFBbUJELFNBQVNBLFFBQVFILEVBQUUsRUFBRUEsRUFBRUYsRUFBRWEsT0FBT1gsSUFBSUQsRUFBRUQsRUFBRUUsSUFBSSxPQUFPRCxFQUE3YixDQUE0YyxDQUFDYSxFQUFFLENBQUMsU0FBU1QsRUFBUVUsRUFBT0osR0FFeGUsSUFPSUssRUFDQUMsRUFSQUMsRUFBVUgsRUFBT0osUUFBVSxHQVUvQixTQUFTUSxJQUNMLE1BQU0sSUFBSVgsTUFBTSxtQ0FFcEIsU0FBU1ksSUFDTCxNQUFNLElBQUlaLE1BQU0scUNBc0JwQixTQUFTYSxFQUFXQyxHQUNoQixHQUFJTixJQUFxQk8sV0FFckIsT0FB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QixFQUFRLElBQ3pCM0UsT0FBUSxDQUFDOEUsUUEyRG5CLE9BQU9zUixNQUlKd0ssRUEzZFQsR0E4ZEFsbkIsRUFBUXFLLFFBQVU2YyxLQUdsQixDQUFDOVcsYUFBYSxFQUFFaVIsYUFBYSxNQUFNLEdBQUcsQ0FBQyIsImZpbGUiOiJkb2NzL2pzL2dsc2wtY2FudmFzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxufSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHNldEltbWVkaWF0ZSl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHRoaXMge1Byb21pc2V9XG4gKi9cbmZ1bmN0aW9uIGZpbmFsbHlDb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xufVxuXG4vLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBwcm9taXNlLXBvbHlmaWxsIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG52YXIgc2V0VGltZW91dEZ1bmMgPSBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gUG9seWZpbGwgZm9yIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7XG4gIC8qKiBAdHlwZSB7IW51bWJlcn0gKi9cbiAgdGhpcy5fc3RhdGUgPSAwO1xuICAvKiogQHR5cGUgeyFib29sZWFufSAqL1xuICB0aGlzLl9oYW5kbGVkID0gZmFsc2U7XG4gIC8qKiBAdHlwZSB7UHJvbWlzZXx1bmRlZmluZWR9ICovXG4gIHRoaXMuX3ZhbHVlID0gdW5kZWZpbmVkO1xuICAvKiogQHR5cGUgeyFBcnJheTwhRnVuY3Rpb24+fSAqL1xuICB0aGlzLl9kZWZlcnJlZHMgPSBbXTtcblxuICBkb1Jlc29sdmUoZm4sIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGUoc2VsZiwgZGVmZXJyZWQpIHtcbiAgd2hpbGUgKHNlbGYuX3N0YXRlID09PSAzKSB7XG4gICAgc2VsZiA9IHNlbGYuX3ZhbHVlO1xuICB9XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMCkge1xuICAgIHNlbGYuX2RlZmVycmVkcy5wdXNoKGRlZmVycmVkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgc2VsZi5faGFuZGxlZCA9IHRydWU7XG4gIFByb21pc2UuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYiA9IHNlbGYuX3N0YXRlID09PSAxID8gZGVmZXJyZWQub25GdWxmaWxsZWQgOiBkZWZlcnJlZC5vblJlamVjdGVkO1xuICAgIGlmIChjYiA9PT0gbnVsbCkge1xuICAgICAgKHNlbGYuX3N0YXRlID09PSAxID8gcmVzb2x2ZSA6IHJlamVjdCkoZGVmZXJyZWQucHJvbWlzZSwgc2VsZi5fdmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV0O1xuICAgIHRyeSB7XG4gICAgICByZXQgPSBjYihzZWxmLl92YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNvbHZlKGRlZmVycmVkLnByb21pc2UsIHJldCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKHNlbGYsIG5ld1ZhbHVlKSB7XG4gIHRyeSB7XG4gICAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTogaHR0cHM6Ly9naXRodWIuY29tL3Byb21pc2VzLWFwbHVzL3Byb21pc2VzLXNwZWMjdGhlLXByb21pc2UtcmVzb2x1dGlvbi1wcm9jZWR1cmVcbiAgICBpZiAobmV3VmFsdWUgPT09IHNlbGYpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLicpO1xuICAgIGlmIChcbiAgICAgIG5ld1ZhbHVlICYmXG4gICAgICAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgbmV3VmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbiA9IG5ld1ZhbHVlLnRoZW47XG4gICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHNlbGYuX3N0YXRlID0gMztcbiAgICAgICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgZmluYWxlKHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRvUmVzb2x2ZShiaW5kKHRoZW4sIG5ld1ZhbHVlKSwgc2VsZik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5fc3RhdGUgPSAxO1xuICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgZmluYWxlKHNlbGYpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVqZWN0KHNlbGYsIGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlamVjdChzZWxmLCBuZXdWYWx1ZSkge1xuICBzZWxmLl9zdGF0ZSA9IDI7XG4gIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gIGZpbmFsZShzZWxmKTtcbn1cblxuZnVuY3Rpb24gZmluYWxlKHNlbGYpIHtcbiAgaWYgKHNlbGYuX3N0YXRlID09PSAyICYmIHNlbGYuX2RlZmVycmVkcy5sZW5ndGggPT09IDApIHtcbiAgICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5faGFuZGxlZCkge1xuICAgICAgICBQcm9taXNlLl91bmhhbmRsZWRSZWplY3Rpb25GbihzZWxmLl92YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsZi5fZGVmZXJyZWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaGFuZGxlKHNlbGYsIHNlbGYuX2RlZmVycmVkc1tpXSk7XG4gIH1cbiAgc2VsZi5fZGVmZXJyZWRzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbWlzZSkge1xuICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsO1xuICB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uUmVqZWN0ZWQgOiBudWxsO1xuICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xufVxuXG4vKipcbiAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlXG4gKiBvbkZ1bGZpbGxlZCBhbmQgb25SZWplY3RlZCBhcmUgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuXG4gKi9cbmZ1bmN0aW9uIGRvUmVzb2x2ZShmbiwgc2VsZikge1xuICB2YXIgZG9uZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIGZuKFxuICAgICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoc2VsZiwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHNlbGYsIHJlYXNvbik7XG4gICAgICB9XG4gICAgKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgIGRvbmUgPSB0cnVlO1xuICAgIHJlamVjdChzZWxmLCBleCk7XG4gIH1cbn1cblxuUHJvbWlzZS5wcm90b3R5cGVbJ2NhdGNoJ10gPSBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICB2YXIgcHJvbSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGhhbmRsZSh0aGlzLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbSkpO1xuICByZXR1cm4gcHJvbTtcbn07XG5cblByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gPSBmaW5hbGx5Q29uc3RydWN0b3I7XG5cblByb21pc2UuYWxsID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWFyciB8fCB0eXBlb2YgYXJyLmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5Jyk7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh2YWwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgdmFyIHRoZW4gPSB2YWwudGhlbjtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzW2ldID0gdmFsO1xuICAgICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZWplY3QoZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzKGksIGFyZ3NbaV0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFVzZSBwb2x5ZmlsbCBmb3Igc2V0SW1tZWRpYXRlIGZvciBwZXJmb3JtYW5jZSBnYWluc1xuUHJvbWlzZS5faW1tZWRpYXRlRm4gPVxuICAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGZ1bmN0aW9uKGZuKSB7XG4gICAgICBzZXRJbW1lZGlhdGUoZm4pO1xuICAgIH0pIHx8XG4gIGZ1bmN0aW9uKGZuKSB7XG4gICAgc2V0VGltZW91dEZ1bmMoZm4sIDApO1xuICB9O1xuXG5Qcm9taXNlLl91bmhhbmRsZWRSZWplY3Rpb25GbiA9IGZ1bmN0aW9uIF91bmhhbmRsZWRSZWplY3Rpb25GbihlcnIpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlKSB7XG4gICAgY29uc29sZS53YXJuKCdQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246JywgZXJyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJ0aW1lcnNcIikuc2V0SW1tZWRpYXRlKVxufSx7XCJ0aW1lcnNcIjozfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHNldEltbWVkaWF0ZSxjbGVhckltbWVkaWF0ZSl7XG52YXIgbmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzL2Jyb3dzZXIuanMnKS5uZXh0VGljaztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpbW1lZGlhdGVJZHMgPSB7fTtcbnZhciBuZXh0SW1tZWRpYXRlSWQgPSAwO1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkgeyB0aW1lb3V0LmNsb3NlKCk7IH07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gVGhhdCdzIG5vdCBob3cgbm9kZS5qcyBpbXBsZW1lbnRzIGl0IGJ1dCB0aGUgZXhwb3NlZCBhcGkgaXMgdGhlIHNhbWUuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uKGZuKSB7XG4gIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZmFsc2UgOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgaW1tZWRpYXRlSWRzW2lkXSA9IHRydWU7XG5cbiAgbmV4dFRpY2soZnVuY3Rpb24gb25OZXh0VGljaygpIHtcbiAgICBpZiAoaW1tZWRpYXRlSWRzW2lkXSkge1xuICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZVxuICAgICAgLy8gQHNlZSBodHRwOi8vanNwZXJmLmNvbS9jYWxsLWFwcGx5LXNlZ3VcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4uY2FsbChudWxsKTtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgaWRzIGZyb20gbGVha2luZ1xuICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaWQ7XG59O1xuXG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyBjbGVhckltbWVkaWF0ZSA6IGZ1bmN0aW9uKGlkKSB7XG4gIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdO1xufTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwidGltZXJzXCIpLnNldEltbWVkaWF0ZSxyZXF1aXJlKFwidGltZXJzXCIpLmNsZWFySW1tZWRpYXRlKVxufSx7XCJwcm9jZXNzL2Jyb3dzZXIuanNcIjoxLFwidGltZXJzXCI6M31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgX19pbXBvcnREZWZhdWx0ID0gdm9pZCAwICYmICh2b2lkIDApLl9faW1wb3J0RGVmYXVsdCB8fCBmdW5jdGlvbiAobW9kKSB7XG4gIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7XG4gICAgXCJkZWZhdWx0XCI6IG1vZFxuICB9O1xufTtcblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIGlmICgodHlwZW9mIG1vZHVsZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG1vZHVsZSkpID09PSBcIm9iamVjdFwiICYmIF90eXBlb2YobW9kdWxlLmV4cG9ydHMpID09PSBcIm9iamVjdFwiKSB7XG4gICAgdmFyIHYgPSBmYWN0b3J5KHJlcXVpcmUsIGV4cG9ydHMpO1xuICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIG1vZHVsZS5leHBvcnRzID0gdjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXCJyZXF1aXJlXCIsIFwiZXhwb3J0c1wiLCBcIi4vY29udGV4dFwiLCBcIi4vaXRlcmFibGVcIl0sIGZhY3RvcnkpO1xuICB9XG59KShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgY29udGV4dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRleHRcIikpO1xuXG4gIHZhciBpdGVyYWJsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2l0ZXJhYmxlXCIpKTtcblxuICB2YXIgQnVmZmVyRmxvYXRUeXBlO1xuXG4gIChmdW5jdGlvbiAoQnVmZmVyRmxvYXRUeXBlKSB7XG4gICAgQnVmZmVyRmxvYXRUeXBlW0J1ZmZlckZsb2F0VHlwZVtcIkZMT0FUXCJdID0gMF0gPSBcIkZMT0FUXCI7XG4gICAgQnVmZmVyRmxvYXRUeXBlW0J1ZmZlckZsb2F0VHlwZVtcIkhBTEZfRkxPQVRcIl0gPSAxXSA9IFwiSEFMRl9GTE9BVFwiO1xuICB9KShCdWZmZXJGbG9hdFR5cGUgPSBleHBvcnRzLkJ1ZmZlckZsb2F0VHlwZSB8fCAoZXhwb3J0cy5CdWZmZXJGbG9hdFR5cGUgPSB7fSkpO1xuXG4gIHZhciBCdWZmZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXIoZ2wsIEJXLCBCSCwgaW5kZXgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXIpO1xuXG4gICAgICB2YXIgYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy5nZXRUZXh0dXJlKGdsLCBCVywgQkgsIGluZGV4KTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLkJXID0gQlc7XG4gICAgICB0aGlzLkJIID0gQkg7XG4gICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1ZmZlciwgW3tcbiAgICAgIGtleTogXCJnZXRGbG9hdFR5cGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGbG9hdFR5cGUoZ2wpIHtcbiAgICAgICAgdmFyIGZsb2F0VHlwZSwgZXh0ZW5zaW9uO1xuXG4gICAgICAgIGlmIChCdWZmZXIuZmxvYXRUeXBlID09PSBCdWZmZXJGbG9hdFR5cGUuRkxPQVQpIHtcbiAgICAgICAgICBleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG5cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICBmbG9hdFR5cGUgPSBnbC5GTE9BVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQnVmZmVyLmZsb2F0VHlwZSA9IEJ1ZmZlckZsb2F0VHlwZS5IQUxGX0ZMT0FUO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmxvYXRUeXBlKGdsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0Jyk7XG5cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICBmbG9hdFR5cGUgPSBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEJ1ZmZlci5mbG9hdFR5cGUgPSBCdWZmZXJGbG9hdFR5cGUuRkxPQVQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGbG9hdFR5cGUoZ2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbG9hdFR5cGU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFRleHR1cmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0dXJlKGdsLCBCVywgQkgsIGluZGV4KSB7XG4gICAgICAgIHZhciBmbG9hdFR5cGUgPSB0aGlzLmdldEZsb2F0VHlwZShnbCk7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgaW5kZXgpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBCVywgQkgsIDAsIGdsLlJHQkEsIGZsb2F0VHlwZSwgbnVsbCk7XG4gICAgICAgIHZhciBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblxuICAgICAgICBpZiAoc3RhdHVzICE9PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkge1xuICAgICAgICAgIGlmIChCdWZmZXIuZmxvYXRUeXBlID09PSBCdWZmZXJGbG9hdFR5cGUuRkxPQVQpIHtcbiAgICAgICAgICAgIEJ1ZmZlci5mbG9hdFR5cGUgPSBCdWZmZXJGbG9hdFR5cGUuSEFMRl9GTE9BVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQnVmZmVyLmZsb2F0VHlwZSA9IEJ1ZmZlckZsb2F0VHlwZS5GTE9BVDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0dXJlKGdsLCBCVywgQkgsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXNpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoZ2wsIEJXLCBCSCkge1xuICAgICAgICBpZiAoQlcgIT09IHRoaXMuQlcgfHwgQkggIT09IHRoaXMuQkgpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgICAgdmFyIHRleHR1cmUgPSB0aGlzLnRleHR1cmU7XG4gICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGJ1ZmZlcik7XG4gICAgICAgICAgdmFyIHN0YXR1cyA9IGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpO1xuICAgICAgICAgIHZhciBtaW5XID0gTWF0aC5taW4oQlcsIHRoaXMuQlcpO1xuICAgICAgICAgIHZhciBtaW5IID0gTWF0aC5taW4oQkgsIHRoaXMuQkgpO1xuICAgICAgICAgIHZhciBwaXhlbHM7XG4gICAgICAgICAgdmFyIGZsb2F0VHlwZSA9IHRoaXMuZ2V0RmxvYXRUeXBlKGdsKTtcblxuICAgICAgICAgIGlmIChzdGF0dXMgPT09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKSB7XG4gICAgICAgICAgICBwaXhlbHMgPSBuZXcgRmxvYXQzMkFycmF5KG1pblcgKiBtaW5IICogNCk7XG4gICAgICAgICAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIG1pblcsIG1pbkgsIGdsLlJHQkEsIGZsb2F0VHlwZSwgcGl4ZWxzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICAgIHZhciBuZXdJbmRleCA9IGluZGV4ICsgMTsgLy8gdGVtcG9yYXJ5IGluZGV4XG5cbiAgICAgICAgICB2YXIgbmV3VGV4dHVyZSA9IHRoaXMuZ2V0VGV4dHVyZShnbCwgQlcsIEJILCBuZXdJbmRleCk7XG4gICAgICAgICAgZmxvYXRUeXBlID0gdGhpcy5nZXRGbG9hdFR5cGUoZ2wpO1xuICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cbiAgICAgICAgICBpZiAocGl4ZWxzKSB7XG4gICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIG1pblcsIG1pbkgsIGdsLlJHQkEsIGZsb2F0VHlwZSwgcGl4ZWxzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbmV3QnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZSk7XG4gICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGluZGV4KTtcbiAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBuZXdUZXh0dXJlKTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3VGV4dHVyZTtcbiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ld0J1ZmZlcjtcbiAgICAgICAgICB0aGlzLkJXID0gQlc7XG4gICAgICAgICAgdGhpcy5CSCA9IEJIO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1ZmZlcjtcbiAgfSgpO1xuXG4gIEJ1ZmZlci5mbG9hdFR5cGUgPSBCdWZmZXJGbG9hdFR5cGUuSEFMRl9GTE9BVDtcbiAgZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXI7XG5cbiAgdmFyIElPQnVmZmVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSU9CdWZmZXIoaW5kZXgsIGtleSwgdmVydGV4U3RyaW5nLCBmcmFnbWVudFN0cmluZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElPQnVmZmVyKTtcblxuICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgIHRoaXMudmVydGV4U3RyaW5nID0gdmVydGV4U3RyaW5nO1xuICAgICAgdGhpcy5mcmFnbWVudFN0cmluZyA9IGZyYWdtZW50U3RyaW5nO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJT0J1ZmZlciwgW3tcbiAgICAgIGtleTogXCJjcmVhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoZ2wsIEJXLCBCSCkge1xuICAgICAgICB2YXIgdmVydGV4U2hhZGVyID0gY29udGV4dF8xLmRlZmF1bHQuY3JlYXRlU2hhZGVyKGdsLCB0aGlzLnZlcnRleFN0cmluZywgZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgICAgIHZhciBmcmFnbWVudFNoYWRlciA9IGNvbnRleHRfMS5kZWZhdWx0LmNyZWF0ZVNoYWRlcihnbCwgdGhpcy5mcmFnbWVudFN0cmluZywgZ2wuRlJBR01FTlRfU0hBREVSLCAxKTtcblxuICAgICAgICBpZiAoIWZyYWdtZW50U2hhZGVyKSB7XG4gICAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSBjb250ZXh0XzEuZGVmYXVsdC5jcmVhdGVTaGFkZXIoZ2wsICd2b2lkIG1haW4oKXtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCk7XFxufScsIGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9ncmFtID0gY29udGV4dF8xLmRlZmF1bHQuY3JlYXRlUHJvZ3JhbShnbCwgW3ZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXJdKTsgLy8gZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcblxuICAgICAgICB2YXIgaW5wdXQgPSBuZXcgQnVmZmVyKGdsLCBCVywgQkgsIHRoaXMuaW5kZXggKyAwKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IG5ldyBCdWZmZXIoZ2wsIEJXLCBCSCwgdGhpcy5pbmRleCArIDIpO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgICAgICBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVyKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGdsLCBCVywgQkgpIHtcbiAgICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBCVywgQkgpO1xuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMub3V0cHV0LmJ1ZmZlcik7XG4gICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGhpcy5vdXRwdXQudGV4dHVyZSwgMCk7XG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCA2KTsgLy8gc3dhcFxuXG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy5pbnB1dDtcbiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5vdXRwdXQ7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0ZW1wO1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXNpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoZ2wsIEJXLCBCSCkge1xuICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIEJXLCBCSCk7XG4gICAgICAgIHRoaXMuaW5wdXQucmVzaXplKGdsLCBCVywgQkgpO1xuICAgICAgICB0aGlzLm91dHB1dC5yZXNpemUoZ2wsIEJXLCBCSCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KGdsKSB7XG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnB1dCA9IG51bGw7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSU9CdWZmZXI7XG4gIH0oKTtcblxuICBleHBvcnRzLklPQnVmZmVyID0gSU9CdWZmZXI7XG5cbiAgdmFyIEJ1ZmZlcnMgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfaXRlcmFibGVfMSRkZWZhdWx0KSB7XG4gICAgX2luaGVyaXRzKEJ1ZmZlcnMsIF9pdGVyYWJsZV8xJGRlZmF1bHQpO1xuXG4gICAgZnVuY3Rpb24gQnVmZmVycygpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJzKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihCdWZmZXJzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnVmZmVycywgW3tcbiAgICAgIGtleTogXCJjb3VudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykubGVuZ3RoICogNDtcbiAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJnZXRCdWZmZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QnVmZmVycyhnbCwgZnJhZ21lbnRTdHJpbmcsIHZlcnRleFN0cmluZykge1xuICAgICAgICB2YXIgYnVmZmVycyA9IG5ldyBCdWZmZXJzKCk7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgICAgaWYgKGZyYWdtZW50U3RyaW5nKSB7XG4gICAgICAgICAgdmFyIHJlZ2V4cCA9IC8oPzpeXFxzKikoKD86I2lmfCNlbGlmKSg/OlxccyopKGRlZmluZWRcXHMqXFwoXFxzKkJVRkZFUl8pKFxcZCspKD86XFxzKlxcKSl8KD86I2lmZGVmKSg/OlxccypCVUZGRVJfKShcXGQrKSg/OlxccyopKS9nbTtcbiAgICAgICAgICB2YXIgbWF0Y2hlcztcblxuICAgICAgICAgIHdoaWxlICgobWF0Y2hlcyA9IHJlZ2V4cC5leGVjKGZyYWdtZW50U3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBpID0gbWF0Y2hlc1szXSB8fCBtYXRjaGVzWzRdO1xuICAgICAgICAgICAgdmFyIGtleSA9ICd1X2J1ZmZlcicgKyBpO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBJT0J1ZmZlcihjb3VudCwga2V5LCB2ZXJ0ZXhTdHJpbmcsICcjZGVmaW5lIEJVRkZFUl8nICsgaSArICdcXG4nICsgZnJhZ21lbnRTdHJpbmcpO1xuICAgICAgICAgICAgYnVmZmVyLmNyZWF0ZShnbCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcbiAgICAgICAgICAgIGJ1ZmZlcnMuc2V0KGtleSwgYnVmZmVyKTtcbiAgICAgICAgICAgIGNvdW50ICs9IDQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1ZmZlcnM7XG4gIH0oaXRlcmFibGVfMS5kZWZhdWx0KTtcblxuICBleHBvcnRzLmRlZmF1bHQgPSBCdWZmZXJzO1xufSk7XG5cbn0se1wiLi9jb250ZXh0XCI6NixcIi4vaXRlcmFibGVcIjo4fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKCh0eXBlb2YgbW9kdWxlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobW9kdWxlKSkgPT09IFwib2JqZWN0XCIgJiYgX3R5cGVvZihtb2R1bGUuZXhwb3J0cykgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgdiA9IGZhY3RvcnkocmVxdWlyZSwgZXhwb3J0cyk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgbW9kdWxlLmV4cG9ydHMgPSB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIFwicHJvbWlzZS1wb2x5ZmlsbFwiXSwgZmFjdG9yeSk7XG4gIH1cbn0pKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHJlcXVpcmUoXCJwcm9taXNlLXBvbHlmaWxsXCIpO1xuXG4gIHZhciBDb21tb24gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21tb24oKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tbW9uKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29tbW9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcImZldGNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2godXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlIHx8IHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0Fib3J0ZWQnKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29tbW9uO1xuICB9KCk7XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tbW9uO1xufSk7XG5cbn0se1wicHJvbWlzZS1wb2x5ZmlsbFwiOjJ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBpZiAoKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuICAgIHZhciB2ID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzKTtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSBtb2R1bGUuZXhwb3J0cyA9IHY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIl0sIGZhY3RvcnkpO1xuICB9XG59KShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5Db250ZXh0RGVmYXVsdFZlcnRleCA9IFwiXFxuI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxuYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhX3RleGNvb3JkO1xcblxcbnZhcnlpbmcgdmVjMiB2X3RleGNvb3JkO1xcblxcbnZvaWQgbWFpbigpe1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChhX3Bvc2l0aW9uLCAwLjAsIDEuMCk7XFxuXFx0dl90ZXhjb29yZCA9IGFfdGV4Y29vcmQ7XFxufVxcblwiO1xuICBleHBvcnRzLkNvbnRleHREZWZhdWx0RnJhZ21lbnQgPSBcIlxcbiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbnZhcnlpbmcgdmVjMiB2X3RleGNvb3JkO1xcblxcbnZvaWQgbWFpbigpe1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoMC4wKTtcXG59XFxuXCI7XG4gIHZhciBDb250ZXh0RXJyb3I7XG5cbiAgKGZ1bmN0aW9uIChDb250ZXh0RXJyb3IpIHtcbiAgICBDb250ZXh0RXJyb3JbQ29udGV4dEVycm9yW1wiQnJvd3NlclN1cHBvcnRcIl0gPSAxXSA9IFwiQnJvd3NlclN1cHBvcnRcIjtcbiAgICBDb250ZXh0RXJyb3JbQ29udGV4dEVycm9yW1wiT3RoZXJcIl0gPSAyXSA9IFwiT3RoZXJcIjtcbiAgfSkoQ29udGV4dEVycm9yID0gZXhwb3J0cy5Db250ZXh0RXJyb3IgfHwgKGV4cG9ydHMuQ29udGV4dEVycm9yID0ge30pKTtcblxuICB2YXIgQ29udGV4dFZlcnRleEJ1ZmZlcnMgPSBmdW5jdGlvbiBDb250ZXh0VmVydGV4QnVmZmVycygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGV4dFZlcnRleEJ1ZmZlcnMpO1xuICB9O1xuXG4gIGV4cG9ydHMuQ29udGV4dFZlcnRleEJ1ZmZlcnMgPSBDb250ZXh0VmVydGV4QnVmZmVycztcblxuICB2YXIgQ29udGV4dCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGV4dCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENvbnRleHQsIG51bGwsIFt7XG4gICAgICBrZXk6IFwidHJ5R2V0Q29udGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyeUdldENvbnRleHQoY2FudmFzLCBhdHRyaWJ1dGVzLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yQ29kZSwgaHRtbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvckNvZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gY2FudmFzLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwiZ2xzbC1jYW52YXMtLWVycm9yXFxcIj5cIi5jb25jYXQoaHRtbCwgXCI8L2Rpdj5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihDb250ZXh0RXJyb3IuQnJvd3NlclN1cHBvcnQsIFwiVGhpcyBwYWdlIHJlcXVpcmVzIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIFdlYkdMLjxici8+XFxuXFx0XFx0XFx0PGEgaHJlZj1cXFwiaHR0cDovL2dldC53ZWJnbC5vcmdcXFwiPkNsaWNrIGhlcmUgdG8gdXBncmFkZSB5b3VyIGJyb3dzZXIuPC9hPlwiKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250ZXh0ID0gQ29udGV4dC5nZXRDb250ZXh0KGNhbnZhcywgYXR0cmlidXRlcyk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoQ29udGV4dEVycm9yLk90aGVyLCBcIkl0IGRvZXMgbm90IGFwcGVhciB5b3VyIGNvbXB1dGVyIGNhbiBzdXBwb3J0IFdlYkdMLjxici8+XFxuXFx0XFx0XFx0PGEgaHJlZj1cXFwiaHR0cDovL2dldC53ZWJnbC5vcmcvdHJvdWJsZXNob290aW5nL1xcXCI+Q2xpY2sgaGVyZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L2E+XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuZ2V0RXh0ZW5zaW9uKCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDb250ZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udGV4dChjYW52YXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG5hbWVzID0gWyd3ZWJnbCcsICdleHBlcmltZW50YWwtd2ViZ2wnXTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBudWxsO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KG5hbWVzW2ldLCBvcHRpb25zKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3JlYXRlU2hhZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2hhZGVyKGdsLCBzb3VyY2UsIHR5cGUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgICAgICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuICAgICAgICB2YXIgY29tcGlsZWQgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUyk7XG5cbiAgICAgICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgICAgIC8vIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBjb21waWxhdGlvbjsgZ2V0IHRoZSBlcnJvclxuICAgICAgICAgIENvbnRleHQubGFzdEVycm9yID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyoqKiBFcnJvciBjb21waWxpbmcgc2hhZGVyICcgKyBzaGFkZXIgKyAnOicgKyBDb250ZXh0Lmxhc3RFcnJvcik7IC8vIG1haW4udHJpZ2dlcignZXJyb3InLCB7XG5cbiAgICAgICAgICBnbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcbiAgICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICBzaGFkZXI6IHNoYWRlcixcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGVycm9yOiBDb250ZXh0Lmxhc3RFcnJvcixcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaGFkZXI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZVByb2dyYW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVQcm9ncmFtKGdsLCBzaGFkZXJzLCBhdHRyaWJ1dGVzLCBsb2NhdGlvbnMpIHtcbiAgICAgICAgdmFyIHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFkZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHNoYWRlcnNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMgJiYgbG9jYXRpb25zKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyArK19pKSB7XG4gICAgICAgICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbG9jYXRpb25zID8gbG9jYXRpb25zW19pXSA6IF9pLCBhdHRyaWJ1dGVzW19pXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7IC8vIENoZWNrIHRoZSBsaW5rIHN0YXR1c1xuXG4gICAgICAgIHZhciBsaW5rZWQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcblxuICAgICAgICBpZiAoIWxpbmtlZCkge1xuICAgICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGxpbmtcbiAgICAgICAgICBDb250ZXh0Lmxhc3RFcnJvciA9IGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBpbiBwcm9ncmFtIGxpbmtpbmc6JyArIENvbnRleHQubGFzdEVycm9yKTtcbiAgICAgICAgICBnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb2dyYW07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZVZlcnRleEJ1ZmZlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVWZXJ0ZXhCdWZmZXJzKGdsLCBwcm9ncmFtKSB7XG4gICAgICAgIHZhciB2ZXJ0ZXhCdWZmZXJzID0gbmV3IENvbnRleHRWZXJ0ZXhCdWZmZXJzKCk7XG4gICAgICAgIHZhciB0ZXhjb29yZEluZGV4ID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ2FfdGV4Y29vcmQnKTtcbiAgICAgICAgdmVydGV4QnVmZmVycy50ZXhjb29yZCA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmVydGV4QnVmZmVycy50ZXhjb29yZCk7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFswLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDEuMCwgMS4wLCAwLjAsIDEuMCwgMS4wXSksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGV4Y29vcmRJbmRleCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGV4Y29vcmRJbmRleCwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uSW5kZXggPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAnYV9wb3NpdGlvbicpO1xuICAgICAgICB2ZXJ0ZXhCdWZmZXJzLnBvc2l0aW9uID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXJzLnBvc2l0aW9uKTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoWy0xLjAsIC0xLjAsIDEuMCwgLTEuMCwgLTEuMCwgMS4wLCAtMS4wLCAxLjAsIDEuMCwgLTEuMCwgMS4wLCAxLjBdKSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3NpdGlvbkluZGV4KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkluZGV4LCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICAgICAgICByZXR1cm4gdmVydGV4QnVmZmVycztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29udGV4dDtcbiAgfSgpO1xuXG4gIENvbnRleHQubGFzdEVycm9yID0gJyc7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbnRleHQ7XG59KTtcblxufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfX2ltcG9ydERlZmF1bHQgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19pbXBvcnREZWZhdWx0IHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgcmV0dXJuIG1vZCAmJiBtb2QuX19lc01vZHVsZSA/IG1vZCA6IHtcbiAgICBcImRlZmF1bHRcIjogbW9kXG4gIH07XG59O1xuXG52YXIgX19pbXBvcnRTdGFyID0gdm9pZCAwICYmICh2b2lkIDApLl9faW1wb3J0U3RhciB8fCBmdW5jdGlvbiAobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkge1xuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XG4gIH1cbiAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBpZiAoKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuICAgIHZhciB2ID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzKTtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSBtb2R1bGUuZXhwb3J0cyA9IHY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIiwgXCJwcm9taXNlLXBvbHlmaWxsXCIsIFwiLi9idWZmZXJzXCIsIFwiLi9jb21tb25cIiwgXCIuL2NvbnRleHRcIiwgXCIuL3N1YnNjcmliZXJcIiwgXCIuL3RleHR1cmVzXCIsIFwiLi91bmlmb3Jtc1wiXSwgZmFjdG9yeSk7XG4gIH1cbn0pKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pOyAvLyBpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XG4gIC8vIGltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuICByZXF1aXJlKFwicHJvbWlzZS1wb2x5ZmlsbFwiKTtcblxuICB2YXIgYnVmZmVyc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2J1ZmZlcnNcIikpO1xuXG4gIHZhciBjb21tb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21tb25cIikpO1xuXG4gIHZhciBjb250ZXh0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29udGV4dFwiKSk7XG5cbiAgdmFyIHN1YnNjcmliZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdWJzY3JpYmVyXCIpKTtcblxuICB2YXIgdGV4dHVyZXNfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi90ZXh0dXJlc1wiKSk7XG5cbiAgdmFyIHVuaWZvcm1zXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdW5pZm9ybXNcIikpO1xuXG4gIHZhciBHbHNsQ2FudmFzT3B0aW9ucyA9IGZ1bmN0aW9uIEdsc2xDYW52YXNPcHRpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHbHNsQ2FudmFzT3B0aW9ucyk7XG4gIH07XG5cbiAgZXhwb3J0cy5HbHNsQ2FudmFzT3B0aW9ucyA9IEdsc2xDYW52YXNPcHRpb25zO1xuXG4gIHZhciBHbHNsQ2FudmFzVGltZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHbHNsQ2FudmFzVGltZXIoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xzbENhbnZhc1RpbWVyKTtcblxuICAgICAgdGhpcy5kZWxheSA9IDAuMDtcbiAgICAgIHRoaXMuY3VycmVudCA9IDAuMDtcbiAgICAgIHRoaXMuZGVsdGEgPSAwLjA7XG4gICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMucHJldmlvdXMgPSB0aGlzLm5vdygpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhHbHNsQ2FudmFzVGltZXIsIFt7XG4gICAgICBrZXk6IFwibm93XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbm93KCkge1xuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBsYXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5wcmV2aW91cykge1xuICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuICAgICAgICAgIHRoaXMuZGVsYXkgKz0gbm93IC0gdGhpcy5wcmV2aW91cztcbiAgICAgICAgICB0aGlzLnByZXZpb3VzID0gbm93O1xuICAgICAgICB9IC8vIGNvbnNvbGUubG9nKHRoaXMuZGVsYXkpO1xuXG5cbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGF1c2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG4gICAgICAgIHRoaXMuZGVsdGEgPSBub3cgLSB0aGlzLnByZXZpb3VzO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBub3cgLSB0aGlzLnN0YXJ0IC0gdGhpcy5kZWxheTtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEdsc2xDYW52YXNUaW1lcjtcbiAgfSgpO1xuXG4gIGV4cG9ydHMuR2xzbENhbnZhc1RpbWVyID0gR2xzbENhbnZhc1RpbWVyO1xuXG4gIHZhciBHbHNsQ2FudmFzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX3N1YnNjcmliZXJfMSRkZWZhdWx0KSB7XG4gICAgX2luaGVyaXRzKEdsc2xDYW52YXMsIF9zdWJzY3JpYmVyXzEkZGVmYXVsdCk7XG5cbiAgICBmdW5jdGlvbiBHbHNsQ2FudmFzKGNhbnZhcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICB2YXIgY29udGV4dE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsvLyBhbHBoYTogdHJ1ZSxcbiAgICAgICAgLy8gYW50aWFsaWFzOiB0cnVlLFxuICAgICAgICAvLyBwcmVtdWx0aXBsaWVkQWxwaGE6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHbHNsQ2FudmFzKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoR2xzbENhbnZhcykuY2FsbCh0aGlzKSk7XG4gICAgICBfdGhpcy5tb3VzZSA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfTtcbiAgICAgIF90aGlzLnVuaWZvcm1zID0gbmV3IHVuaWZvcm1zXzEuZGVmYXVsdCgpO1xuICAgICAgX3RoaXMuYnVmZmVycyA9IG5ldyBidWZmZXJzXzEuZGVmYXVsdCgpO1xuICAgICAgX3RoaXMudGV4dHVyZXMgPSBuZXcgdGV4dHVyZXNfMS5kZWZhdWx0KCk7XG4gICAgICBfdGhpcy50ZXh0dXJlTGlzdCA9IFtdO1xuICAgICAgX3RoaXMudmFsaWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICBfdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICBfdGhpcy52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLnJlbW92ZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICBfdGhpcy53aWR0aCA9IDA7IC8vIGNhbnZhcy5jbGllbnRXaWR0aDtcblxuICAgICAgX3RoaXMuaGVpZ2h0ID0gMDsgLy8gY2FudmFzLmNsaWVudEhlaWdodDtcblxuICAgICAgX3RoaXMucmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIF90aGlzLnZlcnRleFN0cmluZyA9IGNvbnRleHRPcHRpb25zLnZlcnRleFN0cmluZyB8fCBjb250ZXh0XzEuQ29udGV4dERlZmF1bHRWZXJ0ZXg7XG4gICAgICBfdGhpcy5mcmFnbWVudFN0cmluZyA9IGNvbnRleHRPcHRpb25zLmZyYWdtZW50U3RyaW5nIHx8IGNvbnRleHRfMS5Db250ZXh0RGVmYXVsdEZyYWdtZW50O1xuICAgICAgdmFyIGdsID0gY29udGV4dF8xLmRlZmF1bHQudHJ5R2V0Q29udGV4dChjYW52YXMsIGNvbnRleHRPcHRpb25zLCBvcHRpb25zLm9uRXJyb3IpO1xuXG4gICAgICBpZiAoIWdsKSB7XG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmdsID0gZ2w7XG4gICAgICBfdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICAgIGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb250ZXh0T3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgfHwgJ3JnYmEoMCwwLDAsMCknO1xuXG4gICAgICBfdGhpcy5nZXRTaGFkZXJzKCkudGhlbihmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgICAgICBfdGhpcy5sb2FkKCk7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5wcm9ncmFtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYWRkTGlzdGVuZXJzKCk7XG5cbiAgICAgICAgX3RoaXMubG9vcCgpOyAvLyB0aGlzLmFuaW1hdGVkID0gZmFsc2U7XG5cbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLCBlcnJvcik7XG4gICAgICB9KTtcblxuICAgICAgR2xzbENhbnZhcy5pdGVtcy5wdXNoKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoR2xzbENhbnZhcywgW3tcbiAgICAgIGtleTogXCJnZXRTaGFkZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2hhZGVycygpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB2YXIgY2FudmFzID0gX3RoaXMyLmNhbnZhcztcbiAgICAgICAgICB2YXIgdXJscyA9IHt9O1xuXG4gICAgICAgICAgaWYgKGNhbnZhcy5oYXNBdHRyaWJ1dGUoJ2RhdGEtdmVydGV4LXVybCcpKSB7XG4gICAgICAgICAgICB1cmxzLnZlcnRleCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmVydGV4LXVybCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjYW52YXMuaGFzQXR0cmlidXRlKCdkYXRhLWZyYWdtZW50LXVybCcpKSB7XG4gICAgICAgICAgICB1cmxzLmZyYWdtZW50ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnZGF0YS1mcmFnbWVudC11cmwnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2FudmFzLmhhc0F0dHJpYnV0ZSgnZGF0YS12ZXJ0ZXgnKSkge1xuICAgICAgICAgICAgX3RoaXMyLnZlcnRleFN0cmluZyA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmVydGV4Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNhbnZhcy5oYXNBdHRyaWJ1dGUoJ2RhdGEtZnJhZ21lbnQnKSkge1xuICAgICAgICAgICAgX3RoaXMyLmZyYWdtZW50U3RyaW5nID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnZGF0YS1mcmFnbWVudCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh1cmxzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKHVybHMpLm1hcChmdW5jdGlvbiAoa2V5LCBpKSB7XG4gICAgICAgICAgICAgIHZhciB1cmwgPSB1cmxzW2tleV07XG4gICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5kZWZhdWx0LmZldGNoKHVybCkgLy8gLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3ZlcnRleCcpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIudmVydGV4U3RyaW5nID0gYm9keTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5mcmFnbWVudFN0cmluZyA9IGJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKS50aGVuKGZ1bmN0aW9uIChzaGFkZXJzKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoW190aGlzMi52ZXJ0ZXhTdHJpbmcsIF90aGlzMi5mcmFnbWVudFN0cmluZ10pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoW190aGlzMi52ZXJ0ZXhTdHJpbmcsIF90aGlzMi5mcmFnbWVudFN0cmluZ10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgLypcbiAgICAgICAgY29uc3QgcmVzaXplID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcigncmVzaXplJywgZSk7XG4gICAgICAgIH07XG4gICAgICAgICovXG4gICAgICAgIHZhciBzY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwoZSkge1xuICAgICAgICAgIF90aGlzMy5yZWN0ID0gX3RoaXMzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2xpY2sgPSBmdW5jdGlvbiBjbGljayhlKSB7XG4gICAgICAgICAgX3RoaXMzLnRvZ2dsZSgpO1xuXG4gICAgICAgICAgX3RoaXMzLnRyaWdnZXIoJ2NsaWNrJywgZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1vdmUgPSBmdW5jdGlvbiBtb3ZlKG14LCBteSkge1xuICAgICAgICAgIHZhciByZWN0ID0gX3RoaXMzLnJlY3QsXG4gICAgICAgICAgICAgIGdhcCA9IDIwO1xuICAgICAgICAgIHZhciB4ID0gTWF0aC5tYXgoLWdhcCwgTWF0aC5taW4ocmVjdC53aWR0aCArIGdhcCwgKG14IC0gcmVjdC5sZWZ0KSAqIF90aGlzMy5kZXZpY2VQaXhlbFJhdGlvKSk7XG4gICAgICAgICAgdmFyIHkgPSBNYXRoLm1heCgtZ2FwLCBNYXRoLm1pbihyZWN0LmhlaWdodCArIGdhcCwgX3RoaXMzLmNhbnZhcy5oZWlnaHQgLSAobXkgLSByZWN0LnRvcCkgKiBfdGhpczMuZGV2aWNlUGl4ZWxSYXRpbykpO1xuXG4gICAgICAgICAgaWYgKHggIT09IF90aGlzMy5tb3VzZS54IHx8IHkgIT09IF90aGlzMy5tb3VzZS55KSB7XG4gICAgICAgICAgICBfdGhpczMubW91c2UueCA9IHg7XG4gICAgICAgICAgICBfdGhpczMubW91c2UueSA9IHk7XG5cbiAgICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCdtb3ZlJywgX3RoaXMzLm1vdXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1vdXNlbW92ZSA9IGZ1bmN0aW9uIG1vdXNlbW92ZShlKSB7XG4gICAgICAgICAgbW92ZShlLmNsaWVudFggfHwgZS5wYWdlWCwgZS5jbGllbnRZIHx8IGUucGFnZVkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBtb3VzZW92ZXIgPSBmdW5jdGlvbiBtb3VzZW92ZXIoZSkge1xuICAgICAgICAgIF90aGlzMy5wbGF5KCk7XG5cbiAgICAgICAgICBfdGhpczMudHJpZ2dlcignb3ZlcicsIGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBtb3VzZW91dCA9IGZ1bmN0aW9uIG1vdXNlb3V0KGUpIHtcbiAgICAgICAgICBfdGhpczMucGF1c2UoKTtcblxuICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCdvdXQnLCBlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdG91Y2htb3ZlID0gZnVuY3Rpb24gdG91Y2htb3ZlKGUpIHtcbiAgICAgICAgICB2YXIgdG91Y2ggPSBbXS5zbGljZS5jYWxsKGUudG91Y2hlcykucmVkdWNlKGZ1bmN0aW9uIChwLCB0b3VjaCkge1xuICAgICAgICAgICAgcCA9IHAgfHwge1xuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcC54ICs9IHRvdWNoLmNsaWVudFg7XG4gICAgICAgICAgICBwLnkgKz0gdG91Y2guY2xpZW50WTtcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgIH0sIG51bGwpO1xuXG4gICAgICAgICAgaWYgKHRvdWNoKSB7XG4gICAgICAgICAgICBtb3ZlKHRvdWNoLnggLyBlLnRvdWNoZXMubGVuZ3RoLCB0b3VjaC55IC8gZS50b3VjaGVzLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0b3VjaGVuZCA9IGZ1bmN0aW9uIHRvdWNoZW5kKGUpIHtcbiAgICAgICAgICBfdGhpczMucGF1c2UoKTtcblxuICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCdvdXQnLCBlKTtcblxuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdG91Y2hlbmQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0b3VjaHN0YXJ0ID0gZnVuY3Rpb24gdG91Y2hzdGFydChlKSB7XG4gICAgICAgICAgX3RoaXMzLnBsYXkoKTtcblxuICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCdvdmVyJywgZSk7XG5cbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoZW5kKTtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMy5jYW52YXMuaGFzQXR0cmlidXRlKCdjb250cm9scycpKSB7XG4gICAgICAgICAgICBfdGhpczMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIG1vdXNlb3Zlcik7XG5cbiAgICAgICAgICAgIF90aGlzMy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBtb3VzZW91dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICAgICAgX3RoaXMzLmNoZWNrUmVuZGVyKCk7XG5cbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubG9vcCA9IGxvb3A7IC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemUpO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGwpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2htb3ZlKTtcblxuICAgICAgICBpZiAodGhpcy5jYW52YXMuaGFzQXR0cmlidXRlKCdjb250cm9scycpKSB7XG4gICAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGljayk7XG4gICAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgbW91c2VvdmVyKTtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIG1vdXNlb3V0KTtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydCk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuY2FudmFzLmhhc0F0dHJpYnV0ZSgnZGF0YS1hdXRvcGxheScpKSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZSk7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbCk7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2Vtb3ZlKTtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaG1vdmUpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMy5jYW52YXMuaGFzQXR0cmlidXRlKCdjb250cm9scycpKSB7XG4gICAgICAgICAgICBfdGhpczMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2spO1xuXG4gICAgICAgICAgICBfdGhpczMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIG1vdXNlb3Zlcik7XG5cbiAgICAgICAgICAgIF90aGlzMy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBtb3VzZW91dCk7XG5cbiAgICAgICAgICAgIF90aGlzMy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvdWNoc3RhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoZnJhZ21lbnRTdHJpbmcsIHZlcnRleFN0cmluZykge1xuICAgICAgICBpZiAodmVydGV4U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy52ZXJ0ZXhTdHJpbmcgPSB2ZXJ0ZXhTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZ21lbnRTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLmZyYWdtZW50U3RyaW5nID0gZnJhZ21lbnRTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHZlcnRleFNoYWRlciA9IGNvbnRleHRfMS5kZWZhdWx0LmNyZWF0ZVNoYWRlcihnbCwgdGhpcy52ZXJ0ZXhTdHJpbmcsIGdsLlZFUlRFWF9TSEFERVIpO1xuICAgICAgICAgIGZyYWdtZW50U2hhZGVyID0gY29udGV4dF8xLmRlZmF1bHQuY3JlYXRlU2hhZGVyKGdsLCB0aGlzLmZyYWdtZW50U3RyaW5nLCBnbC5GUkFHTUVOVF9TSEFERVIpOyAvLyBJZiBGcmFnbWVudCBzaGFkZXIgZmFpbHMgbG9hZCBhIGVtcHR5IG9uZSB0byBzaWduIHRoZSBlcnJvclxuXG4gICAgICAgICAgaWYgKCFmcmFnbWVudFNoYWRlcikge1xuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSBjb250ZXh0XzEuZGVmYXVsdC5jcmVhdGVTaGFkZXIoZ2wsIGNvbnRleHRfMS5Db250ZXh0RGVmYXVsdEZyYWdtZW50LCBnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJywgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIENyZWF0ZSBhbmQgdXNlIHByb2dyYW1cblxuXG4gICAgICAgIHZhciBwcm9ncmFtID0gY29udGV4dF8xLmRlZmF1bHQuY3JlYXRlUHJvZ3JhbShnbCwgW3ZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXJdKTsgLy8sIFswLDFdLFsnYV90ZXhjb29yZCcsJ2FfcG9zaXRpb24nXSk7XG5cbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTsgLy8gRGVsZXRlIHNoYWRlcnNcbiAgICAgICAgLy8gZ2wuZGV0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgICAgIC8vIGdsLmRldGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG5cbiAgICAgICAgaWYgKHRoaXMudmFsaWQpIHtcbiAgICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBidWZmZXJzXzEuZGVmYXVsdC5nZXRCdWZmZXJzKGdsLCB0aGlzLmZyYWdtZW50U3RyaW5nLCB0aGlzLnZlcnRleFN0cmluZyk7XG4gICAgICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXJzID0gY29udGV4dF8xLmRlZmF1bHQuY3JlYXRlVmVydGV4QnVmZmVycyhnbCwgcHJvZ3JhbSk7XG4gICAgICAgICAgdGhpcy5jcmVhdGVVbmlmb3JtcygpO1xuICAgICAgICB9IC8vIFRyaWdnZXIgZXZlbnRcblxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignbG9hZCcsIHRoaXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0ZXN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdGVzdChmcmFnbWVudFN0cmluZywgdmVydGV4U3RyaW5nKSB7XG4gICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgdmFyIHZlcnRleCA9IF90aGlzNC52ZXJ0ZXhTdHJpbmc7XG4gICAgICAgICAgdmFyIGZyYWdtZW50ID0gX3RoaXM0LmZyYWdtZW50U3RyaW5nO1xuICAgICAgICAgIHZhciBwYXVzZWQgPSBfdGhpczQudGltZXIucGF1c2VkOyAvLyBUaGFua3MgdG8gQHRoZXNwaXRlIGZvciB0aGUgaGVscCBoZXJlXG4gICAgICAgICAgLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9FWFRfZGlzam9pbnRfdGltZXJfcXVlcnkvXG5cbiAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gX3RoaXM0LmdsLmdldEV4dGVuc2lvbignRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5Jyk7XG5cbiAgICAgICAgICB2YXIgcXVlcnkgPSBleHRlbnNpb24uY3JlYXRlUXVlcnlFWFQoKTtcbiAgICAgICAgICB2YXIgd2FzVmFsaWQgPSBfdGhpczQudmFsaWQ7XG5cbiAgICAgICAgICBpZiAoZnJhZ21lbnRTdHJpbmcgfHwgdmVydGV4U3RyaW5nKSB7XG4gICAgICAgICAgICBfdGhpczQubG9hZChmcmFnbWVudFN0cmluZywgdmVydGV4U3RyaW5nKTtcblxuICAgICAgICAgICAgd2FzVmFsaWQgPSBfdGhpczQudmFsaWQ7XG5cbiAgICAgICAgICAgIF90aGlzNC5yZW5kZXIoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczQudGltZXIucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICBleHRlbnNpb24uYmVnaW5RdWVyeUVYVChleHRlbnNpb24uVElNRV9FTEFQU0VEX0VYVCwgcXVlcnkpO1xuXG4gICAgICAgICAgX3RoaXM0LnJlbmRlcigpO1xuXG4gICAgICAgICAgZXh0ZW5zaW9uLmVuZFF1ZXJ5RVhUKGV4dGVuc2lvbi5USU1FX0VMQVBTRURfRVhUKTtcblxuICAgICAgICAgIHZhciB3YWl0Rm9yVGVzdCA9IGZ1bmN0aW9uIHdhaXRGb3JUZXN0KCkge1xuICAgICAgICAgICAgX3RoaXM0LnJlbmRlcigpO1xuXG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlID0gZXh0ZW5zaW9uLmdldFF1ZXJ5T2JqZWN0RVhUKHF1ZXJ5LCBleHRlbnNpb24uUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQpO1xuXG4gICAgICAgICAgICB2YXIgZGlzam9pbnQgPSBfdGhpczQuZ2wuZ2V0UGFyYW1ldGVyKGV4dGVuc2lvbi5HUFVfRElTSk9JTlRfRVhUKTtcblxuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZSAmJiAhZGlzam9pbnQpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICB3YXNWYWxpZDogd2FzVmFsaWQsXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50U3RyaW5nIHx8IF90aGlzNC5mcmFnbWVudFN0cmluZyxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6IHZlcnRleFN0cmluZyB8fCBfdGhpczQudmVydGV4U3RyaW5nLFxuICAgICAgICAgICAgICAgIHRpbWVFbGFwc2VkTXM6IGV4dGVuc2lvbi5nZXRRdWVyeU9iamVjdEVYVChxdWVyeSwgZXh0ZW5zaW9uLlFVRVJZX1JFU1VMVF9FWFQpIC8gMTAwMDAwMC4wXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIF90aGlzNC50aW1lci5wYXVzZWQgPSBwYXVzZWQ7XG5cbiAgICAgICAgICAgICAgaWYgKGZyYWdtZW50U3RyaW5nIHx8IHZlcnRleFN0cmluZykge1xuICAgICAgICAgICAgICAgIF90aGlzNC5sb2FkKGZyYWdtZW50LCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh3YWl0Rm9yVGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHdhaXRGb3JUZXN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5idWZmZXJzLnZhbHVlcykge1xuICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnMudmFsdWVzW2tleV07XG4gICAgICAgICAgYnVmZmVyLmRlc3Ryb3koZ2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2tleSBpbiB0aGlzLnRleHR1cmVzLnZhbHVlcykge1xuICAgICAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlcy52YWx1ZXNbX2tleV07XG4gICAgICAgICAgdGV4dHVyZS5kZXN0cm95KGdsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVmZmVycyA9IG51bGw7XG4gICAgICAgIHRoaXMudGV4dHVyZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbCA9IG51bGw7XG4gICAgICAgIEdsc2xDYW52YXMuaXRlbXMuc3BsaWNlKEdsc2xDYW52YXMuaXRlbXMuaW5kZXhPZih0aGlzKSwgMSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFVuaWZvcm1BcnJheVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVuaWZvcm1BcnJheShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgX3VuaWZvcm1zXzEkZGVmYXVsdCxcbiAgICAgICAgICAgIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgICAgICAgdmFyIHVuaWZvcm0gPSAoX3VuaWZvcm1zXzEkZGVmYXVsdCA9IHVuaWZvcm1zXzEuZGVmYXVsdCkucGFyc2VVbmlmb3JtLmFwcGx5KF91bmlmb3Jtc18xJGRlZmF1bHQsIFtrZXldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzKSkpO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHVuaWZvcm0pKSB7XG4gICAgICAgICAgdW5pZm9ybS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LmxvYWRUZXh0dXJlKHgua2V5LCB4LnZhbHVlc1swXSk7XG4gICAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAodW5pZm9ybSkge1xuICAgICAgICAgIHN3aXRjaCAodW5pZm9ybS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuU2FtcGxlcjJEOlxuICAgICAgICAgICAgICB0aGlzLmxvYWRUZXh0dXJlKGtleSwgdmFsdWVzWzBdKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRoaXMudW5pZm9ybXMuc2V0KGtleSwgdW5pZm9ybSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFVuaWZvcm1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRVbmlmb3JtKGtleSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW47IF9rZXkyKyspIHtcbiAgICAgICAgICB2YWx1ZXNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRVbmlmb3JtQXJyYXkoa2V5LCB2YWx1ZXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRUZXh0dXJlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGV4dHVyZShrZXksIHVybEVsZW1lbnRPckRhdGEpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRVbmlmb3JtQXJyYXkoa2V5LCBbdXJsRWxlbWVudE9yRGF0YV0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRVbmlmb3Jtc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVuaWZvcm1zKHZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7XG4gICAgICAgICAgdGhpcy5zZXRVbmlmb3JtKGtleSwgdmFsdWVzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhdXNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkKSB7XG4gICAgICAgICAgdGhpcy50aW1lci5wYXVzZSgpO1xuICAgICAgICAgIHRoaXMuY2FudmFzLmNsYXNzTGlzdC5hZGQoJ3BhdXNlZCcpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigncGF1c2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwbGF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsaWQpIHtcbiAgICAgICAgICB0aGlzLnRpbWVyLnBsYXkoKTtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKCdwYXVzZWQnKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3BsYXknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGltZXIucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc1Zpc2libGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Zpc2libGUoKSB7XG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5yZWN0O1xuICAgICAgICByZXR1cm4gcmVjdC50b3AgKyByZWN0LmhlaWdodCA+IDAgJiYgcmVjdC50b3AgPCAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0FuaW1hdGVkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNBbmltYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFuaW1hdGVkIHx8IHRoaXMudGV4dHVyZXMuYW5pbWF0ZWQpICYmICF0aGlzLnRpbWVyLnBhdXNlZDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNEaXJ0eVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRGlydHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcnR5IHx8IHRoaXMudW5pZm9ybXMuZGlydHkgfHwgdGhpcy50ZXh0dXJlcy5kaXJ0eTtcbiAgICAgIH0gLy8gY2hlY2sgc2l6ZSBjaGFuZ2UgYXQgc3RhcnQgb2YgcmVxdWVzdEZyYW1lXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2l6ZURpZENoYW5nZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaXplRGlkQ2hhbmdlZCgpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgICAgdmFyIFcgPSBNYXRoLmNlaWwodGhpcy5jYW52YXMuY2xpZW50V2lkdGgpLFxuICAgICAgICAgICAgSCA9IE1hdGguY2VpbCh0aGlzLmNhbnZhcy5jbGllbnRIZWlnaHQpO1xuXG4gICAgICAgIGlmICh0aGlzLndpZHRoICE9PSBXIHx8IHRoaXMuaGVpZ2h0ICE9PSBIKSB7XG4gICAgICAgICAgdGhpcy53aWR0aCA9IFc7XG4gICAgICAgICAgdGhpcy5oZWlnaHQgPSBIOyAvLyBMb29rdXAgdGhlIHNpemUgdGhlIGJyb3dzZXIgaXMgZGlzcGxheWluZyB0aGUgY2FudmFzIGluIENTUyBwaXhlbHNcbiAgICAgICAgICAvLyBhbmQgY29tcHV0ZSBhIHNpemUgbmVlZGVkIHRvIG1ha2Ugb3VyIGRyYXdpbmdidWZmZXIgbWF0Y2ggaXQgaW5cbiAgICAgICAgICAvLyBkZXZpY2UgcGl4ZWxzLlxuXG4gICAgICAgICAgdmFyIEJXID0gTWF0aC5jZWlsKFcgKiB0aGlzLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICAgIHZhciBCSCA9IE1hdGguY2VpbChIICogdGhpcy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IEJXO1xuICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IEJIO1xuICAgICAgICAgIC8qXG4gICAgICAgICAgaWYgKGdsLmNhbnZhcy53aWR0aCAhPT0gQlcgfHxcbiAgICAgICAgICAgICAgZ2wuY2FudmFzLmhlaWdodCAhPT0gQkgpIHtcbiAgICAgICAgICAgICAgZ2wuY2FudmFzLndpZHRoID0gQlc7XG4gICAgICAgICAgICAgIGdsLmNhbnZhcy5oZWlnaHQgPSBCSDtcbiAgICAgICAgICAgICAgLy8gU2V0IHRoZSB2aWV3cG9ydCB0byBtYXRjaFxuICAgICAgICAgICAgICAvLyBnbC52aWV3cG9ydCgwLCAwLCBCVywgQkgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAqL1xuXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYnVmZmVycy52YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnMudmFsdWVzW2tleV07XG4gICAgICAgICAgICBidWZmZXIucmVzaXplKGdsLCBCVywgQkgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigncmVzaXplJyk7IC8vIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjaGVja1JlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUoKSAmJiAodGhpcy5zaXplRGlkQ2hhbmdlZCgpIHx8IHRoaXMuaXNBbmltYXRlZCgpIHx8IHRoaXMuaXNEaXJ0eSgpKSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgdGhpcy5jYW52YXMuY2xhc3NMaXN0LmFkZCgncGxheWluZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2FudmFzLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXlpbmcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjcmVhdGVVbmlmb3Jtc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVVuaWZvcm1zKCkge1xuICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgZnJhZ21lbnRTdHJpbmcgPSB0aGlzLmZyYWdtZW50U3RyaW5nO1xuICAgICAgICB2YXIgQlcgPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGg7XG4gICAgICAgIHZhciBCSCA9IGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQ7XG4gICAgICAgIHZhciB0aW1lciA9IHRoaXMudGltZXIgPSBuZXcgR2xzbENhbnZhc1RpbWVyKCk7XG4gICAgICAgIHZhciBoYXNEZWx0YSA9IChmcmFnbWVudFN0cmluZy5tYXRjaCgvdV9kZWx0YS9nKSB8fCBbXSkubGVuZ3RoID4gMTtcbiAgICAgICAgdmFyIGhhc1RpbWUgPSAoZnJhZ21lbnRTdHJpbmcubWF0Y2goL3VfdGltZS9nKSB8fCBbXSkubGVuZ3RoID4gMTtcbiAgICAgICAgdmFyIGhhc0RhdGUgPSAoZnJhZ21lbnRTdHJpbmcubWF0Y2goL3VfZGF0ZS9nKSB8fCBbXSkubGVuZ3RoID4gMTtcbiAgICAgICAgdmFyIGhhc01vdXNlID0gKGZyYWdtZW50U3RyaW5nLm1hdGNoKC91X21vdXNlL2cpIHx8IFtdKS5sZW5ndGggPiAxO1xuICAgICAgICB2YXIgaGFzVGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoZnJhZ21lbnRTdHJpbmcpO1xuICAgICAgICB0aGlzLmFuaW1hdGVkID0gaGFzVGltZSB8fCBoYXNEYXRlIHx8IGhhc01vdXNlO1xuXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgdGhpcy5jYW52YXMuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51bmlmb3Jtcy5jcmVhdGUodW5pZm9ybXNfMS5Vbmlmb3JtTWV0aG9kLlVuaWZvcm0yZiwgdW5pZm9ybXNfMS5Vbmlmb3JtVHlwZS5GbG9hdFZlYzIsICd1X3Jlc29sdXRpb24nLCBCVywgQkgpO1xuXG4gICAgICAgIGlmIChoYXNEZWx0YSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuY3JlYXRlKHVuaWZvcm1zXzEuVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWYsIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuRmxvYXQsICd1X2RlbHRhJywgdGltZXIuZGVsdGEgLyAxMDAwLjApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1RpbWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLmNyZWF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTFmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0LCAndV90aW1lJywgdGltZXIuY3VycmVudCAvIDEwMDAuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzRGF0ZSkge1xuICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLmNyZWF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTRmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0LCAndV9kYXRlJywgZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCkgKiAzNjAwICsgZGF0ZS5nZXRNaW51dGVzKCkgKiA2MCArIGRhdGUuZ2V0U2Vjb25kcygpICsgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAqIDAuMDAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNNb3VzZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuY3JlYXRlKHVuaWZvcm1zXzEuVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMmYsIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuRmxvYXRWZWMyLCAndV9tb3VzZScsIDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYnVmZmVycy52YWx1ZXMpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXJzLnZhbHVlc1trZXldO1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuY3JlYXRlKHVuaWZvcm1zXzEuVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWksIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuU2FtcGxlcjJELCBidWZmZXIua2V5LCBidWZmZXIuaW5wdXQuaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1RleHR1cmVzKSB7XG4gICAgICAgICAgdGhpcy50ZXh0dXJlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBfdGhpczYubG9hZFRleHR1cmUoeC5rZXksIHgudXJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnRleHR1cmVMaXN0ID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFyc2VUZXh0dXJlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dHVyZXMoZnJhZ21lbnRTdHJpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJlZ2V4cCA9IC91bmlmb3JtXFxzKnNhbXBsZXIyRFxccyooW1xcd10qKTsoXFxzKlxcL1xcL1xccyooW1xcd3xcXDpcXC9cXC98XFwufFxcLXxcXF9dKil8XFxzKikvZ207XG4gICAgICAgIHZhciBtYXRjaGVzO1xuXG4gICAgICAgIHdoaWxlICgobWF0Y2hlcyA9IHJlZ2V4cC5leGVjKGZyYWdtZW50U3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIga2V5ID0gbWF0Y2hlc1sxXTtcblxuICAgICAgICAgIGlmIChtYXRjaGVzWzNdKSB7XG4gICAgICAgICAgICB2YXIgZXh0ID0gbWF0Y2hlc1szXS5zcGxpdCgnLicpLnBvcCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gbWF0Y2hlc1szXTtcblxuICAgICAgICAgICAgaWYgKHVybCAmJiB0ZXh0dXJlc18xLlRleHR1cmVFeHRlbnNpb25zLmluZGV4T2YoZXh0KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmJ1ZmZlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBlbXB0eSB0ZXh0dXJlXG4gICAgICAgICAgICB0aGlzLnRleHR1cmVMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgdXJsOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYW52YXMuaGFzQXR0cmlidXRlKCdkYXRhLXRleHR1cmVzJykpIHtcbiAgICAgICAgICB2YXIgdXJscyA9IHRoaXMuY2FudmFzLmdldEF0dHJpYnV0ZSgnZGF0YS10ZXh0dXJlcycpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgdXJscy5mb3JFYWNoKGZ1bmN0aW9uICh1cmwsIGkpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSAndV90ZXgnICsgaTtcblxuICAgICAgICAgICAgX3RoaXM3LnRleHR1cmVMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZUxpc3QubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZFRleHR1cmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkVGV4dHVyZShrZXksIHVybEVsZW1lbnRPckRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLnZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZXMuY3JlYXRlT3JVcGRhdGUodGhpcy5nbCwga2V5LCB1cmxFbGVtZW50T3JEYXRhLCB0aGlzLmJ1ZmZlcnMuY291bnQsIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHRleHR1cmUpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRleHR1cmUuaW5kZXg7XG5cbiAgICAgICAgICAgIHZhciB1bmlmb3JtID0gX3RoaXM4LnVuaWZvcm1zLmNyZWF0ZVRleHR1cmUoa2V5LCBpbmRleCk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgICAgICB2YXIga2V5UmVzb2x1dGlvbiA9IGtleS5pbmRleE9mKCdbJykgIT09IC0xID8ga2V5LnJlcGxhY2UoJ1snLCAnUmVzb2x1dGlvblsnKSA6IGtleSArICdSZXNvbHV0aW9uJztcblxuICAgICAgICAgICAgdmFyIHVuaWZvcm1SZXNvbHV0aW9uID0gX3RoaXM4LnVuaWZvcm1zLmNyZWF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTJmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0VmVjMiwga2V5UmVzb2x1dGlvbiwgdGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQpOyAvLyBjb25zb2xlLmxvZygnbG9hZFRleHR1cmUnLCBrZXksIHVybCwgaW5kZXgsIHRleHR1cmUud2lkdGgsIHRleHR1cmUuaGVpZ2h0KTtcblxuXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRleHR1cmVMaXN0LnB1c2goe1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICB1cmw6IHVybEVsZW1lbnRPckRhdGFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVVbmlmb3Jtc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVVuaWZvcm1zKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICB2YXIgQlcgPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGg7XG4gICAgICAgIHZhciBCSCA9IGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQ7XG4gICAgICAgIHZhciB0aW1lciA9IHRoaXMudGltZXIubmV4dCgpO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnVwZGF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTJmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0VmVjMiwgJ3VfcmVzb2x1dGlvbicsIEJXLCBCSCk7XG5cbiAgICAgICAgaWYgKHRoaXMudW5pZm9ybXMuaGFzKCd1X2RlbHRhJykpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnVwZGF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTFmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0LCAndV9kZWx0YScsIHRpbWVyLmRlbHRhIC8gMTAwMC4wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVuaWZvcm1zLmhhcygndV90aW1lJykpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnVwZGF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTFmLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLkZsb2F0LCAndV90aW1lJywgdGltZXIuY3VycmVudCAvIDEwMDAuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51bmlmb3Jtcy5oYXMoJ3VfZGF0ZScpKSB7XG4gICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMudXBkYXRlKHVuaWZvcm1zXzEuVW5pZm9ybU1ldGhvZC5Vbmlmb3JtNGYsIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuRmxvYXQsICd1X2RhdGUnLCBkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSAqIDM2MDAgKyBkYXRlLmdldE1pbnV0ZXMoKSAqIDYwICsgZGF0ZS5nZXRTZWNvbmRzKCkgKyBkYXRlLmdldE1pbGxpc2Vjb25kcygpICogMC4wMDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudW5pZm9ybXMuaGFzKCd1X21vdXNlJykpIHtcbiAgICAgICAgICB2YXIgbW91c2UgPSB0aGlzLm1vdXNlO1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMudXBkYXRlKHVuaWZvcm1zXzEuVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMmYsIHVuaWZvcm1zXzEuVW5pZm9ybVR5cGUuRmxvYXRWZWMyLCAndV9tb3VzZScsIG1vdXNlLngsIG1vdXNlLnkpO1xuICAgICAgICAgIC8qXG4gICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMucmVjdDtcbiAgICAgICAgICBpZiAobW91c2UueCA+PSByZWN0LmxlZnQgJiYgbW91c2UueCA8PSByZWN0LnJpZ2h0ICYmXG4gICAgICAgICAgICAgIG1vdXNlLnkgPj0gcmVjdC50b3AgJiYgbW91c2UueSA8PSByZWN0LmJvdHRvbSkge1xuICAgICAgICAgICAgICBjb25zdCBNWCA9IChtb3VzZS54IC0gcmVjdC5sZWZ0KSAqIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgICAgY29uc3QgTVkgPSAodGhpcy5jYW52YXMuaGVpZ2h0IC0gKG1vdXNlLnkgLSByZWN0LnRvcCkgKiB0aGlzLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICB0aGlzLnVuaWZvcm1zLnVwZGF0ZShVbmlmb3JtTWV0aG9kLlVuaWZvcm0yZiwgVW5pZm9ybVR5cGUuRmxvYXRWZWMyLCAndV9tb3VzZScsIE1YLCBNWSk7XG4gICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5idWZmZXJzLnZhbHVlcykge1xuICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnMudmFsdWVzW2tleV07XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy51cGRhdGUodW5pZm9ybXNfMS5Vbmlmb3JtTWV0aG9kLlVuaWZvcm0xaSwgdW5pZm9ybXNfMS5Vbmlmb3JtVHlwZS5TYW1wbGVyMkQsIGJ1ZmZlci5rZXksIGJ1ZmZlci5pbnB1dC5pbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfa2V5MyBpbiB0aGlzLnRleHR1cmVzLnZhbHVlcykge1xuICAgICAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlcy52YWx1ZXNbX2tleTNdO1xuICAgICAgICAgIHRleHR1cmUudHJ5VXBkYXRlKGdsKTtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnVwZGF0ZSh1bmlmb3Jtc18xLlVuaWZvcm1NZXRob2QuVW5pZm9ybTFpLCB1bmlmb3Jtc18xLlVuaWZvcm1UeXBlLlNhbXBsZXIyRCwgdGV4dHVyZS5rZXksIHRleHR1cmUuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgICAgdmFyIEJXID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoO1xuICAgICAgICB2YXIgQkggPSBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0O1xuICAgICAgICB0aGlzLnVwZGF0ZVVuaWZvcm1zKCk7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYnVmZmVycy52YWx1ZXMpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXJzLnZhbHVlc1trZXldO1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuYXBwbHkoZ2wsIGJ1ZmZlci5wcm9ncmFtKTtcbiAgICAgICAgICBidWZmZXIucmVuZGVyKGdsLCBCVywgQkgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmFwcGx5KGdsLCB0aGlzLnByb2dyYW0pO1xuICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBCVywgQkgpO1xuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgNik7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY2xlYW4oKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlcy5jbGVhbigpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVuZGVyJywgdGhpcyk7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwidmVyc2lvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiAnMC4yLjAnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvZlwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9mKGNhbnZhcykge1xuICAgICAgICByZXR1cm4gR2xzbENhbnZhcy5pdGVtcy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHguY2FudmFzID09PSBjYW52YXM7XG4gICAgICAgIH0pIHx8IG5ldyBHbHNsQ2FudmFzKGNhbnZhcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxvYWRBbGxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkQWxsKCkge1xuICAgICAgICB2YXIgY2FudmFzZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2dsc2wtY2FudmFzJykpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2FudmFzZXMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIEdsc2xDYW52YXMub2YoeCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBHbHNsQ2FudmFzO1xuICB9KHN1YnNjcmliZXJfMS5kZWZhdWx0KTtcblxuICBHbHNsQ2FudmFzLml0ZW1zID0gW107XG4gIGV4cG9ydHMuZGVmYXVsdCA9IEdsc2xDYW52YXM7XG4gIHdpbmRvdy5HbHNsQ2FudmFzID0gR2xzbENhbnZhcztcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgR2xzbENhbnZhcy5sb2FkQWxsKTtcbn0pO1xuXG59LHtcIi4vYnVmZmVyc1wiOjQsXCIuL2NvbW1vblwiOjUsXCIuL2NvbnRleHRcIjo2LFwiLi9zdWJzY3JpYmVyXCI6OSxcIi4vdGV4dHVyZXNcIjoxMCxcIi4vdW5pZm9ybXNcIjoxMSxcInByb21pc2UtcG9seWZpbGxcIjoyfV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKCh0eXBlb2YgbW9kdWxlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobW9kdWxlKSkgPT09IFwib2JqZWN0XCIgJiYgX3R5cGVvZihtb2R1bGUuZXhwb3J0cykgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgdiA9IGZhY3RvcnkocmVxdWlyZSwgZXhwb3J0cyk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgbW9kdWxlLmV4cG9ydHMgPSB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCJdLCBmYWN0b3J5KTtcbiAgfVxufSkoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIE51bWJlck1hcCA9IGZ1bmN0aW9uIE51bWJlck1hcCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVtYmVyTWFwKTtcbiAgfTtcblxuICBleHBvcnRzLk51bWJlck1hcCA9IE51bWJlck1hcDtcbiAgO1xuXG4gIHZhciBTdHJpbmdNYXAgPSBmdW5jdGlvbiBTdHJpbmdNYXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmluZ01hcCk7XG4gIH07XG5cbiAgZXhwb3J0cy5TdHJpbmdNYXAgPSBTdHJpbmdNYXA7XG4gIDtcblxuICB2YXIgSXRlcmFibGVTdHJpbmdNYXAgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJdGVyYWJsZVN0cmluZ01hcCgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJdGVyYWJsZVN0cmluZ01hcCk7XG5cbiAgICAgIHRoaXMudmFsdWVzID0gbmV3IFN0cmluZ01hcCgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJdGVyYWJsZVN0cmluZ01hcCwgW3tcbiAgICAgIGtleTogXCJoYXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoa2V5LCBpdGVtKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW2tleV0gPSBpdGVtO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1trZXldO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JFYWNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuKSB7XG4gICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy52YWx1ZXMpIHtcbiAgICAgICAgICBjYWxsYmFja2ZuKHRoaXMudmFsdWVzW2tleV0sIGksIHRoaXMudmFsdWVzKTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVkdWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4sIGluaXRpYWxWYWx1ZSkge1xuICAgICAgICB2YXIgcHJldmlvdXMgPSBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICBpID0gMDtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy52YWx1ZXMpIHtcbiAgICAgICAgICBwcmV2aW91cyA9IGNhbGxiYWNrZm4ocHJldmlvdXMsIHRoaXMudmFsdWVzW2tleV0sIGksIHRoaXMudmFsdWVzKTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEl0ZXJhYmxlU3RyaW5nTWFwO1xuICB9KCk7XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gSXRlcmFibGVTdHJpbmdNYXA7XG59KTtcblxufSx7fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKCh0eXBlb2YgbW9kdWxlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobW9kdWxlKSkgPT09IFwib2JqZWN0XCIgJiYgX3R5cGVvZihtb2R1bGUuZXhwb3J0cykgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgdiA9IGZhY3RvcnkocmVxdWlyZSwgZXhwb3J0cyk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgbW9kdWxlLmV4cG9ydHMgPSB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCJdLCBmYWN0b3J5KTtcbiAgfVxufSkoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIExpc3RlbmVyID0gZnVuY3Rpb24gTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RlbmVyKTtcblxuICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH07XG5cbiAgZXhwb3J0cy5MaXN0ZW5lciA9IExpc3RlbmVyO1xuXG4gIHZhciBTdWJzY3JpYmVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpYmVyKTtcblxuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFN1YnNjcmliZXIsIFt7XG4gICAgICBrZXk6IFwibG9nTGlzdGVuZXJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbG9nTGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3Vic2NyaWJlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInVuc3Vic2NyaWJlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidW5zdWJzY3JpYmVBbGxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN1YnNjcmliZUFsbCgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuYWRkKG5ldyBMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9mZlwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUobmV3IExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGlmICh4LmV2ZW50ID09PSBldmVudCkge1xuICAgICAgICAgICAgICBfdGhpcy5saXN0ZW5lcnMuZGVsZXRlKHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRyaWdnZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkYXRhID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBkYXRhW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICBpZiAoeC5ldmVudCA9PT0gZXZlbnQgJiYgdHlwZW9mIHguY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHguY2FsbGJhY2suYXBwbHkoeCwgZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG4gIH0oKTtcblxuICBleHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpYmVyO1xufSk7XG5cbn0se31dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIF9faW1wb3J0RGVmYXVsdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkge1xuICByZXR1cm4gbW9kICYmIG1vZC5fX2VzTW9kdWxlID8gbW9kIDoge1xuICAgIFwiZGVmYXVsdFwiOiBtb2RcbiAgfTtcbn07XG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBpZiAoKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKG1vZHVsZS5leHBvcnRzKSA9PT0gXCJvYmplY3RcIikge1xuICAgIHZhciB2ID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzKTtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSBtb2R1bGUuZXhwb3J0cyA9IHY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIiwgXCIuL2l0ZXJhYmxlXCIsIFwiLi9zdWJzY3JpYmVyXCJdLCBmYWN0b3J5KTtcbiAgfVxufSkoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7IC8vIGltcG9ydCAncHJvbWlzZS1wb2x5ZmlsbCc7XG5cbiAgdmFyIGl0ZXJhYmxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaXRlcmFibGVcIikpO1xuXG4gIHZhciBzdWJzY3JpYmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3Vic2NyaWJlclwiKSk7XG5cbiAgZXhwb3J0cy5UZXh0dXJlSW1hZ2VFeHRlbnNpb25zID0gWydqcGcnLCAnanBlZycsICdwbmcnXTtcbiAgZXhwb3J0cy5UZXh0dXJlVmlkZW9FeHRlbnNpb25zID0gWydvZ3YnLCAnd2VibScsICdtcDQnXTtcbiAgZXhwb3J0cy5UZXh0dXJlRXh0ZW5zaW9ucyA9IGV4cG9ydHMuVGV4dHVyZUltYWdlRXh0ZW5zaW9ucy5jb25jYXQoZXhwb3J0cy5UZXh0dXJlVmlkZW9FeHRlbnNpb25zKTtcbiAgdmFyIFRleHR1cmVTb3VyY2VUeXBlO1xuXG4gIChmdW5jdGlvbiAoVGV4dHVyZVNvdXJjZVR5cGUpIHtcbiAgICBUZXh0dXJlU291cmNlVHlwZVtUZXh0dXJlU291cmNlVHlwZVtcIkRhdGFcIl0gPSAwXSA9IFwiRGF0YVwiO1xuICAgIFRleHR1cmVTb3VyY2VUeXBlW1RleHR1cmVTb3VyY2VUeXBlW1wiRWxlbWVudFwiXSA9IDFdID0gXCJFbGVtZW50XCI7XG4gICAgVGV4dHVyZVNvdXJjZVR5cGVbVGV4dHVyZVNvdXJjZVR5cGVbXCJVcmxcIl0gPSAyXSA9IFwiVXJsXCI7XG4gIH0pKFRleHR1cmVTb3VyY2VUeXBlIHx8IChUZXh0dXJlU291cmNlVHlwZSA9IHt9KSk7XG5cbiAgdmFyIFRleHR1cmVGaWx0ZXJpbmdUeXBlO1xuXG4gIChmdW5jdGlvbiAoVGV4dHVyZUZpbHRlcmluZ1R5cGUpIHtcbiAgICBUZXh0dXJlRmlsdGVyaW5nVHlwZVtcIk1pcE1hcFwiXSA9IFwibWlwbWFwXCI7XG4gICAgVGV4dHVyZUZpbHRlcmluZ1R5cGVbXCJMaW5lYXJcIl0gPSBcImxpbmVhclwiO1xuICAgIFRleHR1cmVGaWx0ZXJpbmdUeXBlW1wiTmVhcmVzdFwiXSA9IFwibmVhcmVzdFwiO1xuICB9KShUZXh0dXJlRmlsdGVyaW5nVHlwZSB8fCAoVGV4dHVyZUZpbHRlcmluZ1R5cGUgPSB7fSkpO1xuXG4gIHZhciBUZXh0dXJlRGF0YSA9IGZ1bmN0aW9uIFRleHR1cmVEYXRhKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0dXJlRGF0YSk7XG4gIH07XG5cbiAgZXhwb3J0cy5UZXh0dXJlRGF0YSA9IFRleHR1cmVEYXRhO1xuXG4gIHZhciBUZXh0dXJlT3B0aW9ucyA9IGZ1bmN0aW9uIFRleHR1cmVPcHRpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0dXJlT3B0aW9ucyk7XG4gIH07XG5cbiAgZXhwb3J0cy5UZXh0dXJlT3B0aW9ucyA9IFRleHR1cmVPcHRpb25zOyAvLyBHTCB0ZXh0dXJlIHdyYXBwZXIgb2JqZWN0IGZvciBrZWVwaW5nIHRyYWNrIG9mIGEgZ2xvYmFsIHNldCBvZiB0ZXh0dXJlcywga2V5ZWQgYnkgYSB1bmlxdWUgdXNlci1kZWZpbmVkIG5hbWVcblxuICB2YXIgVGV4dHVyZSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9zdWJzY3JpYmVyXzEkZGVmYXVsdCkge1xuICAgIF9pbmhlcml0cyhUZXh0dXJlLCBfc3Vic2NyaWJlcl8xJGRlZmF1bHQpO1xuXG4gICAgZnVuY3Rpb24gVGV4dHVyZShnbCwga2V5LCBpbmRleCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbmV3IFRleHR1cmVPcHRpb25zKCk7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0dXJlKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGV4dHVyZSkuY2FsbCh0aGlzKSk7XG4gICAgICBfdGhpcy52YWxpZCA9IGZhbHNlO1xuICAgICAgX3RoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgIF90aGlzLmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICBfdGhpcy5wb3dlck9mMiA9IGZhbHNlO1xuICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgX3RoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICBfdGhpcy5jcmVhdGUoZ2wpO1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRleHR1cmUsIFt7XG4gICAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGdsKSB7XG4gICAgICAgIHRoaXMudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgICBpZiAodGhpcy50ZXh0dXJlKSB7XG4gICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgIH0gLy8gRGVmYXVsdCB0byBhIDEtcGl4ZWwgYmxhY2sgdGV4dHVyZSBzbyB3ZSBjYW4gc2FmZWx5IHJlbmRlciB3aGlsZSB3ZSB3YWl0IGZvciBhbiBpbWFnZSB0byBsb2FkXG4gICAgICAgIC8vIFNlZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTcyMjI0Ny93ZWJnbC13YWl0LWZvci10ZXh0dXJlLXRvLWxvYWRcbiAgICAgICAgLy8gWzI1NSwgMjU1LCAyNTUsIDI1NV1cblxuXG4gICAgICAgIHRoaXMuc2V0RGF0YShnbCwgMSwgMSwgbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDBdKSwge1xuICAgICAgICAgIGZpbHRlcmluZzogVGV4dHVyZUZpbHRlcmluZ1R5cGUuTGluZWFyXG4gICAgICAgIH0pOyAvLyB0aGlzLmJpbmRUZXh0dXJlKCk7XG4gICAgICAgIC8vIHRoaXMubG9hZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoZ2wpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy51cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHRoaXMudXJsID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy51cmwgIT09IHRoaXMudXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRVcmwoZ2wsIG9wdGlvbnMudXJsLCBvcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RWxlbWVudChnbCwgb3B0aW9ucy5lbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNldERhdGEoZ2wsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0LCBvcHRpb25zLmRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFVybFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVybChnbCwgdXJsKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgICBpZiAoIXRoaXMudmFsaWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVybCA9IHVybDsgLy8gc2F2ZSBVUkwgcmVmZXJlbmNlICh3aWxsIGJlIG92ZXJ3cml0dGVuIHdoZW4gZWxlbWVudCBpcyBsb2FkZWQgYmVsb3cpXG5cbiAgICAgICAgdGhpcy5zb3VyY2UgPSB1cmw7XG4gICAgICAgIHRoaXMuc291cmNlVHlwZSA9IFRleHR1cmVTb3VyY2VUeXBlLlVybDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgZXh0ID0gdXJsLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGlzVmlkZW8gPSBleHBvcnRzLlRleHR1cmVWaWRlb0V4dGVuc2lvbnMuaW5kZXhPZihleHQpICE9PSAtMTtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIHZhciBwcm9taXNlO1xuXG4gICAgICAgIGlmIChpc1ZpZGVvKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7IC8vIG9wdGlvbnMuZmlsdGVyaW5nID0gVGV4dHVyZUZpbHRlcmluZ1R5cGUuTmVhcmVzdDtcblxuICAgICAgICAgIHByb21pc2UgPSB0aGlzLnNldEVsZW1lbnQoZ2wsIGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICd0cnVlJyk7XG4gICAgICAgICAgZWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5zcmMgPSB1cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudCA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgIHByb21pc2UgPSB0aGlzLnNldEVsZW1lbnQoZ2wsIGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgaWYgKCEoVGV4dHVyZS5pc1NhZmFyaSgpICYmIHVybC5zbGljZSgwLCA1KSA9PT0gJ2RhdGE6JykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50LnNyYyA9IHVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRFbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RWxlbWVudChnbCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWxFbGVtZW50ID0gZWxlbWVudDsgLy8gYSBzdHJpbmcgZWxlbWVudCBpcyBpbnRlcnBldGVkIGFzIGEgQ1NTIHNlbGVjdG9yXG5cbiAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICBfdGhpczIuc291cmNlID0gZWxlbWVudDtcbiAgICAgICAgICAgIF90aGlzMi5zb3VyY2VUeXBlID0gVGV4dHVyZVNvdXJjZVR5cGUuRWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICAgIHZhciB2aWRlbyA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIudXBkYXRlKGdsLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIF90aGlzMi5zZXRGaWx0ZXJpbmcoZ2wsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpczIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzMi51cGRhdGUoZ2wsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMyLnNldEZpbHRlcmluZyhnbCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzMik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczIudXBkYXRlKGdsLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgICBfdGhpczIuc2V0RmlsdGVyaW5nKGdsLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgICByZXNvbHZlKF90aGlzMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJ0aGUgJ2VsZW1lbnQnIHBhcmFtZXRlciAoYGVsZW1lbnQ6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShvcmlnaW5hbEVsZW1lbnQpLCBcImApIG11c3QgYmUgYSBDU1Mgc2VsZWN0b3Igc3RyaW5nLCBvciBhIDxjYW52YXM+LCA8aW1hZ2U+IG9yIDx2aWRlbz4gb2JqZWN0XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUZXh0dXJlICdcIi5jb25jYXQoX3RoaXMyLmtleSwgXCInOiBcIikuY29uY2F0KG1lc3NhZ2UpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJlamVjdChtZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXREYXRhXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGF0YShnbCwgd2lkdGgsIGhlaWdodCwgZGF0YSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBkYXRhO1xuICAgICAgICB0aGlzLnNvdXJjZVR5cGUgPSBUZXh0dXJlU291cmNlVHlwZS5EYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZShnbCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2V0RmlsdGVyaW5nKGdsLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICAgIH0gLy8gVXBsb2FkcyBjdXJyZW50IGltYWdlIG9yIGJ1ZmZlciB0byB0aGUgR1BVIChjYW4gYmUgdXNlZCB0byB1cGRhdGUgYW5pbWF0ZWQgdGV4dHVyZXMgb24gdGhlIGZseSlcblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZ2wsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIHRoaXMuaW5kZXgpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBvcHRpb25zLlVOUEFDS19GTElQX1lfV0VCR0wgPT09IGZhbHNlID8gMCA6IDEpO1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIG9wdGlvbnMuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIHx8IDApO1xuXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZVR5cGUgPT09IFRleHR1cmVTb3VyY2VUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5zb3VyY2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICYmIHRoaXMuc291cmNlLm5hdHVyYWxXaWR0aCAmJiB0aGlzLnNvdXJjZS5uYXR1cmFsSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5zb3VyY2UubmF0dXJhbFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnNvdXJjZS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNvdXJjZSBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgJiYgdGhpcy5zb3VyY2UudmlkZW9XaWR0aCAmJiB0aGlzLnNvdXJjZS52aWRlb0hlaWdodCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc291cmNlLnZpZGVvV2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc291cmNlLnZpZGVvSGVpZ2h0O1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNvdXJjZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5zb3VyY2Uud2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc291cmNlLmhlaWdodDtcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdGhpcy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNvdXJjZVR5cGUgPT09IFRleHR1cmVTb3VyY2VUeXBlLkRhdGEpIHtcbiAgICAgICAgICB2YXIgaW1hZ2VCdWZmZXIgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZUJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZCcsIHRoaXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0cnlVcGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cnlVcGRhdGUoZ2wpIHtcbiAgICAgICAgdmFyIGRpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgdGhpcy51cGRhdGUoZ2wsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGlydHk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KGdsKSB7XG4gICAgICAgIGlmICghdGhpcy52YWxpZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy50ZXh0dXJlKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHRoaXMuc291cmNlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RmlsdGVyaW5nXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsdGVyaW5nKGdsLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy52YWxpZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3dlck9mMiA9IFRleHR1cmUuaXNQb3dlck9mMih0aGlzLndpZHRoKSAmJiBUZXh0dXJlLmlzUG93ZXJPZjIodGhpcy5oZWlnaHQpO1xuICAgICAgICB2YXIgZmlsdGVyaW5nID0gb3B0aW9ucy5maWx0ZXJpbmcgfHwgVGV4dHVyZUZpbHRlcmluZ1R5cGUuTWlwTWFwO1xuICAgICAgICB2YXIgd3JhcFMgPSBvcHRpb25zLlRFWFRVUkVfV1JBUF9TIHx8IG9wdGlvbnMucmVwZWF0ICYmIGdsLlJFUEVBVCB8fCBnbC5DTEFNUF9UT19FREdFO1xuICAgICAgICB2YXIgd3JhcFQgPSBvcHRpb25zLlRFWFRVUkVfV1JBUF9UIHx8IG9wdGlvbnMucmVwZWF0ICYmIGdsLlJFUEVBVCB8fCBnbC5DTEFNUF9UT19FREdFO1xuXG4gICAgICAgIGlmICghcG93ZXJPZjIpIHtcbiAgICAgICAgICBmaWx0ZXJpbmcgPSBmaWx0ZXJpbmcgPT09IFRleHR1cmVGaWx0ZXJpbmdUeXBlLk1pcE1hcCA/IFRleHR1cmVGaWx0ZXJpbmdUeXBlLkxpbmVhciA6IGZpbHRlcmluZztcbiAgICAgICAgICB3cmFwUyA9IHdyYXBUID0gZ2wuQ0xBTVBfVE9fRURHRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG93ZXJPZjIgPSBwb3dlck9mMjtcbiAgICAgICAgdGhpcy5maWx0ZXJpbmcgPSBmaWx0ZXJpbmc7IC8vIHRoaXMuYmluZFRleHR1cmUoKTtcbiAgICAgICAgLy8gV2ViR0wgaGFzIHN0cmljdCByZXF1aXJlbWVudHMgb24gbm9uLXBvd2VyLW9mLTIgdGV4dHVyZXM6XG4gICAgICAgIC8vIE5vIG1pcG1hcHMgYW5kIG11c3QgY2xhbXAgdG8gZWRnZVxuICAgICAgICAvLyBGb3IgcG93ZXItb2YtMiB0ZXh0dXJlcywgdGhlIGZvbGxvd2luZyBwcmVzZXRzIGFyZSBhdmFpbGFibGU6XG4gICAgICAgIC8vIG1pcG1hcDogbGluZWFyIGJsZW5kIGZyb20gbmVhcmVzdCBtaXBcbiAgICAgICAgLy8gbGluZWFyOiBsaW5lYXIgYmxlbmQgZnJvbSBvcmlnaW5hbCBpbWFnZSAobm8gbWlwcylcbiAgICAgICAgLy8gbmVhcmVzdDogbmVhcmVzdCBwaXhlbCBmcm9tIG9yaWdpbmFsIGltYWdlIChubyBtaXBzLCAnYmxvY2t5JyBsb29rKVxuXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBTKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgd3JhcFQpO1xuXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcmluZyA9PT0gVGV4dHVyZUZpbHRlcmluZ1R5cGUuTWlwTWFwKSB7XG4gICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSKTsgLy8gVE9ETzogdXNlIHRyaWxpbmVhciBmaWx0ZXJpbmcgYnkgZGVmdWFsdCBpbnN0ZWFkP1xuXG4gICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWx0ZXJpbmcgPT09IFRleHR1cmVGaWx0ZXJpbmdUeXBlLk5lYXJlc3QpIHtcbiAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsdGVyaW5nID09PSBUZXh0dXJlRmlsdGVyaW5nVHlwZS5MaW5lYXIpIHtcbiAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImlzUG93ZXJPZjJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Bvd2VyT2YyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiB2YWx1ZSAtIDEpID09PSAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc1NhZmFyaVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgICAgICByZXR1cm4gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNUZXh0dXJlVXJsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNUZXh0dXJlVXJsKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIC9cXC4oanBnfGpwZWd8cG5nfG9ndnx3ZWJtfG1wNCkkL2kudGVzdCh0ZXh0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNUZXh0dXJlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNUZXh0dXJlKHVybEVsZW1lbnRPckRhdGEpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBUZXh0dXJlLmdldFRleHR1cmVPcHRpb25zKHVybEVsZW1lbnRPckRhdGEpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucyAhPT0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRNYXhUZXh0dXJlU2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1heFRleHR1cmVTaXplKGdsKSB7XG4gICAgICAgIHJldHVybiBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfU0laRSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFRleHR1cmVPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGV4dHVyZU9wdGlvbnModXJsRWxlbWVudE9yRGF0YSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgaWYgKHR5cGVvZiB1cmxFbGVtZW50T3JEYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChUZXh0dXJlLmlzVGV4dHVyZVVybCh1cmxFbGVtZW50T3JEYXRhKSkge1xuICAgICAgICAgICAgb3B0aW9ucy51cmwgPSB1cmxFbGVtZW50T3JEYXRhO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICAgICAgICB1cmxFbGVtZW50T3JEYXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1cmxFbGVtZW50T3JEYXRhKTsgLy8gY29uc29sZS5sb2codXJsRWxlbWVudE9yRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybEVsZW1lbnRPckRhdGEgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCB8fCB1cmxFbGVtZW50T3JEYXRhIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCB8fCB1cmxFbGVtZW50T3JEYXRhIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCkge1xuICAgICAgICAgIG9wdGlvbnMuZWxlbWVudCA9IHVybEVsZW1lbnRPckRhdGE7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSBpZiAodXJsRWxlbWVudE9yRGF0YSBpbnN0YW5jZW9mIFRleHR1cmVEYXRhKSB7XG4gICAgICAgICAgb3B0aW9ucy5kYXRhID0gdXJsRWxlbWVudE9yRGF0YS5kYXRhO1xuICAgICAgICAgIG9wdGlvbnMud2lkdGggPSB1cmxFbGVtZW50T3JEYXRhLndpZHRoO1xuICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gdXJsRWxlbWVudE9yRGF0YS5oZWlnaHQ7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGV4dHVyZTtcbiAgfShzdWJzY3JpYmVyXzEuZGVmYXVsdCk7XG5cbiAgZXhwb3J0cy5UZXh0dXJlID0gVGV4dHVyZTtcblxuICB2YXIgVGV4dHVyZXMgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfaXRlcmFibGVfMSRkZWZhdWx0KSB7XG4gICAgX2luaGVyaXRzKFRleHR1cmVzLCBfaXRlcmFibGVfMSRkZWZhdWx0KTtcblxuICAgIGZ1bmN0aW9uIFRleHR1cmVzKCkge1xuICAgICAgdmFyIF90aGlzMztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHR1cmVzKTtcblxuICAgICAgX3RoaXMzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRleHR1cmVzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIF90aGlzMy5jb3VudCA9IDA7XG4gICAgICBfdGhpczMuZGlydHkgPSBmYWxzZTtcbiAgICAgIF90aGlzMy5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzMztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGV4dHVyZXMsIFt7XG4gICAgICBrZXk6IFwiY2xlYW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhbigpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMudmFsdWVzKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZXNba2V5XS5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjcmVhdGVPclVwZGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlKGdsLCBrZXksIHVybEVsZW1lbnRPckRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG4gICAgICAgIHZhciB0ZXh0dXJlO1xuICAgICAgICB2YXIgdGV4dHVyZU9wdGlvbnMgPSBUZXh0dXJlLmdldFRleHR1cmVPcHRpb25zKHVybEVsZW1lbnRPckRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB0ZXh0dXJlID0gdGhpcy5nZXQoa2V5KTtcblxuICAgICAgICBpZiAoIXRleHR1cmUpIHtcbiAgICAgICAgICB0ZXh0dXJlID0gbmV3IFRleHR1cmUoZ2wsIGtleSwgaW5kZXggKyB0aGlzLmNvdW50LCB0ZXh0dXJlT3B0aW9ucyk7XG4gICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICAgIHRoaXMuc2V0KGtleSwgdGV4dHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGV4dHVyZU9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0ZXh0dXJlLmxvYWQoZ2wsIHRleHR1cmVPcHRpb25zKS50aGVuKGZ1bmN0aW9uICh0ZXh0dXJlKSB7XG4gICAgICAgICAgICBpZiAodGV4dHVyZS5zb3VyY2UgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICAgIHZhciB2aWRlbyA9IHRleHR1cmUuc291cmNlOyAvLyBjb25zb2xlLmxvZygndmlkZW8nLCB2aWRlbyk7XG5cbiAgICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncGxheScsIHRleHR1cmUua2V5KTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpczQuYW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3BhdXNlJywgdGV4dHVyZS5rZXkpO1xuICAgICAgICAgICAgICAgIHRleHR1cmUuYW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpczQuYW5pbWF0ZWQgPSBfdGhpczQucmVkdWNlKGZ1bmN0aW9uIChmbGFnLCB0ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmxhZyB8fCB0ZXh0dXJlLmFuaW1hdGVkO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3NlZWtlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2Vla2VkJyk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS51cGRhdGUoZ2wsIHRleHR1cmUub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgX3RoaXM0LmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSk7IC8vIGNvbnNvbGUubG9nKCd2aWRlbycpO1xuXG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gISEhXG4gICAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsSUQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoZ2wsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgfSwgMTUpO1xuICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB2aWRlby5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRleHR1cmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRleHR1cmVzO1xuICB9KGl0ZXJhYmxlXzEuZGVmYXVsdCk7XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gVGV4dHVyZXM7XG59KTtcblxufSx7XCIuL2l0ZXJhYmxlXCI6OCxcIi4vc3Vic2NyaWJlclwiOjl9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfX2ltcG9ydERlZmF1bHQgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19pbXBvcnREZWZhdWx0IHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgcmV0dXJuIG1vZCAmJiBtb2QuX19lc01vZHVsZSA/IG1vZCA6IHtcbiAgICBcImRlZmF1bHRcIjogbW9kXG4gIH07XG59O1xuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKCh0eXBlb2YgbW9kdWxlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobW9kdWxlKSkgPT09IFwib2JqZWN0XCIgJiYgX3R5cGVvZihtb2R1bGUuZXhwb3J0cykgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgdiA9IGZhY3RvcnkocmVxdWlyZSwgZXhwb3J0cyk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgbW9kdWxlLmV4cG9ydHMgPSB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIFwiLi9pdGVyYWJsZVwiLCBcIi4vdGV4dHVyZXNcIl0sIGZhY3RvcnkpO1xuICB9XG59KShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgaXRlcmFibGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pdGVyYWJsZVwiKSk7XG5cbiAgdmFyIHRleHR1cmVzXzEgPSByZXF1aXJlKFwiLi90ZXh0dXJlc1wiKTtcblxuICB2YXIgVW5pZm9ybU1ldGhvZDtcblxuICAoZnVuY3Rpb24gKFVuaWZvcm1NZXRob2QpIHtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTFpXCJdID0gXCJ1bmlmb3JtMWlcIjsgLy8gVW5pZm9ybTFpICA9ICd1bmlmb3JtMWknLCAvLyAoYm9vbFVuaWZvcm1Mb2MsICAgdik7ICAgICAgICAgICAgICAgIC8vIGZvciBib29sXG4gICAgLy8gVW5pZm9ybTFpICA9ICd1bmlmb3JtMWknLCAvLyAoc2FtcGxlcjJEVW5pZm9ybUxvYywgICB2KTsgICAgICAgICAgIC8vIGZvciBzYW1wbGVyMkRcbiAgICAvLyBVbmlmb3JtMWkgID0gJ3VuaWZvcm0xaScsIC8vIChzYW1wbGVyQ3ViZVVuaWZvcm1Mb2MsICAgdik7ICAgICAgICAgLy8gZm9yIHNhbXBsZXJDdWJlXG5cbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTJpXCJdID0gXCJ1bmlmb3JtMmlcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTNpXCJdID0gXCJ1bmlmb3JtM2lcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTRpXCJdID0gXCJ1bmlmb3JtNGlcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTFmXCJdID0gXCJ1bmlmb3JtMWZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTJmXCJdID0gXCJ1bmlmb3JtMmZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTNmXCJdID0gXCJ1bmlmb3JtM2ZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTRmXCJdID0gXCJ1bmlmb3JtNGZcIjsgLy9cblxuICAgIFVuaWZvcm1NZXRob2RbXCJVbmlmb3JtMWl2XCJdID0gXCJ1bmlmb3JtMWl2XCI7IC8vIFVuaWZvcm0xaXYgPSAndW5pZm9ybTFpdicsIC8vIChib29sVW5pZm9ybUxvYywgW3ZdKTsgICAgICAgICAgICAgICAgLy8gZm9yIGJvb2wgb3IgYm9vbCBhcnJheVxuICAgIC8vIFVuaWZvcm0xaXYgPSAndW5pZm9ybTFpdicsIC8vIChzYW1wbGVyMkRVbmlmb3JtTG9jLCBbdl0pOyAgICAgICAgICAgLy8gZm9yIHNhbXBsZXIyRCBvciBzYW1wbGVyMkQgYXJyYXlcbiAgICAvLyBVbmlmb3JtMWl2ID0gJ3VuaWZvcm0xaXYnLCAvLyAoc2FtcGxlckN1YmVVbmlmb3JtTG9jLCBbdl0pOyAgICAgICAgIC8vIGZvciBzYW1wbGVyQ3ViZSBvciBzYW1wbGVyQ3ViZSBhcnJheVxuXG4gICAgVW5pZm9ybU1ldGhvZFtcIlVuaWZvcm0yaXZcIl0gPSBcInVuaWZvcm0yaXZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTNpdlwiXSA9IFwidW5pZm9ybTNpdlwiO1xuICAgIFVuaWZvcm1NZXRob2RbXCJVbmlmb3JtNGl2XCJdID0gXCJ1bmlmb3JtNGl2XCI7IC8vXG5cbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTFmdlwiXSA9IFwidW5pZm9ybTFmdlwiO1xuICAgIFVuaWZvcm1NZXRob2RbXCJVbmlmb3JtMmZ2XCJdID0gXCJ1bmlmb3JtMmZ2XCI7XG4gICAgVW5pZm9ybU1ldGhvZFtcIlVuaWZvcm0zZnZcIl0gPSBcInVuaWZvcm0zZnZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybTRmdlwiXSA9IFwidW5pZm9ybTRmdlwiOyAvL1xuXG4gICAgVW5pZm9ybU1ldGhvZFtcIlVuaWZvcm1NYXRyaXgyZnZcIl0gPSBcInVuaWZvcm1NYXRyaXgyZnZcIjtcbiAgICBVbmlmb3JtTWV0aG9kW1wiVW5pZm9ybU1hdHJpeDNmdlwiXSA9IFwidW5pZm9ybU1hdHJpeDNmdlwiO1xuICAgIFVuaWZvcm1NZXRob2RbXCJVbmlmb3JtTWF0cml4NGZ2XCJdID0gXCJ1bmlmb3JtTWF0cml4NGZ2XCI7XG4gIH0pKFVuaWZvcm1NZXRob2QgPSBleHBvcnRzLlVuaWZvcm1NZXRob2QgfHwgKGV4cG9ydHMuVW5pZm9ybU1ldGhvZCA9IHt9KSk7XG5cbiAgdmFyIFVuaWZvcm1UeXBlO1xuXG4gIChmdW5jdGlvbiAoVW5pZm9ybVR5cGUpIHtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkludFwiXSA9IDBdID0gXCJJbnRcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkludEFycmF5XCJdID0gMV0gPSBcIkludEFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJJbnRWZWMyXCJdID0gMl0gPSBcIkludFZlYzJcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkludFZlYzJBcnJheVwiXSA9IDNdID0gXCJJbnRWZWMyQXJyYXlcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkludFZlYzNcIl0gPSA0XSA9IFwiSW50VmVjM1wiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiSW50VmVjM0FycmF5XCJdID0gNV0gPSBcIkludFZlYzNBcnJheVwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiSW50VmVjNFwiXSA9IDZdID0gXCJJbnRWZWM0XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJJbnRWZWM0QXJyYXlcIl0gPSA3XSA9IFwiSW50VmVjNEFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJGbG9hdFwiXSA9IDhdID0gXCJGbG9hdFwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiRmxvYXRBcnJheVwiXSA9IDldID0gXCJGbG9hdEFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJGbG9hdFZlYzJcIl0gPSAxMF0gPSBcIkZsb2F0VmVjMlwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiRmxvYXRWZWMyQXJyYXlcIl0gPSAxMV0gPSBcIkZsb2F0VmVjMkFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJGbG9hdFZlYzNcIl0gPSAxMl0gPSBcIkZsb2F0VmVjM1wiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiRmxvYXRWZWMzQXJyYXlcIl0gPSAxM10gPSBcIkZsb2F0VmVjM0FycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJGbG9hdFZlYzRcIl0gPSAxNF0gPSBcIkZsb2F0VmVjNFwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiRmxvYXRWZWM0QXJyYXlcIl0gPSAxNV0gPSBcIkZsb2F0VmVjNEFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJCb29sXCJdID0gMTZdID0gXCJCb29sXCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJCb29sQXJyYXlcIl0gPSAxN10gPSBcIkJvb2xBcnJheVwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiQm9vbFZlYzJcIl0gPSAxOF0gPSBcIkJvb2xWZWMyXCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJCb29sVmVjMkFycmF5XCJdID0gMTldID0gXCJCb29sVmVjMkFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJCb29sVmVjM1wiXSA9IDIwXSA9IFwiQm9vbFZlYzNcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkJvb2xWZWMzQXJyYXlcIl0gPSAyMV0gPSBcIkJvb2xWZWMzQXJyYXlcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIkJvb2xWZWM0XCJdID0gMjJdID0gXCJCb29sVmVjNFwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiQm9vbFZlYzRBcnJheVwiXSA9IDIzXSA9IFwiQm9vbFZlYzRBcnJheVwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiU2FtcGxlcjJEXCJdID0gMjRdID0gXCJTYW1wbGVyMkRcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIlNhbXBsZXIyREFycmF5XCJdID0gMjVdID0gXCJTYW1wbGVyMkRBcnJheVwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiU2FtcGxlckN1YmVcIl0gPSAyNl0gPSBcIlNhbXBsZXJDdWJlXCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJTYW1wbGVyQ3ViZUFycmF5XCJdID0gMjddID0gXCJTYW1wbGVyQ3ViZUFycmF5XCI7XG4gICAgVW5pZm9ybVR5cGVbVW5pZm9ybVR5cGVbXCJNYXRyaXgyZnZcIl0gPSAyOF0gPSBcIk1hdHJpeDJmdlwiO1xuICAgIFVuaWZvcm1UeXBlW1VuaWZvcm1UeXBlW1wiTWF0cml4M2Z2XCJdID0gMjldID0gXCJNYXRyaXgzZnZcIjtcbiAgICBVbmlmb3JtVHlwZVtVbmlmb3JtVHlwZVtcIk1hdHJpeDRmdlwiXSA9IDMwXSA9IFwiTWF0cml4NGZ2XCI7XG4gIH0pKFVuaWZvcm1UeXBlID0gZXhwb3J0cy5Vbmlmb3JtVHlwZSB8fCAoZXhwb3J0cy5Vbmlmb3JtVHlwZSA9IHt9KSk7XG5cbiAgdmFyIFVuaWZvcm0gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbmlmb3JtKG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmlmb3JtKTtcblxuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXBwbHkgPSBmdW5jdGlvbiAoZ2wsIHByb2dyYW0pIHtcbiAgICAgICAgaWYgKF90aGlzLmRpcnR5KSB7XG4gICAgICAgICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgICB2YXIgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgX3RoaXMua2V5KTsgLy8gY29uc29sZS5sb2codGhpcy5rZXksIHRoaXMubWV0aG9kLCB0aGlzLnZhbHVlcyk7XG4gICAgICAgICAgLy8gKGdsIGFzIGFueSlbdGhpcy5tZXRob2RdLmFwcGx5KGdsLCBbbG9jYXRpb25dLmNvbmNhdCh0aGlzLnZhbHVlcykpO1xuXG4gICAgICAgICAgZ2xbX3RoaXMubWV0aG9kXS5hcHBseShnbCwgW2xvY2F0aW9uXS5jb25jYXQoX3RoaXMudmFsdWVzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFVuaWZvcm0sIG51bGwsIFt7XG4gICAgICBrZXk6IFwiRGlmZmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIERpZmZlcnMoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggIT09IGIubGVuZ3RoIHx8IGEucmVkdWNlKGZ1bmN0aW9uIChmLCB2LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGYgfHwgdiAhPT0gYltpXTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBVbmlmb3JtO1xuICB9KCk7XG5cbiAgZXhwb3J0cy5Vbmlmb3JtID0gVW5pZm9ybTtcblxuICB2YXIgVW5pZm9ybVRleHR1cmUgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfVW5pZm9ybSkge1xuICAgIF9pbmhlcml0cyhVbmlmb3JtVGV4dHVyZSwgX1VuaWZvcm0pO1xuXG4gICAgZnVuY3Rpb24gVW5pZm9ybVRleHR1cmUob3B0aW9ucykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuaWZvcm1UZXh0dXJlKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihVbmlmb3JtVGV4dHVyZSkuY2FsbCh0aGlzLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFVuaWZvcm1UZXh0dXJlO1xuICB9KFVuaWZvcm0pO1xuXG4gIGV4cG9ydHMuVW5pZm9ybVRleHR1cmUgPSBVbmlmb3JtVGV4dHVyZTtcblxuICB2YXIgVW5pZm9ybXMgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfaXRlcmFibGVfMSRkZWZhdWx0KSB7XG4gICAgX2luaGVyaXRzKFVuaWZvcm1zLCBfaXRlcmFibGVfMSRkZWZhdWx0KTtcblxuICAgIGZ1bmN0aW9uIFVuaWZvcm1zKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuaWZvcm1zKTtcblxuICAgICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVuaWZvcm1zKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIF90aGlzMi5kaXJ0eSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVW5pZm9ybXMsIFt7XG4gICAgICBrZXk6IFwiY2xlYW5cIixcblxuICAgICAgLypcbiAgICAgIHN0YXRpYyBwYXJzZVVuaWZvcm1zKHZhbHVlczogYW55LCBwcmVmaXg/OiBzdHJpbmcpOiBNYXA8c3RyaW5nLCBVbmlmb3JtPiB7XG4gICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBuZXcgTWFwPHN0cmluZywgVW5pZm9ybT4oKTtcbiAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gdmFsdWVzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgIGtleSA9IHByZWZpeCArICcuJyArIGtleTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCB1bmlmb3JtOiBVbmlmb3JtID0gVW5pZm9ybXMucGFyc2VVbmlmb3JtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICBpZiAodW5pZm9ybSkge1xuICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuc2V0KGtleSwgdW5pZm9ybSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVuaWZvcm1zO1xuICAgICAgfVxuICAgICAgKi9cbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhbigpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMudmFsdWVzKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZXNba2V5XS5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLypcbiAgICAgIHNldFBhcnNlKGtleTogc3RyaW5nLCAuLi52YWx1ZXM6IGFueVtdKTogVW5pZm9ybSB7XG4gICAgICAgICAgY29uc3QgdW5pZm9ybTogVW5pZm9ybSA9IFVuaWZvcm1zLnBhcnNlVW5pZm9ybShrZXksIC4uLnZhbHVlcyk7XG4gICAgICAgICAgaWYgKHVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB1bmlmb3JtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVuaWZvcm07XG4gICAgICB9XG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShtZXRob2QsIHR5cGUsIGtleSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICB2YWx1ZXNbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXQoa2V5LCB1bmlmb3JtKTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHJldHVybiB1bmlmb3JtO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjcmVhdGVUZXh0dXJlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVGV4dHVyZShrZXksIGluZGV4KSB7XG4gICAgICAgIHZhciB1bmlmb3JtO1xuXG4gICAgICAgIGlmIChrZXkuaW5kZXhPZignXScpICE9PSAtMSkge1xuICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybVRleHR1cmUoe1xuICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0xaXYsXG4gICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5TYW1wbGVyMkRBcnJheSxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWVzOiBbW2luZGV4XV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm1UZXh0dXJlKHtcbiAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWksXG4gICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5TYW1wbGVyMkQsXG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHZhbHVlczogW2luZGV4XVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXQoa2V5LCB1bmlmb3JtKTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHJldHVybiB1bmlmb3JtO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUobWV0aG9kLCB0eXBlLCBrZXkpIHtcbiAgICAgICAgdmFyIHVuaWZvcm0gPSB0aGlzLmdldChrZXkpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4yID4gMyA/IF9sZW4yIC0gMyA6IDApLCBfa2V5MiA9IDM7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICB2YWx1ZXNbX2tleTIgLSAzXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pZm9ybSAmJiAodW5pZm9ybS5tZXRob2QgIT09IG1ldGhvZCB8fCB1bmlmb3JtLnR5cGUgIT09IHR5cGUgfHwgVW5pZm9ybS5EaWZmZXJzKHVuaWZvcm0udmFsdWVzLCB2YWx1ZXMpKSkge1xuICAgICAgICAgIHVuaWZvcm0ubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgIHVuaWZvcm0udHlwZSA9IHR5cGU7XG4gICAgICAgICAgdW5pZm9ybS52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgdW5pZm9ybS5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3JlYXRlT3JVcGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVPclVwZGF0ZShtZXRob2QsIHR5cGUsIGtleSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IG5ldyBBcnJheShfbGVuMyA+IDMgPyBfbGVuMyAtIDMgOiAwKSwgX2tleTMgPSAzOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgICAgdmFsdWVzW19rZXkzIC0gM10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZS5hcHBseSh0aGlzLCBbbWV0aG9kLCB0eXBlLCBrZXldLmNvbmNhdCh2YWx1ZXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZS5hcHBseSh0aGlzLCBbbWV0aG9kLCB0eXBlLCBrZXldLmNvbmNhdCh2YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhcHBseVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5KGdsLCBwcm9ncmFtKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnZhbHVlcykge1xuICAgICAgICAgIHRoaXMudmFsdWVzW2tleV0uYXBwbHkoZ2wsIHByb2dyYW0pO1xuICAgICAgICB9IC8vIHRoaXMuZm9yRWFjaCh1bmlmb3JtID0+IHVuaWZvcm0uYXBwbHkoZ2wsIHByb2dyYW0pKTtcblxuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImlzQXJyYXlPZkludGVnZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FycmF5T2ZJbnRlZ2VyKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGZsYWcsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZsYWcgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0FycmF5T2ZOdW1iZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FycmF5T2ZOdW1iZXIoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoZmxhZywgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZmxhZyAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNBcnJheU9mQm9vbGVhblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQXJyYXlPZkJvb2xlYW4oYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoZmxhZywgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZmxhZyAmJiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzQXJyYXlPZlRleHR1cmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FycmF5T2ZUZXh0dXJlKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGZsYWcsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZsYWcgJiYgdGV4dHVyZXNfMS5UZXh0dXJlLmlzVGV4dHVyZSh2YWx1ZSk7XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYXJzZVVuaWZvcm1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVVuaWZvcm0oa2V5KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICB2YWx1ZXNbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pZm9ybTtcblxuICAgICAgICBpZiAoVW5pZm9ybXMuaXNBcnJheU9mSW50ZWdlcih2YWx1ZXMpKSB7XG4gICAgICAgICAgc3dpdGNoICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0xaSxcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5JbnQsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0yaSxcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5JbnRWZWMyLFxuICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtM2ksXG4gICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuSW50VmVjMyxcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTRpLFxuICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkludFZlYzQsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChVbmlmb3Jtcy5pc0FycmF5T2ZOdW1iZXIodmFsdWVzKSkge1xuICAgICAgICAgIHN3aXRjaCAodmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWYsXG4gICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuRmxvYXQsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0yZixcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GbG9hdFZlYzIsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0zZixcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GbG9hdFZlYzMsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm00ZixcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GbG9hdFZlYzQsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChVbmlmb3Jtcy5pc0FycmF5T2ZCb29sZWFuKHZhbHVlcykpIHtcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTFpLFxuICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkJvb2wsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0yaSxcbiAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5Cb29sVmVjMixcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTNpLFxuICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkJvb2xWZWMzLFxuICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtNGksXG4gICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuQm9vbFZlYzQsXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzWzBdO1xuXG4gICAgICAgICAgaWYgKHRleHR1cmVzXzEuVGV4dHVyZS5pc1RleHR1cmUodmFsdWUpKSB7XG4gICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTFpLFxuICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5TYW1wbGVyMkQsXG4gICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlIC8vICEhIVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoVW5pZm9ybXMuaXNBcnJheU9mSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTFpdixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuSW50QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMml2LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5JbnRWZWMyQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtM2l2LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5JbnRWZWMzQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtNGl2LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5JbnRWZWM0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChVbmlmb3Jtcy5pc0FycmF5T2ZOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0xZnYsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkZsb2F0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMmZ2LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GbG9hdFZlYzJBcnJheSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm0zZnYsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkZsb2F0VmVjM0FycmF5LFxuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTRmdixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuRmxvYXRWZWM0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChVbmlmb3Jtcy5pc0FycmF5T2ZCb29sZWFuKHZhbHVlKSkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWl2LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5Cb29sQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMmksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkJvb2xWZWMyQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtM2ksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkJvb2xWZWMzQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtNGksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkJvb2xWZWM0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChVbmlmb3Jtcy5pc0FycmF5T2ZUZXh0dXJlKHZhbHVlKSkge1xuICAgICAgICAgICAgICB2YXIgdW5pZm9ybXMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHRleHR1cmUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtMWl2LFxuICAgICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuU2FtcGxlcjJEQXJyYXksXG4gICAgICAgICAgICAgICAgICBrZXk6IGtleSArICdbJyArIGluZGV4ICsgJ10nLFxuICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbdGV4dHVyZV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB1bmlmb3JtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkgJiYgdHlwZW9mIHZhbHVlWzBdWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIGFycmF5cyAtIGJ1dCBvbmx5IGFycmF5cyBvZiB2ZWN0b3JzIGFyZSBhbGxvd2VkIGluIHRoaXMgY2FzZVxuICAgICAgICAgICAgICAgIC8vIGZsb2F0IHZlY3RvcnMgKHZlYzIsIHZlYzMsIHZlYzQpXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdLmxlbmd0aCA+PSAyICYmIHZhbHVlWzBdLmxlbmd0aCA8PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCB2YWx1ZS5sZW5ndGg7IHUrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm0gPSBuZXcgVW5pZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFVuaWZvcm1NZXRob2QuVW5pZm9ybTJmdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFVuaWZvcm1UeXBlLkZsb2F0VmVjMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5ICsgJ1snICsgdSArICddJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogVW5pZm9ybU1ldGhvZC5Vbmlmb3JtM2Z2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuRmxvYXRWZWMzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBrZXkgKyAnWycgKyB1ICsgJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gbmV3IFVuaWZvcm0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBVbmlmb3JtTWV0aG9kLlVuaWZvcm00ZnYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GbG9hdFZlYzQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSArICdbJyArIHUgKyAnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlIGVycm9yP1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gQXJyYXkgb2Ygc3RydWN0dXJlc1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHUgPSAwOyB1IDwgdmFsdWUubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVhY2ggc3RydWN0IGluIHRoZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAvLyAhISEgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKC4uLlVuaWZvcm1zLnBhcnNlVW5pZm9ybXModmFsdWVbdV0sIGtleSArICdbJyArIHUgKyAnXScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gU3RydWN0dXJlXG4gICAgICAgICAgICAvLyBTZXQgZWFjaCBmaWVsZCBpbiB0aGUgc3RydWN0XG4gICAgICAgICAgICAvLyAhISEgdW5pZm9ybSA9IG5ldyBVbmlmb3JtKC4uLlVuaWZvcm1zLnBhcnNlVW5pZm9ybXModmFsdWUsIGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHN1cHBvcnQgb3RoZXIgbm9uLWZsb2F0IHR5cGVzPyAoaW50LCBldGMuKVxuICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIHVuaWZvcm07XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFVuaWZvcm1zO1xuICB9KGl0ZXJhYmxlXzEuZGVmYXVsdCk7XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gVW5pZm9ybXM7XG59KTtcblxufSx7XCIuL2l0ZXJhYmxlXCI6OCxcIi4vdGV4dHVyZXNcIjoxMH1dfSx7fSxbN10pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaUlpd2ljMjkxY21ObGN5STZXeUp6Y21NdloyeHpiQzFqWVc1MllYTXZaMnh6YkMxallXNTJZWE11ZEhNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnYVcxd2IzSjBJQ2RBWW1GaVpXd3ZjRzlzZVdacGJHd25PMXh1THk4Z2FXMXdiM0owSUNkM2FHRjBkMmN0Wm1WMFkyZ25PMXh1YVcxd2IzSjBJQ2R3Y205dGFYTmxMWEJ2YkhsbWFXeHNKenRjYm1sdGNHOXlkQ0JDZFdabVpYSnpMQ0I3SUVsUFFuVm1abVZ5SUgwZ1puSnZiU0FuTGk5aWRXWm1aWEp6Snp0Y2JtbHRjRzl5ZENCRGIyMXRiMjRnWm5KdmJTQW5MaTlqYjIxdGIyNG5PMXh1YVcxd2IzSjBJRU52Ym5SbGVIUXNJSHNnUTI5dWRHVjRkRVJsWm1GMWJIUkdjbUZuYldWdWRDd2dRMjl1ZEdWNGRFUmxabUYxYkhSV1pYSjBaWGdzSUVOdmJuUmxlSFJXWlhKMFpYaENkV1ptWlhKekxDQkpRMjl1ZEdWNGRFOXdkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwyTnZiblJsZUhRbk8xeHVhVzF3YjNKMElGTjFZbk5qY21saVpYSWdabkp2YlNBbkxpOXpkV0p6WTNKcFltVnlKenRjYm1sdGNHOXlkQ0JVWlhoMGRYSmxjeXdnZXlCVVpYaDBkWEpsTENCVVpYaDBkWEpsUkdGMFlTd2dWR1Y0ZEhWeVpVVjRkR1Z1YzJsdmJuTXNJRlJsZUhSMWNtVlBjSFJwYjI1eklIMGdabkp2YlNBbkxpOTBaWGgwZFhKbGN5YzdYRzVwYlhCdmNuUWdWVzVwWm05eWJYTXNJSHNnU1ZWdWFXWnZjbTFQY0hScGIyNHNJRlZ1YVdadmNtMHNJRlZ1YVdadmNtMU5aWFJvYjJRc0lGVnVhV1p2Y20xVWVYQmxJSDBnWm5KdmJTQW5MaTkxYm1sbWIzSnRjeWM3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1NWQnZhVzUwSUh0Y2JpQWdJQ0I0T2lCdWRXMWlaWElzWEc0Z0lDQWdlVG9nYm5WdFltVnlMRnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUjJ4emJFTmhiblpoYzA5d2RHbHZibk1nZTF4dUlDQWdJRzl1UlhKeWIzSS9PaUJHZFc1amRHbHZianRjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUVkc2MyeERZVzUyWVhOVWFXMWxjaUI3WEc1Y2JpQWdJQ0J6ZEdGeWREb2diblZ0WW1WeU8xeHVJQ0FnSUhCeVpYWnBiM1Z6T2lCdWRXMWlaWEk3WEc0Z0lDQWdaR1ZzWVhrNklHNTFiV0psY2lBOUlEQXVNRHRjYmlBZ0lDQmpkWEp5Wlc1ME9pQnVkVzFpWlhJZ1BTQXdMakE3WEc0Z0lDQWdaR1ZzZEdFNklHNTFiV0psY2lBOUlEQXVNRHRjYmlBZ0lDQndZWFZ6WldRNklHSnZiMnhsWVc0Z1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowSUQwZ2RHaHBjeTV3Y21WMmFXOTFjeUE5SUhSb2FYTXVibTkzS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYm05M0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR1Z5Wm05eWJXRnVZMlV1Ym05M0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NHeGhlU2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNISmxkbWx2ZFhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzV2ZHlBOUlIUm9hWE11Ym05M0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYkdGNUlDczlJQ2h1YjNjZ0xTQjBhR2x6TG5CeVpYWnBiM1Z6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISmxkbWx2ZFhNZ1BTQnViM2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvZEdocGN5NWtaV3hoZVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMWMyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NHRjFjMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMWMyVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdVpYaDBLQ2s2SUVkc2MyeERZVzUyWVhOVWFXMWxjaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2ZHlBOUlIUm9hWE11Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnNkR0VnUFNCdWIzY2dMU0IwYUdsekxuQnlaWFpwYjNWek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OMWNuSmxiblFnUFNCdWIzY2dMU0IwYUdsekxuTjBZWEowSUMwZ2RHaHBjeTVrWld4aGVUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVjJhVzkxY3lBOUlHNXZkenRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFZHNjMnhEWVc1MllYTWdaWGgwWlc1a2N5QlRkV0p6WTNKcFltVnlJSHRjYmx4dUlDQWdJR05oYm5aaGN6b2dTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUTdYRzRnSUNBZ1oydzZJRmRsWWtkTVVtVnVaR1Z5YVc1blEyOXVkR1Y0ZER0Y2JpQWdJQ0J3Y205bmNtRnRPaUJYWldKSFRGQnliMmR5WVcwN1hHNGdJQ0FnZEdsdFpYSTZJRWRzYzJ4RFlXNTJZWE5VYVcxbGNqdGNiaUFnSUNCMlpYSjBaWGhDZFdabVpYSnpPaUJEYjI1MFpYaDBWbVZ5ZEdWNFFuVm1abVZ5Y3p0Y2JpQWdJQ0J5WldOME9pQkRiR2xsYm5SU1pXTjBJSHdnUkU5TlVtVmpkRHRjYmlBZ0lDQnRiM1Z6WlRvZ1NWQnZhVzUwSUQwZ2V5QjRPaUF3TENCNU9pQXdJSDA3WEc0Z0lDQWdkVzVwWm05eWJYTTZJRlZ1YVdadmNtMXpJRDBnYm1WM0lGVnVhV1p2Y20xektDazdYRzRnSUNBZ1luVm1abVZ5Y3pvZ1FuVm1abVZ5Y3lBOUlHNWxkeUJDZFdabVpYSnpLQ2s3WEc0Z0lDQWdkR1Y0ZEhWeVpYTTZJRlJsZUhSMWNtVnpJRDBnYm1WM0lGUmxlSFIxY21WektDazdYRzRnSUNBZ2RHVjRkSFZ5WlV4cGMzUTZJR0Z1ZVZ0ZElEMGdXMTA3WEc1Y2JpQWdJQ0IyWlhKMFpYaFRkSEpwYm1jNklITjBjbWx1Wnp0Y2JpQWdJQ0JtY21GbmJXVnVkRk4wY21sdVp6b2djM1J5YVc1bk8xeHVJQ0FnSUhkcFpIUm9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ2FHVnBaMmgwT2lCdWRXMWlaWEk3WEc0Z0lDQWdaR1YyYVdObFVHbDRaV3hTWVhScGJ6b2diblZ0WW1WeU8xeHVYRzRnSUNBZ2RtRnNhV1E2SUdKdmIyeGxZVzRnUFNCbVlXeHpaVHRjYmlBZ0lDQmhibWx0WVhSbFpEb2dZbTl2YkdWaGJpQTlJR1poYkhObE8xeHVJQ0FnSUdScGNuUjVPaUJpYjI5c1pXRnVJRDBnZEhKMVpUdGNiaUFnSUNCMmFYTnBZbXhsT2lCaWIyOXNaV0Z1SUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0JzYjI5d09pQkdkVzVqZEdsdmJqdGNiaUFnSUNCeVpXMXZkbVZNYVhOMFpXNWxjbk02SUVaMWJtTjBhVzl1SUQwZ0tDa2dQVDRnZXlCOU8xeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQWdJR05oYm5aaGN6b2dTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUXNYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUlBjSFJwYjI1ek9pQkpRMjl1ZEdWNGRFOXdkR2x2Ym5NZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhiSEJvWVRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0Z1ZEdsaGJHbGhjem9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIQnlaVzExYkhScGNHeHBaV1JCYkhCb1lUb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQkhiSE5zUTJGdWRtRnpUM0IwYVc5dWN5QTlJSHQ5WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMkZ1ZG1GektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1MllYTWdQU0JqWVc1MllYTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQybGtkR2dnUFNBd095QXZMeUJqWVc1MllYTXVZMnhwWlc1MFYybGtkR2c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhR1ZwWjJoMElEMGdNRHNnTHk4Z1kyRnVkbUZ6TG1Oc2FXVnVkRWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXTjBJRDBnWTJGdWRtRnpMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5abGNuUmxlRk4wY21sdVp5QTlJR052Ym5SbGVIUlBjSFJwYjI1ekxuWmxjblJsZUZOMGNtbHVaeUI4ZkNCRGIyNTBaWGgwUkdWbVlYVnNkRlpsY25SbGVEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtRm5iV1Z1ZEZOMGNtbHVaeUE5SUdOdmJuUmxlSFJQY0hScGIyNXpMbVp5WVdkdFpXNTBVM1J5YVc1bklIeDhJRU52Ym5SbGVIUkVaV1poZFd4MFJuSmhaMjFsYm5RN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkc0lEMGdRMjl1ZEdWNGRDNTBjbmxIWlhSRGIyNTBaWGgwS0dOaGJuWmhjeXdnWTI5dWRHVjRkRTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXViMjVGY25KdmNpazdYRzRnSUNBZ0lDQWdJR2xtSUNnaFoyd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0lEMGdaMnc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1YyYVdObFVHbDRaV3hTWVhScGJ5QTlJSGRwYm1SdmR5NWtaWFpwWTJWUWFYaGxiRkpoZEdsdklIeDhJREU3WEc0Z0lDQWdJQ0FnSUdOaGJuWmhjeTV6ZEhsc1pTNWlZV05yWjNKdmRXNWtRMjlzYjNJZ1BTQmpiMjUwWlhoMFQzQjBhVzl1Y3k1aVlXTnJaM0p2ZFc1a1EyOXNiM0lnZkh3Z0ozSm5ZbUVvTUN3d0xEQXNNQ2tuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRsZEZOb1lXUmxjbk1vS1M1MGFHVnVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tITjFZMk5sYzNNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHZZV1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWNISnZaM0poYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXUmtUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNiMjl3S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hwY3k1aGJtbHRZWFJsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGxjbkp2Y2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkbGNuSnZjaWNzSUdWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JIYkhOc1EyRnVkbUZ6TG1sMFpXMXpMbkIxYzJnb2RHaHBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHbDBaVzF6T2lCSGJITnNRMkZ1ZG1GelcxMGdQU0JiWFR0Y2JseHVJQ0FnSUhOMFlYUnBZeUIyWlhKemFXOXVLQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuTUM0eUxqQW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCdlppaGpZVzUyWVhNNklFaFVUVXhEWVc1MllYTkZiR1Z0Wlc1MEtUb2dSMnh6YkVOaGJuWmhjeUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJIYkhOc1EyRnVkbUZ6TG1sMFpXMXpMbVpwYm1Rb2VDQTlQaUI0TG1OaGJuWmhjeUE5UFQwZ1kyRnVkbUZ6S1NCOGZDQnVaWGNnUjJ4emJFTmhiblpoY3loallXNTJZWE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QnNiMkZrUVd4c0tDazZJRWRzYzJ4RFlXNTJZWE5iWFNCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOaGJuWmhjMlZ6T2lCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZEZ0ZElEMGdQRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBXMTArVzEwdWMyeHBZMlV1WTJGc2JDaGtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBjMEo1UTJ4aGMzTk9ZVzFsS0NkbmJITnNMV05oYm5aaGN5Y3BLUzVtYVd4MFpYSW9LSGc2SUVoVVRVeEZiR1Z0Wlc1MEtTQTlQaUI0SUdsdWMzUmhibU5sYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnVkbUZ6WlhNdWJXRndLSGdnUFQ0Z1IyeHpiRU5oYm5aaGN5NXZaaWg0S1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMFUyaGhaR1Z5Y3lncE9pQlFjbTl0YVhObFBITjBjbWx1WjF0ZFBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmpZVzUyWVhNZ1BTQjBhR2x6TG1OaGJuWmhjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhWeWJITTZJR0Z1ZVNBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05oYm5aaGN5NW9ZWE5CZEhSeWFXSjFkR1VvSjJSaGRHRXRkbVZ5ZEdWNExYVnliQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNjeTUyWlhKMFpYZ2dQU0JqWVc1MllYTXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMWFpsY25SbGVDMTFjbXduS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVc1MllYTXVhR0Z6UVhSMGNtbGlkWFJsS0Nka1lYUmhMV1p5WVdkdFpXNTBMWFZ5YkNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzY3k1bWNtRm5iV1Z1ZENBOUlHTmhiblpoY3k1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFpuSmhaMjFsYm5RdGRYSnNKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZ1ZG1GekxtaGhjMEYwZEhKcFluVjBaU2duWkdGMFlTMTJaWEowWlhnbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlkR1Y0VTNSeWFXNW5JRDBnWTJGdWRtRnpMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzEyWlhKMFpYZ25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZVzUyWVhNdWFHRnpRWFIwY21saWRYUmxLQ2RrWVhSaExXWnlZV2R0Wlc1MEp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnlZV2R0Wlc1MFUzUnlhVzVuSUQwZ1kyRnVkbUZ6TG1kbGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxbWNtRm5iV1Z1ZENjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzVyWlhsektIVnliSE1wTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1WVd4c0tFOWlhbVZqZEM1clpYbHpLSFZ5YkhNcExtMWhjQ2dvYTJWNUxDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIVnliRG9nYzNSeWFXNW5JRDBnZFhKc2MxdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1EyOXRiVzl1TG1abGRHTm9LSFZ5YkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDNTBhR1Z1S0NoeVpYTndiMjV6WlNrZ1BUNGdjbVZ6Y0c5dWMyVXVkR1Y0ZENncEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvS0dKdlpIa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuZG1WeWRHVjRKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MlpYSjBaWGhUZEhKcGJtY2dQU0JpYjJSNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVp5WVdkdFpXNTBVM1J5YVc1bklEMGdZbTlrZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwS1M1MGFHVnVLSE5vWVdSbGNuTWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtGdDBhR2x6TG5abGNuUmxlRk4wY21sdVp5d2dkR2hwY3k1bWNtRm5iV1Z1ZEZOMGNtbHVaMTBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRnQwYUdsekxuWmxjblJsZUZOMGNtbHVaeXdnZEdocGN5NW1jbUZuYldWdWRGTjBjbWx1WjEwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaFpHUk1hWE4wWlc1bGNuTW9LVG9nZG05cFpDQjdYRzRnSUNBZ0lDQWdJQzhxWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzJsNlpTQTlJQ2hsT2lCRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaV04wSUQwZ2RHaHBjeTVqWVc1MllYTXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnlhV2RuWlhJb0ozSmxjMmw2WlNjc0lHVXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBcUwxeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElITmpjbTlzYkNBOUlDaGxPaUJGZG1WdWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXTjBJRDBnZEdocGN5NWpZVzUyWVhNdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyeHBZMnNnUFNBb1pUb2dUVzkxYzJWRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMmRuYkdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25ZMnhwWTJzbkxDQmxLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIzWmxJRDBnS0cxNE9pQnVkVzFpWlhJc0lHMTVPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElISmxZM1FnUFNCMGFHbHpMbkpsWTNRc0lHZGhjQ0E5SURJd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlQ0E5SUUxaGRHZ3ViV0Y0S0MxbllYQXNJRTFoZEdndWJXbHVLSEpsWTNRdWQybGtkR2dnS3lCbllYQXNJQ2h0ZUNBdElISmxZM1F1YkdWbWRDa2dLaUIwYUdsekxtUmxkbWxqWlZCcGVHVnNVbUYwYVc4cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGtnUFNCTllYUm9MbTFoZUNndFoyRndMQ0JOWVhSb0xtMXBiaWh5WldOMExtaGxhV2RvZENBcklHZGhjQ3dnS0hSb2FYTXVZMkZ1ZG1GekxtaGxhV2RvZENBdElDaHRlU0F0SUhKbFkzUXVkRzl3S1NBcUlIUm9hWE11WkdWMmFXTmxVR2w0Wld4U1lYUnBieWtwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNElDRTlQU0IwYUdsekxtMXZkWE5sTG5nZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJQ0U5UFNCMGFHbHpMbTF2ZFhObExua3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sTG5nZ1BTQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlV1ZVNBOUlIazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5S0NkdGIzWmxKeXdnZEdocGN5NXRiM1Z6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXOTFjMlZ0YjNabElEMGdLR1U2SUUxdmRYTmxSWFpsYm5RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZkbVVvWlM1amJHbGxiblJZSUh4OElHVXVjR0ZuWlZnc0lHVXVZMnhwWlc1MFdTQjhmQ0JsTG5CaFoyVlpLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIzVnpaVzkyWlhJZ1BTQW9aVG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YkdGNUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KMjkyWlhJbkxDQmxLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIzVnpaVzkxZENBOUlDaGxPaUJOYjNWelpVVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZFhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KMjkxZENjc0lHVXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdmRXTm9iVzkyWlNBOUlDaGxPaUJVYjNWamFFVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwYjNWamFDQTlJRnRkTG5Oc2FXTmxMbU5oYkd3b1pTNTBiM1ZqYUdWektTNXlaV1IxWTJVb0tIQTZJRWxRYjJsdWRDd2dkRzkxWTJnNklGUnZkV05vS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQ0E5SUhBZ2ZId2dleUI0T2lBd0xDQjVPaUF3SUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDNTRJQ3M5SUhSdmRXTm9MbU5zYVdWdWRGZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQzU1SUNzOUlIUnZkV05vTG1Oc2FXVnVkRms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiM1ZqYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkbVVvZEc5MVkyZ3VlQ0F2SUdVdWRHOTFZMmhsY3k1c1pXNW5kR2dzSUhSdmRXTm9MbmtnTHlCbExuUnZkV05vWlhNdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIzVmphR1Z1WkNBOUlDaGxPaUJVYjNWamFFVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZFhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KMjkxZENjc0lHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJobGJtUW5MQ0IwYjNWamFHVnVaQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOTFZMmh6ZEdGeWRDQTlJQ2hsT2lCVWIzVmphRVYyWlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lYa29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduYjNabGNpY3NJR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJobGJtUW5MQ0IwYjNWamFHVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXMXZkbVVuTENCdGIzVnpaVzF2ZG1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJGdWRtRnpMbWhoYzBGMGRISnBZblYwWlNnblkyOXVkSEp2YkhNbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyRnVkbUZ6TG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sYjNabGNpY3NJRzF2ZFhObGIzWmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpZVzUyWVhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWdmRYUW5MQ0J0YjNWelpXOTFkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkc5dmNEb2dSbkpoYldWU1pYRjFaWE4wUTJGc2JHSmhZMnNnUFNBb2RHbHRaVG9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yVW1WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLR3h2YjNBcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzl2Y0NBOUlHeHZiM0E3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozSmxjMmw2WlNjc0lISmxjMmw2WlNrN1hHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelkzSnZiR3duTENCelkzSnZiR3dwTzF4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaVzF2ZG1VbkxDQnRiM1Z6WlcxdmRtVXNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJodGIzWmxKeXdnZEc5MVkyaHRiM1psS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyRnVkbUZ6TG1oaGMwRjBkSEpwWW5WMFpTZ25ZMjl1ZEhKdmJITW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXNTJZWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JqYkdsamF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oYm5aaGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6Wlc5MlpYSW5MQ0J0YjNWelpXOTJaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXNTJZWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVnZkWFFuTENCdGIzVnpaVzkxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmhiblpoY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphSE4wWVhKMEp5d2dkRzkxWTJoemRHRnlkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZMkZ1ZG1GekxtaGhjMEYwZEhKcFluVjBaU2duWkdGMFlTMWhkWFJ2Y0d4aGVTY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWFZ6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVZNYVhOMFpXNWxjbk1nUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIzYVc1a2IzY3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduY21WemFYcGxKeXdnY21WemFYcGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHpZM0p2Ykd3bkxDQnpZM0p2Ykd3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZ0YjNabEp5d2diVzkxYzJWdGIzWmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2JXOTJaU2NzSUhSdmRXTm9iVzkyWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqWVc1MllYTXVhR0Z6UVhSMGNtbGlkWFJsS0NkamIyNTBjbTlzY3ljcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXNTJZWE11Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCamJHbGpheWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpZVzUyWVhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWdmRtVnlKeXdnYlc5MWMyVnZkbVZ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oYm5aaGN5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXOTFkQ2NzSUcxdmRYTmxiM1YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oYm5aaGN5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2QwYjNWamFITjBZWEowSnl3Z2RHOTFZMmh6ZEdGeWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCc2IyRmtLRnh1SUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk4wY21sdVp6ODZJSE4wY21sdVp5eGNiaUFnSUNBZ0lDQWdkbVZ5ZEdWNFUzUnlhVzVuUHpvZ2MzUnlhVzVuWEc0Z0lDQWdLVG9nZG05cFpDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMlpYSjBaWGhUZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRHVjRVM1J5YVc1bklEMGdkbVZ5ZEdWNFUzUnlhVzVuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2htY21GbmJXVnVkRk4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtY21GbmJXVnVkRk4wY21sdVp5QTlJR1p5WVdkdFpXNTBVM1J5YVc1bk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElHZHNJRDBnZEdocGN5NW5iRHRjYmlBZ0lDQWdJQ0FnYkdWMElIWmxjblJsZUZOb1lXUmxjaXdnWm5KaFoyMWxiblJUYUdGa1pYSTdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJZ1BTQkRiMjUwWlhoMExtTnlaV0YwWlZOb1lXUmxjaWhuYkN3Z2RHaHBjeTUyWlhKMFpYaFRkSEpwYm1jc0lHZHNMbFpGVWxSRldGOVRTRUZFUlZJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSWdQU0JEYjI1MFpYaDBMbU55WldGMFpWTm9ZV1JsY2lobmJDd2dkR2hwY3k1bWNtRm5iV1Z1ZEZOMGNtbHVaeXdnWjJ3dVJsSkJSMDFGVGxSZlUwaEJSRVZTS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlFWnlZV2R0Wlc1MElITm9ZV1JsY2lCbVlXbHNjeUJzYjJGa0lHRWdaVzF3ZEhrZ2IyNWxJSFJ2SUhOcFoyNGdkR2hsSUdWeWNtOXlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1p5WVdkdFpXNTBVMmhoWkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJZ1BTQkRiMjUwWlhoMExtTnlaV0YwWlZOb1lXUmxjaWhuYkN3Z1EyOXVkR1Y0ZEVSbFptRjFiSFJHY21GbmJXVnVkQ3dnWjJ3dVJsSkJSMDFGVGxSZlUwaEJSRVZTS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkdsa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRISnBaMmRsY2lnblpYSnliM0luTENCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QkRjbVZoZEdVZ1lXNWtJSFZ6WlNCd2NtOW5jbUZ0WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ5YjJkeVlXMGdQU0JEYjI1MFpYaDBMbU55WldGMFpWQnliMmR5WVcwb1oyd3NJRnQyWlhKMFpYaFRhR0ZrWlhJc0lHWnlZV2R0Wlc1MFUyaGhaR1Z5WFNrN0lDOHZMQ0JiTUN3eFhTeGJKMkZmZEdWNFkyOXZjbVFuTENkaFgzQnZjMmwwYVc5dUoxMHBPMXh1SUNBZ0lDQWdJQ0JuYkM1MWMyVlFjbTluY21GdEtIQnliMmR5WVcwcE8xeHVJQ0FnSUNBZ0lDQXZMeUJFWld4bGRHVWdjMmhoWkdWeWMxeHVJQ0FnSUNBZ0lDQXZMeUJuYkM1a1pYUmhZMmhUYUdGa1pYSW9jSEp2WjNKaGJTd2dkbVZ5ZEdWNFUyaGhaR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdaMnd1WkdWMFlXTm9VMmhoWkdWeUtIQnliMmR5WVcwc0lHWnlZV2R0Wlc1MFUyaGhaR1Z5S1R0Y2JpQWdJQ0FnSUNBZ1oyd3VaR1ZzWlhSbFUyaGhaR1Z5S0habGNuUmxlRk5vWVdSbGNpazdYRzRnSUNBZ0lDQWdJR2RzTG1SbGJHVjBaVk5vWVdSbGNpaG1jbUZuYldWdWRGTm9ZV1JsY2lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdlozSmhiU0E5SUhCeWIyZHlZVzA3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5aaGJHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KMVptWmxjbk1nUFNCQ2RXWm1aWEp6TG1kbGRFSjFabVpsY25Nb1oyd3NJSFJvYVhNdVpuSmhaMjFsYm5SVGRISnBibWNzSUhSb2FYTXVkbVZ5ZEdWNFUzUnlhVzVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlkR1Y0UW5WbVptVnljeUE5SUVOdmJuUmxlSFF1WTNKbFlYUmxWbVZ5ZEdWNFFuVm1abVZ5Y3lobmJDd2djSEp2WjNKaGJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpWVnVhV1p2Y20xektDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1ZISnBaMmRsY2lCbGRtVnVkRnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnlhV2RuWlhJb0oyeHZZV1FuTENCMGFHbHpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBaWE4wS0Z4dUlDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOMGNtbHVaejg2SUhOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnZG1WeWRHVjRVM1J5YVc1blB6b2djM1J5YVc1blhHNGdJQ0FnS1RvZ1VISnZiV2x6WlR4aGJuaytJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFpsY25SbGVDQTlJSFJvYVhNdWRtVnlkR1Y0VTNSeWFXNW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWm5KaFoyMWxiblFnUFNCMGFHbHpMbVp5WVdkdFpXNTBVM1J5YVc1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR0YxYzJWa0lEMGdkR2hwY3k1MGFXMWxjaTV3WVhWelpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR0Z1YTNNZ2RHOGdRSFJvWlhOd2FYUmxJR1p2Y2lCMGFHVWdhR1ZzY0NCb1pYSmxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwzZDNkeTVyYUhKdmJtOXpMbTl5Wnk5eVpXZHBjM1J5ZVM5M1pXSm5iQzlsZUhSbGJuTnBiMjV6TDBWWVZGOWthWE5xYjJsdWRGOTBhVzFsY2w5eGRXVnllUzljYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdWNGRHVnVjMmx2YmlBOUlIUm9hWE11WjJ3dVoyVjBSWGgwWlc1emFXOXVLQ2RGV0ZSZlpHbHphbTlwYm5SZmRHbHRaWEpmY1hWbGNua25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhGMVpYSjVJRDBnWlhoMFpXNXphVzl1TG1OeVpXRjBaVkYxWlhKNVJWaFVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZDJGelZtRnNhV1FnUFNCMGFHbHpMblpoYkdsa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnlZV2R0Wlc1MFUzUnlhVzVuSUh4OElIWmxjblJsZUZOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViRzloWkNobWNtRm5iV1Z1ZEZOMGNtbHVaeXdnZG1WeWRHVjRVM1J5YVc1bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZWE5XWVd4cFpDQTlJSFJvYVhNdWRtRnNhV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzVrWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHbHRaWEl1Y0dGMWMyVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGRHVnVjMmx2Ymk1aVpXZHBibEYxWlhKNVJWaFVLR1Y0ZEdWdWMybHZiaTVVU1UxRlgwVk1RVkJUUlVSZlJWaFVMQ0J4ZFdWeWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYm1SbGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaDBaVzV6YVc5dUxtVnVaRkYxWlhKNVJWaFVLR1Y0ZEdWdWMybHZiaTVVU1UxRlgwVk1RVkJUUlVSZlJWaFVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhkaGFYUkdiM0pVWlhOMElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZWFpoYVd4aFlteGxJRDBnWlhoMFpXNXphVzl1TG1kbGRGRjFaWEo1VDJKcVpXTjBSVmhVS0hGMVpYSjVMQ0JsZUhSbGJuTnBiMjR1VVZWRlVsbGZVa1ZUVlV4VVgwRldRVWxNUVVKTVJWOUZXRlFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1JwYzJwdmFXNTBJRDBnZEdocGN5NW5iQzVuWlhSUVlYSmhiV1YwWlhJb1pYaDBaVzV6YVc5dUxrZFFWVjlFU1ZOS1QwbE9WRjlGV0ZRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoZG1GcGJHRmliR1VnSmlZZ0lXUnBjMnB2YVc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNWc2RDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRoYzFaaGJHbGtPaUIzWVhOV1lXeHBaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5WVdkdFpXNTBPaUJtY21GbmJXVnVkRk4wY21sdVp5QjhmQ0IwYUdsekxtWnlZV2R0Wlc1MFUzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRHVjRPaUIyWlhKMFpYaFRkSEpwYm1jZ2ZId2dkR2hwY3k1MlpYSjBaWGhUZEhKcGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhVzFsUld4aGNITmxaRTF6T2lCbGVIUmxibk5wYjI0dVoyVjBVWFZsY25sUFltcGxZM1JGV0ZRb2NYVmxjbmtzSUdWNGRHVnVjMmx2Ymk1UlZVVlNXVjlTUlZOVlRGUmZSVmhVS1NBdklERXdNREF3TURBdU1GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ScGJXVnlMbkJoZFhObFpDQTlJSEJoZFhObFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnlZV2R0Wlc1MFUzUnlhVzVuSUh4OElIWmxjblJsZUZOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNiMkZrS0daeVlXZHRaVzUwTENCMlpYSjBaWGdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtIZGhhWFJHYjNKVVpYTjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCM1lXbDBSbTl5VkdWemRDZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JrWlhOMGNtOTVLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxiVzkyWlV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GdWFXMWhkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzYVdRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWjJ3Z1BTQjBhR2x6TG1kc08xeHVJQ0FnSUNBZ0lDQm5iQzUxYzJWUWNtOW5jbUZ0S0c1MWJHd3BPMXh1SUNBZ0lDQWdJQ0JuYkM1a1pXeGxkR1ZRY205bmNtRnRLSFJvYVhNdWNISnZaM0poYlNrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhMlY1SUdsdUlIUm9hWE11WW5WbVptVnljeTUyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdKMVptWmxjam9nU1U5Q2RXWm1aWElnUFNCMGFHbHpMbUoxWm1abGNuTXVkbUZzZFdWelcydGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdVpHVnpkSEp2ZVNobmJDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2dhVzRnZEdocGN5NTBaWGgwZFhKbGN5NTJZV3gxWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJsZUhSMWNtVTZJRlJsZUhSMWNtVWdQU0IwYUdsekxuUmxlSFIxY21WekxuWmhiSFZsYzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkSFZ5WlM1a1pYTjBjbTk1S0dkc0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtSjFabVpsY25NZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJsZUhSMWNtVnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2WjNKaGJTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJ3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCSGJITnNRMkZ1ZG1GekxtbDBaVzF6TG5Od2JHbGpaU2hIYkhOc1EyRnVkbUZ6TG1sMFpXMXpMbWx1WkdWNFQyWW9kR2hwY3lrc0lERXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxkRlZ1YVdadmNtMUJjbkpoZVNoclpYazZJSE4wY21sdVp5d2dkbUZzZFdWek9pQmhibmxiWFN3Z2IzQjBhVzl1Y3pvZ1lXNTVJRDBnYm5Wc2JDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWJtbG1iM0p0T2lCVmJtbG1iM0p0SUh3Z1ZXNXBabTl5YlZ0ZElEMGdWVzVwWm05eWJYTXVjR0Z5YzJWVmJtbG1iM0p0S0d0bGVTd2dMaTR1ZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZFc1cFptOXliU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ1YVdadmNtMHVabTl5UldGamFDZ29lQ2tnUFQ0Z2RHaHBjeTVzYjJGa1ZHVjRkSFZ5WlNoNExtdGxlU3dnZUM1MllXeDFaWE5iTUYwcExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gxYm1sbWIzSnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIVnVhV1p2Y20wdWRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdWVzVwWm05eWJWUjVjR1V1VTJGdGNHeGxjakpFT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14dllXUlVaWGgwZFhKbEtHdGxlU3dnZG1Gc2RXVnpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1elpYUW9hMlY1TENCMWJtbG1iM0p0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEZWdWFXWnZjbTBvYTJWNU9pQnpkSEpwYm1jc0lDNHVMblpoYkhWbGN6b2dZVzU1VzEwcE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwVlc1cFptOXliVUZ5Y21GNUtHdGxlU3dnZG1Gc2RXVnpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaWFJVWlhoMGRYSmxLRnh1SUNBZ0lDQWdJQ0JyWlhrNklITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ2RYSnNSV3hsYldWdWRFOXlSR0YwWVRvZ2MzUnlhVzVuSUh3Z1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RZ2ZDQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElId2dTRlJOVEZacFpHVnZSV3hsYldWdWRDQjhJRVZzWlcxbGJuUWdmQ0JVWlhoMGRYSmxSR0YwWVN4Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ1ZHVjRkSFZ5WlU5d2RHbHZibk1nUFNCN2ZWeHVJQ0FnSUNrNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJWYm1sbWIzSnRRWEp5WVhrb2EyVjVMQ0JiZFhKc1JXeGxiV1Z1ZEU5eVJHRjBZVjBzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEZWdWFXWnZjbTF6S0haaGJIVmxjem9nU1ZWdWFXWnZjbTFQY0hScGIyNHBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JyWlhrZ2FXNGdkbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZWdWFXWnZjbTBvYTJWNUxDQjJZV3gxWlhOYmEyVjVYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3WVhWelpTZ3BPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlhJdWNHRjFjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyRnVkbUZ6TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM0JoZFhObFpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY21sbloyVnlLQ2R3WVhWelpTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjR3hoZVNncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtRnNhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHbHRaWEl1Y0d4aGVTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1MllYTXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25jR0YxYzJWa0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KM0JzWVhrbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIUnZaMmRzWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtRnNhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblJwYldWeUxuQmhkWE5sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0d4aGVTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZFhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcGMxWnBjMmxpYkdVb0tUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxZM1FnUFNCMGFHbHpMbkpsWTNRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2NtVmpkQzUwYjNBZ0t5QnlaV04wTG1obGFXZG9kQ2tnUGlBd0lDWW1JSEpsWTNRdWRHOXdJRHdnS0hkcGJtUnZkeTVwYm01bGNraGxhV2RvZENCOGZDQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdVkyeHBaVzUwU0dWcFoyaDBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBjMEZ1YVcxaGRHVmtLQ2s2SUdKdmIyeGxZVzRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVZVzVwYldGMFpXUWdmSHdnZEdocGN5NTBaWGgwZFhKbGN5NWhibWx0WVhSbFpDa2dKaVlnSVhSb2FYTXVkR2x0WlhJdWNHRjFjMlZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2x6UkdseWRIa29LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUnBjblI1SUh4OElIUm9hWE11ZFc1cFptOXliWE11WkdseWRIa2dmSHdnZEdocGN5NTBaWGgwZFhKbGN5NWthWEowZVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCamFHVmpheUJ6YVhwbElHTm9ZVzVuWlNCaGRDQnpkR0Z5ZENCdlppQnlaWEYxWlhOMFJuSmhiV1ZjYmlBZ0lDQnphWHBsUkdsa1EyaGhibWRsWkNncE9pQmliMjlzWldGdUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1oyd2dQU0IwYUdsekxtZHNPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQlhJRDBnVFdGMGFDNWpaV2xzS0hSb2FYTXVZMkZ1ZG1GekxtTnNhV1Z1ZEZkcFpIUm9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lFZ2dQU0JOWVhSb0xtTmxhV3dvZEdocGN5NWpZVzUyWVhNdVkyeHBaVzUwU0dWcFoyaDBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZDJsa2RHZ2dJVDA5SUZjZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZwWjJoMElDRTlQU0JJS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHBaSFJvSUQwZ1Z6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZwWjJoMElEMGdTRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRXh2YjJ0MWNDQjBhR1VnYzJsNlpTQjBhR1VnWW5KdmQzTmxjaUJwY3lCa2FYTndiR0Y1YVc1bklIUm9aU0JqWVc1MllYTWdhVzRnUTFOVElIQnBlR1ZzYzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWVc1a0lHTnZiWEIxZEdVZ1lTQnphWHBsSUc1bFpXUmxaQ0IwYnlCdFlXdGxJRzkxY2lCa2NtRjNhVzVuWW5WbVptVnlJRzFoZEdOb0lHbDBJR2x1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJrWlhacFkyVWdjR2w0Wld4ekxseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdRbGNnUFNCTllYUm9MbU5sYVd3b1Z5QXFJSFJvYVhNdVpHVjJhV05sVUdsNFpXeFNZWFJwYnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQkNTQ0E5SUUxaGRHZ3VZMlZwYkNoSUlDb2dkR2hwY3k1a1pYWnBZMlZRYVhobGJGSmhkR2x2S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyRnVkbUZ6TG5kcFpIUm9JRDBnUWxjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmhiblpoY3k1b1pXbG5hSFFnUFNCQ1NEdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1oyd3VZMkZ1ZG1GekxuZHBaSFJvSUNFOVBTQkNWeUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkc0xtTmhiblpoY3k1b1pXbG5hSFFnSVQwOUlFSklLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJ3dVkyRnVkbUZ6TG5kcFpIUm9JRDBnUWxjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyd3VZMkZ1ZG1GekxtaGxhV2RvZENBOUlFSklPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZObGRDQjBhR1VnZG1sbGQzQnZjblFnZEc4Z2JXRjBZMmhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbmJDNTJhV1YzY0c5eWRDZ3dMQ0F3TENCQ1Z5d2dRa2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2EyVjVJR2x1SUhSb2FYTXVZblZtWm1WeWN5NTJZV3gxWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaWRXWm1aWEk2SUVsUFFuVm1abVZ5SUQwZ2RHaHBjeTVpZFdabVpYSnpMblpoYkhWbGMxdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMVptWmxjaTV5WlhOcGVtVW9aMndzSUVKWExDQkNTQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsWTNRZ1BTQjBhR2x6TG1OaGJuWmhjeTVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25jbVZ6YVhwbEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm5iQzUxYzJWUWNtOW5jbUZ0S0hSb2FYTXVjSEp2WjNKaGJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHTm9aV05yVW1WdVpHVnlLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzFacGMybGliR1VvS1NBbUppQW9kR2hwY3k1emFYcGxSR2xrUTJoaGJtZGxaQ2dwSUh4OElIUm9hWE11YVhOQmJtbHRZWFJsWkNncElIeDhJSFJvYVhNdWFYTkVhWEowZVNncEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5Wlc1a1pYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJGdWRtRnpMbU5zWVhOelRHbHpkQzVoWkdRb0ozQnNZWGxwYm1jbktUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMkZ1ZG1GekxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0ozQnNZWGxwYm1jbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHTnlaV0YwWlZWdWFXWnZjbTF6S0NrNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JuYkNBOUlIUm9hWE11WjJ3N1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdaeVlXZHRaVzUwVTNSeWFXNW5JRDBnZEdocGN5NW1jbUZuYldWdWRGTjBjbWx1Wnp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnUWxjZ1BTQm5iQzVrY21GM2FXNW5RblZtWm1WeVYybGtkR2c3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRUpJSUQwZ1oyd3VaSEpoZDJsdVowSjFabVpsY2tobGFXZG9kRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR2x0WlhJZ1BTQjBhR2x6TG5ScGJXVnlJRDBnYm1WM0lFZHNjMnhEWVc1MllYTlVhVzFsY2lncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCb1lYTkVaV3gwWVNBOUlDaG1jbUZuYldWdWRGTjBjbWx1Wnk1dFlYUmphQ2d2ZFY5a1pXeDBZUzluS1NCOGZDQmJYU2t1YkdWdVozUm9JRDRnTVR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYUdGelZHbHRaU0E5SUNobWNtRm5iV1Z1ZEZOMGNtbHVaeTV0WVhSamFDZ3ZkVjkwYVcxbEwyY3BJSHg4SUZ0ZEtTNXNaVzVuZEdnZ1BpQXhPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm9ZWE5FWVhSbElEMGdLR1p5WVdkdFpXNTBVM1J5YVc1bkxtMWhkR05vS0M5MVgyUmhkR1V2WnlrZ2ZId2dXMTBwTG14bGJtZDBhQ0ErSURFN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdoaGMwMXZkWE5sSUQwZ0tHWnlZV2R0Wlc1MFUzUnlhVzVuTG0xaGRHTm9LQzkxWDIxdmRYTmxMMmNwSUh4OElGdGRLUzVzWlc1bmRHZ2dQaUF4TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvWVhOVVpYaDBkWEpsY3lBOUlIUm9hWE11Y0dGeWMyVlVaWGgwZFhKbGN5aG1jbUZuYldWdWRGTjBjbWx1WnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVc1cGJXRjBaV1FnUFNCb1lYTlVhVzFsSUh4OElHaGhjMFJoZEdVZ2ZId2dhR0Z6VFc5MWMyVTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUZ1YVcxaGRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJuWmhjeTVqYkdGemMweHBjM1F1WVdSa0tDZGhibWx0WVhSbFpDY3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1MllYTXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ZVzVwYldGMFpXUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMblZ1YVdadmNtMXpMbU55WldGMFpTaFZibWxtYjNKdFRXVjBhRzlrTGxWdWFXWnZjbTB5Wml3Z1ZXNXBabTl5YlZSNWNHVXVSbXh2WVhSV1pXTXlMQ0FuZFY5eVpYTnZiSFYwYVc5dUp5d2dRbGNzSUVKSUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGMwUmxiSFJoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxtTnlaV0YwWlNoVmJtbG1iM0p0VFdWMGFHOWtMbFZ1YVdadmNtMHhaaXdnVlc1cFptOXliVlI1Y0dVdVJteHZZWFFzSUNkMVgyUmxiSFJoSnl3Z2RHbHRaWEl1WkdWc2RHRWdMeUF4TURBd0xqQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9ZWE5VYVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ1YVdadmNtMXpMbU55WldGMFpTaFZibWxtYjNKdFRXVjBhRzlrTGxWdWFXWnZjbTB4Wml3Z1ZXNXBabTl5YlZSNWNHVXVSbXh2WVhRc0lDZDFYM1JwYldVbkxDQjBhVzFsY2k1amRYSnlaVzUwSUM4Z01UQXdNQzR3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYUdGelJHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBaU0E5SUc1bGR5QkVZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhV1p2Y20xekxtTnlaV0YwWlNoVmJtbG1iM0p0VFdWMGFHOWtMbFZ1YVdadmNtMDBaaXdnVlc1cFptOXliVlI1Y0dVdVJteHZZWFFzSUNkMVgyUmhkR1VuTENCa1lYUmxMbWRsZEVaMWJHeFpaV0Z5S0Nrc0lHUmhkR1V1WjJWMFRXOXVkR2dvS1N3Z1pHRjBaUzVuWlhSRVlYUmxLQ2tzSUdSaGRHVXVaMlYwU0c5MWNuTW9LU0FxSURNMk1EQWdLeUJrWVhSbExtZGxkRTFwYm5WMFpYTW9LU0FxSURZd0lDc2daR0YwWlM1blpYUlRaV052Ym1SektDa2dLeUJrWVhSbExtZGxkRTFwYkd4cGMyVmpiMjVrY3lncElDb2dNQzR3TURFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTk5iM1Z6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdGN5NWpjbVZoZEdVb1ZXNXBabTl5YlUxbGRHaHZaQzVWYm1sbWIzSnRNbVlzSUZWdWFXWnZjbTFVZVhCbExrWnNiMkYwVm1Wak1pd2dKM1ZmYlc5MWMyVW5MQ0F3TENBd0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUIwYUdsekxtSjFabVpsY25NdWRtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmlkV1ptWlhJNklFbFBRblZtWm1WeUlEMGdkR2hwY3k1aWRXWm1aWEp6TG5aaGJIVmxjMXRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdGN5NWpjbVZoZEdVb1ZXNXBabTl5YlUxbGRHaHZaQzVWYm1sbWIzSnRNV2tzSUZWdWFXWnZjbTFVZVhCbExsTmhiWEJzWlhJeVJDd2dZblZtWm1WeUxtdGxlU3dnWW5WbVptVnlMbWx1Y0hWMExtbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYUdGelZHVjRkSFZ5WlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR1Y0ZEhWeVpVeHBjM1F1Wm05eVJXRmphQ2g0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14dllXUlVaWGgwZFhKbEtIZ3VhMlY1TENCNExuVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdWNGRIVnlaVXhwYzNRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEJoY25ObFZHVjRkSFZ5WlhNb1puSmhaMjFsYm5SVGRISnBibWM2SUhOMGNtbHVaeWs2SUdKdmIyeGxZVzRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WldkbGVIQWdQU0F2ZFc1cFptOXliVnhjY3lwellXMXdiR1Z5TWtSY1hITXFLRnRjWEhkZEtpazdLRnhjY3lwY1hDOWNYQzljWEhNcUtGdGNYSGQ4WEZ3NlhGd3ZYRnd2ZkZ4Y0xueGNYQzE4WEZ4ZlhTb3BmRnhjY3lvcEwyZHRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JXRjBZMmhsY3p0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0NodFlYUmphR1Z6SUQwZ2NtVm5aWGh3TG1WNFpXTW9abkpoWjIxbGJuUlRkSEpwYm1jcEtTQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNUlEMGdiV0YwWTJobGMxc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhSamFHVnpXek5kS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhoMElEMGdiV0YwWTJobGMxc3pYUzV6Y0d4cGRDZ25MaWNwTG5CdmNDZ3BMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZFhKc0lEMGdiV0YwWTJobGMxc3pYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RYSnNJQ1ltSUZSbGVIUjFjbVZGZUhSbGJuTnBiMjV6TG1sdVpHVjRUMllvWlhoMEtTQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwZFhKbFRHbHpkQzV3ZFhOb0tIc2dhMlY1TENCMWNtd2dmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doZEdocGN5NWlkV1ptWlhKekxtaGhjeWhyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWTNKbFlYUmxJR1Z0Y0hSNUlIUmxlSFIxY21WY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsZUhSMWNtVk1hWE4wTG5CMWMyZ29leUJyWlhrc0lIVnliRG9nYm5Wc2JDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqWVc1MllYTXVhR0Z6UVhSMGNtbGlkWFJsS0Nka1lYUmhMWFJsZUhSMWNtVnpKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIVnliSE1nUFNCMGFHbHpMbU5oYm5aaGN5NW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRkR1Y0ZEhWeVpYTW5LUzV6Y0d4cGRDZ25MQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkWEpzY3k1bWIzSkZZV05vS0NoMWNtdzZJSE4wY21sdVp5d2dhVG9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNUlEMGdKM1ZmZEdWNEp5QXJJR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwZFhKbFRHbHpkQzV3ZFhOb0tIc2dhMlY1TENCMWNtd2dmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBaWGgwZFhKbFRHbHpkQzVzWlc1bmRHZ2dQaUF3TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3h2WVdSVVpYaDBkWEpsS0Z4dUlDQWdJQ0FnSUNCclpYazZJSE4wY21sdVp5eGNiaUFnSUNBZ0lDQWdkWEpzUld4bGJXVnVkRTl5UkdGMFlUb2djM1J5YVc1bklId2dTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUWdmQ0JJVkUxTVNXMWhaMlZGYkdWdFpXNTBJSHdnU0ZSTlRGWnBaR1Z2Uld4bGJXVnVkQ0I4SUVWc1pXMWxiblFnZkNCVVpYaDBkWEpsUkdGMFlTeGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN6b2dWR1Y0ZEhWeVpVOXdkR2x2Ym5NZ1BTQjdmVnh1SUNBZ0lDazZJRkJ5YjIxcGMyVThWR1Y0ZEhWeVpUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUyWVd4cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR1Y0ZEhWeVpYTXVZM0psWVhSbFQzSlZjR1JoZEdVb2RHaHBjeTVuYkN3Z2EyVjVMQ0IxY214RmJHVnRaVzUwVDNKRVlYUmhMQ0IwYUdsekxtSjFabVpsY25NdVkyOTFiblFzSUc5d2RHbHZibk1wTG5Sb1pXNG9kR1Y0ZEhWeVpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQjBaWGgwZFhKbExtbHVaR1Y0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFZ1YVdadmNtMGdQU0IwYUdsekxuVnVhV1p2Y20xekxtTnlaV0YwWlZSbGVIUjFjbVVvYTJWNUxDQnBibVJsZUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlM1MFpYaDBkWEpsSUQwZ2RHVjRkSFZ5WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsU1pYTnZiSFYwYVc5dUlEMGdhMlY1TG1sdVpHVjRUMllvSjFzbktTQWhQVDBnTFRFZ1B5QnJaWGt1Y21Wd2JHRmpaU2duV3ljc0lDZFNaWE52YkhWMGFXOXVXeWNwSURvZ2EyVjVJQ3NnSjFKbGMyOXNkWFJwYjI0bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhWdWFXWnZjbTFTWlhOdmJIVjBhVzl1SUQwZ2RHaHBjeTUxYm1sbWIzSnRjeTVqY21WaGRHVW9WVzVwWm05eWJVMWxkR2h2WkM1VmJtbG1iM0p0TW1Zc0lGVnVhV1p2Y20xVWVYQmxMa1pzYjJGMFZtVmpNaXdnYTJWNVVtVnpiMngxZEdsdmJpd2dkR1Y0ZEhWeVpTNTNhV1IwYUN3Z2RHVjRkSFZ5WlM1b1pXbG5hSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LQ2RzYjJGa1ZHVjRkSFZ5WlNjc0lHdGxlU3dnZFhKc0xDQnBibVJsZUN3Z2RHVjRkSFZ5WlM1M2FXUjBhQ3dnZEdWNGRIVnlaUzVvWldsbmFIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBaWGgwZFhKbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmxlSFIxY21WTWFYTjBMbkIxYzJnb2V5QnJaWGtzSUhWeWJEb2dkWEpzUld4bGJXVnVkRTl5UkdGMFlTQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFZ3WkdGMFpWVnVhV1p2Y20xektDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbmJDQTlJSFJvYVhNdVoydzdYRzRnSUNBZ0lDQWdJR052Ym5OMElFSlhJRDBnWjJ3dVpISmhkMmx1WjBKMVptWmxjbGRwWkhSb08xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCQ1NDQTlJR2RzTG1SeVlYZHBibWRDZFdabVpYSklaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhScGJXVnlJRDBnZEdocGN5NTBhVzFsY2k1dVpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVkWEJrWVhSbEtGVnVhV1p2Y20xTlpYUm9iMlF1Vlc1cFptOXliVEptTENCVmJtbG1iM0p0Vkhsd1pTNUdiRzloZEZabFl6SXNJQ2QxWDNKbGMyOXNkWFJwYjI0bkxDQkNWeXdnUWtncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTFibWxtYjNKdGN5NW9ZWE1vSjNWZlpHVnNkR0VuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdGN5NTFjR1JoZEdVb1ZXNXBabTl5YlUxbGRHaHZaQzVWYm1sbWIzSnRNV1lzSUZWdWFXWnZjbTFVZVhCbExrWnNiMkYwTENBbmRWOWtaV3gwWVNjc0lIUnBiV1Z5TG1SbGJIUmhJQzhnTVRBd01DNHdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MWJtbG1iM0p0Y3k1b1lYTW9KM1ZmZEdsdFpTY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WdWFXWnZjbTF6TG5Wd1pHRjBaU2hWYm1sbWIzSnRUV1YwYUc5a0xsVnVhV1p2Y20weFppd2dWVzVwWm05eWJWUjVjR1V1Um14dllYUXNJQ2QxWDNScGJXVW5MQ0IwYVcxbGNpNWpkWEp5Wlc1MElDOGdNVEF3TUM0d0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUxYm1sbWIzSnRjeTVvWVhNb0ozVmZaR0YwWlNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSbElEMGdibVYzSUVSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFc1cFptOXliWE11ZFhCa1lYUmxLRlZ1YVdadmNtMU5aWFJvYjJRdVZXNXBabTl5YlRSbUxDQlZibWxtYjNKdFZIbHdaUzVHYkc5aGRDd2dKM1ZmWkdGMFpTY3NJR1JoZEdVdVoyVjBSblZzYkZsbFlYSW9LU3dnWkdGMFpTNW5aWFJOYjI1MGFDZ3BMQ0JrWVhSbExtZGxkRVJoZEdVb0tTd2daR0YwWlM1blpYUkliM1Z5Y3lncElDb2dNell3TUNBcklHUmhkR1V1WjJWMFRXbHVkWFJsY3lncElDb2dOakFnS3lCa1lYUmxMbWRsZEZObFkyOXVaSE1vS1NBcklHUmhkR1V1WjJWMFRXbHNiR2x6WldOdmJtUnpLQ2tnS2lBd0xqQXdNU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRXNXBabTl5YlhNdWFHRnpLQ2QxWDIxdmRYTmxKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMXZkWE5sSUQwZ2RHaHBjeTV0YjNWelpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkVzVwWm05eWJYTXVkWEJrWVhSbEtGVnVhV1p2Y20xTlpYUm9iMlF1Vlc1cFptOXliVEptTENCVmJtbG1iM0p0Vkhsd1pTNUdiRzloZEZabFl6SXNJQ2QxWDIxdmRYTmxKeXdnYlc5MWMyVXVlQ3dnYlc5MWMyVXVlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WamRDQTlJSFJvYVhNdWNtVmpkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0YjNWelpTNTRJRDQ5SUhKbFkzUXViR1ZtZENBbUppQnRiM1Z6WlM1NElEdzlJSEpsWTNRdWNtbG5hSFFnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaUzU1SUQ0OUlISmxZM1F1ZEc5d0lDWW1JRzF2ZFhObExua2dQRDBnY21WamRDNWliM1IwYjIwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCTldDQTlJQ2h0YjNWelpTNTRJQzBnY21WamRDNXNaV1owS1NBcUlIUm9hWE11WkdWMmFXTmxVR2w0Wld4U1lYUnBienRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQk5XU0E5SUNoMGFHbHpMbU5oYm5aaGN5NW9aV2xuYUhRZ0xTQW9iVzkxYzJVdWVTQXRJSEpsWTNRdWRHOXdLU0FxSUhSb2FYTXVaR1YyYVdObFVHbDRaV3hTWVhScGJ5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1MWNHUmhkR1VvVlc1cFptOXliVTFsZEdodlpDNVZibWxtYjNKdE1tWXNJRlZ1YVdadmNtMVVlWEJsTGtac2IyRjBWbVZqTWl3Z0ozVmZiVzkxYzJVbkxDQk5XQ3dnVFZrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElHdGxlU0JwYmlCMGFHbHpMbUoxWm1abGNuTXVkbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpZFdabVpYSTZJRWxQUW5WbVptVnlJRDBnZEdocGN5NWlkV1ptWlhKekxuWmhiSFZsYzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTUxY0dSaGRHVW9WVzVwWm05eWJVMWxkR2h2WkM1VmJtbG1iM0p0TVdrc0lGVnVhV1p2Y20xVWVYQmxMbE5oYlhCc1pYSXlSQ3dnWW5WbVptVnlMbXRsZVN3Z1luVm1abVZ5TG1sdWNIVjBMbWx1WkdWNEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUIwYUdsekxuUmxlSFIxY21WekxuWmhiSFZsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkR1Y0ZEhWeVpUb2dWR1Y0ZEhWeVpTQTlJSFJvYVhNdWRHVjRkSFZ5WlhNdWRtRnNkV1Z6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsTG5SeWVWVndaR0YwWlNobmJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ1YVdadmNtMXpMblZ3WkdGMFpTaFZibWxtYjNKdFRXVjBhRzlrTGxWdWFXWnZjbTB4YVN3Z1ZXNXBabTl5YlZSNWNHVXVVMkZ0Y0d4bGNqSkVMQ0IwWlhoMGRYSmxMbXRsZVN3Z2RHVjRkSFZ5WlM1cGJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5Wlc1a1pYSW9LVG9nZG05cFpDQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHZHNJRDBnZEdocGN5NW5iRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdRbGNnUFNCbmJDNWtjbUYzYVc1blFuVm1abVZ5VjJsa2RHZzdYRzRnSUNBZ0lDQWdJR052Ym5OMElFSklJRDBnWjJ3dVpISmhkMmx1WjBKMVptWmxja2hsYVdkb2REdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZWYm1sbWIzSnRjeWdwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElHdGxlU0JwYmlCMGFHbHpMbUoxWm1abGNuTXVkbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpZFdabVpYSTZJRWxQUW5WbVptVnlJRDBnZEdocGN5NWlkV1ptWlhKekxuWmhiSFZsYzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTVoY0hCc2VTaG5iQ3dnWW5WbVptVnlMbkJ5YjJkeVlXMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5TG5KbGJtUmxjaWhuYkN3Z1FsY3NJRUpJS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm5iQzUxYzJWUWNtOW5jbUZ0S0hSb2FYTXVjSEp2WjNKaGJTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXBabTl5YlhNdVlYQndiSGtvWjJ3c0lIUm9hWE11Y0hKdlozSmhiU2s3WEc0Z0lDQWdJQ0FnSUdkc0xuWnBaWGR3YjNKMEtEQXNJREFzSUVKWExDQkNTQ2s3WEc0Z0lDQWdJQ0FnSUdkc0xtSnBibVJHY21GdFpXSjFabVpsY2lobmJDNUdVa0ZOUlVKVlJrWkZVaXdnYm5Wc2JDazdYRzRnSUNBZ0lDQWdJR2RzTG1SeVlYZEJjbkpoZVhNb1oyd3VWRkpKUVU1SFRFVlRMQ0F3TENBMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1amJHVmhiaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJsZUhSMWNtVnpMbU5zWldGdUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHbHlkSGtnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBjbWxuWjJWeUtDZHlaVzVrWlhJbkxDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc1Y2JuMWNibHh1S0R4aGJuaytkMmx1Wkc5M0tTNUhiSE5zUTJGdWRtRnpJRDBnUjJ4emJFTmhiblpoY3p0Y2JseHVaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNJa1JQVFVOdmJuUmxiblJNYjJGa1pXUmNJaXdnUjJ4emJFTmhiblpoY3k1c2IyRmtRV3hzS1R0Y2JpSmRMQ0ptYVd4bElqb2laRzlqY3k5cWN5OW5iSE5zTFdOaGJuWmhjeTVxY3lKOVxuIl19