!function o(a,u,s){function f(t,e){if(!u[t]){if(!a[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};a[t][0].call(i.exports,function(e){return f(a[t][1][e]||e)},i,i.exports,o,a,u,s)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)f(s[e]);return f}({1:[function(e,t,r){var n,i,o=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:u}catch(e){i=u}}();var f,l=[],c=!1,h=-1;function d(){c&&f&&(c=!1,f.length?l=f.concat(l):h=-1,l.length&&v())}function v(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(f=l,l=[];++h<t;)f&&f[h].run();h=-1,t=l.length}f=null,c=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===u||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new m(e,t)),1!==l.length||c||s(v)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],2:[function(e,c,t){(function(t){"use strict";var r=setTimeout;function n(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(e,this)}function i(r,n){for(;3===r._state;)r=r._value;0!==r._state?(r._handled=!0,o._immediateFn(function(){var e=1===r._state?n.onFulfilled:n.onRejected;if(null!==e){var t;try{t=e(r._value)}catch(e){return void u(n.promise,e)}a(n.promise,t)}else(1===r._state?a:u)(n.promise,r._value)})):r._deferreds.push(n)}function a(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var r=e.then;if(e instanceof o)return t._state=3,t._value=e,void s(t);if("function"==typeof r)return void l((n=r,i=e,function(){n.apply(i,arguments)}),t)}t._state=1,t._value=e,s(t)}catch(e){u(t,e)}var n,i}function u(e,t){e._state=2,e._value=t,s(e)}function s(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var t=0,r=e._deferreds.length;t<r;t++)i(e,e._deferreds[t]);e._deferreds=null}function f(e,t,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=r}function l(e,t){var r=!1;try{e(function(e){r||(r=!0,a(t,e))},function(e){r||(r=!0,u(t,e))})}catch(e){if(r)return;r=!0,u(t,e)}}o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){var r=new this.constructor(n);return i(this,new f(e,t,r)),r},o.prototype.finally=function(t){var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){return r.reject(e)})})},o.all=function(t){return new o(function(n,i){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var o=Array.prototype.slice.call(t);if(0===o.length)return n([]);var a=o.length;function u(t,e){try{if(e&&("object"==typeof e||"function"==typeof e)){var r=e.then;if("function"==typeof r)return void r.call(e,function(e){u(t,e)},i)}o[t]=e,0==--a&&n(o)}catch(e){i(e)}}for(var e=0;e<o.length;e++)u(e,o[e])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(r){return new o(function(e,t){t(r)})},o.race=function(i){return new o(function(e,t){for(var r=0,n=i.length;r<n;r++)i[r].then(e,t)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){r(e,0)},o._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},c.exports=o}).call(this,e("timers").setImmediate)},{timers:3}],3:[function(s,e,f){(function(e,t){var n=s("process/browser.js").nextTick,r=Function.prototype.apply,i=Array.prototype.slice,o={},a=0;function u(e,t){this._id=e,this._clearFn=t}f.setTimeout=function(){return new u(r.call(setTimeout,window,arguments),clearTimeout)},f.setInterval=function(){return new u(r.call(setInterval,window,arguments),clearInterval)},f.clearTimeout=f.clearInterval=function(e){e.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},f.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},f.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},f._unrefActive=f.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;0<=t&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},f.setImmediate="function"==typeof e?e:function(e){var t=a++,r=!(arguments.length<2)&&i.call(arguments,1);return o[t]=!0,n(function(){o[t]&&(r?e.apply(null,r):e.call(null),f.clearImmediate(t))}),t},f.clearImmediate="function"==typeof t?t:function(e){delete o[e]}}).call(this,s("timers").setImmediate,s("timers").clearImmediate)},{"process/browser.js":1,timers:3}],4:[function(r,n,i){"use strict";function o(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var l=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":s(n))&&"object"===s(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./context","./iterable"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var u,r,s=l(e("./context")),n=l(e("./iterable"));(r=u=t.BufferFloatType||(t.BufferFloatType={}))[r.FLOAT=0]="FLOAT",r[r.HALF_FLOAT=1]="HALF_FLOAT";var f=function(){function a(e,t,r,n){d(this,a);var i=e.createFramebuffer(),o=this.getTexture(e,t,r,n);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),this.texture=o,this.buffer=i,this.BW=t,this.BH=r,this.index=n}return v(a,[{key:"getFloatType",value:function(e){var t,r;if(a.floatType===u.FLOAT){if(!(r=e.getExtension("OES_texture_float")))return a.floatType=u.HALF_FLOAT,this.getFloatType(e);t=e.FLOAT}else{if(!(r=e.getExtension("OES_texture_half_float")))return a.floatType=u.FLOAT,this.getFloatType(e);t=r.HALF_FLOAT_OES}return t}},{key:"getTexture",value:function(e,t,r,n){var i=this.getFloatType(e),o=e.createTexture();return e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_2D,o),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,r,0,e.RGBA,i,null),e.checkFramebufferStatus(e.FRAMEBUFFER)!==e.FRAMEBUFFER_COMPLETE?(a.floatType=a.floatType===u.FLOAT?u.HALF_FLOAT:u.FLOAT,this.getTexture(e,t,r,n)):o}},{key:"resize",value:function(e,t,r){if(t!==this.BW||r!==this.BH){var n=this.buffer,i=this.texture,o=this.index;e.bindFramebuffer(e.FRAMEBUFFER,n);var a,u=e.checkFramebufferStatus(e.FRAMEBUFFER),s=Math.min(t,this.BW),f=Math.min(r,this.BH),l=this.getFloatType(e);u===e.FRAMEBUFFER_COMPLETE&&(a=new Float32Array(s*f*4),e.readPixels(0,0,s,f,e.RGBA,l,a)),e.bindFramebuffer(e.FRAMEBUFFER,null);var c=o+1,h=this.getTexture(e,t,r,c);l=this.getFloatType(e),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),a&&e.texSubImage2D(e.TEXTURE_2D,0,0,0,s,f,e.RGBA,l,a);var d=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(i),e.activeTexture(e.TEXTURE0+o),e.bindTexture(e.TEXTURE_2D,h),this.index=o,this.texture=h,this.buffer=d,this.BW=t,this.BH=r}}}]),a}();f.floatType=u.HALF_FLOAT,t.Buffer=f;var c=function(){function i(e,t,r,n){d(this,i),this.isValid=!1,this.index=e,this.key=t,this.vertexString=r,this.fragmentString=n}return v(i,[{key:"create",value:function(e,t,r){var n=s.default.createShader(e,this.vertexString,e.VERTEX_SHADER),i=s.default.createShader(e,this.fragmentString,e.FRAGMENT_SHADER,1);this.isValid=!!i||(i=s.default.createShader(e,"void main(){\n\tgl_FragColor = vec4(1.0);\n}",e.FRAGMENT_SHADER),!1);var o=s.default.createProgram(e,[n,i]),a=new f(e,t,r,this.index+0),u=new f(e,t,r,this.index+2);this.program=o,this.input=a,this.output=u,e.deleteShader(n),e.deleteShader(i)}},{key:"render",value:function(e,t,r){e.useProgram(this.program),e.viewport(0,0,t,r),e.bindFramebuffer(e.FRAMEBUFFER,this.output.buffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.output.texture,0),e.drawArrays(e.TRIANGLES,0,6);var n=this.input,i=this.output,o=n;this.input=i,this.output=o}},{key:"resize",value:function(e,t,r){e.useProgram(this.program),e.viewport(0,0,t,r),this.input.resize(e,t,r),this.output.resize(e,t,r)}},{key:"destroy",value:function(e){e.deleteProgram(this.program),this.program=null,this.input=null,this.output=null}}]),i}();t.IOBuffer=c;var i=function(e){function l(){return d(this,l),o(this,a(l).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(l,n.default),v(l,[{key:"count",get:function(){return 4*Object.keys(this.values).length}}],[{key:"getBuffers",value:function(e,t,r){var n=new l,i=0;if(t)for(var o,a=/(?:^\s*)((?:#if|#elif)(?:\s*)(defined\s*\(\s*BUFFER_)(\d+)(?:\s*\))|(?:#ifdef)(?:\s*BUFFER_)(\d+)(?:\s*))/gm;null!==(o=a.exec(t));){var u=o[3]||o[4],s="u_buffer"+u,f=new c(i,s,r,"#define BUFFER_"+u+"\n"+t);f.create(e,e.drawingBufferWidth,e.drawingBufferHeight),n.set(s,f),i+=4}return n}}]),l}();t.default=i})},{"./context":6,"./iterable":8}],5:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":a(n))&&"object"===a(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","promise-polyfill"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),e("promise-polyfill");var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"fetch",value:function(n){return new Promise(function(e,t){var r=new XMLHttpRequest;r.onload=function(){e(r.response||r.responseText)},r.onerror=function(){t(new Error("Network request failed"))},r.ontimeout=function(){t(new Error("Network request failed"))},r.onabort=function(){t(new Error("Aborted"))},r.open("GET",n,!0),r.send(null)})}}],(r=null)&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{"promise-polyfill":2}],6:[function(r,n,i){"use strict";function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":o(n))&&"object"===o(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.ContextDefaultVertex="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\n\nvarying vec2 v_texcoord;\n\nvoid main(){\n\tgl_Position = vec4(a_position, 0.0, 1.0);\n\tv_texcoord = a_texcoord;\n}\n",t.ContextDefaultFragment="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 v_texcoord;\n\nvoid main(){\n\tgl_FragColor = vec4(0.0);\n}\n",(r=o=t.ContextError||(t.ContextError={}))[r.BrowserSupport=1]="BrowserSupport",r[r.Other=2]="Other";var a=function e(){f(this,e)};t.ContextVertexBuffers=a;var n=function(){function u(){f(this,u)}var e,t,r;return e=u,r=[{key:"tryGetContext",value:function(n,e,i){function t(e,t){if("function"==typeof i)i(e);else{var r=n.parentNode;r&&(r.innerHTML='<div class="glsl-canvas--error">'.concat(t,"</div>"))}}if(!WebGLRenderingContext)return t(o.BrowserSupport,'This page requires a browser that supports WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org">Click here to upgrade your browser.</a>'),null;var r=u.getContext(n,e);return r?r.getExtension("OES_standard_derivatives"):t(o.Other,'It does not appear your computer can support WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>'),r}},{key:"getContext",value:function(e,t){for(var r=["webgl","experimental-webgl"],n=null,i=0;i<r.length;++i)try{n=e.getContext(r[i],t)}catch(e){if(n)break}return n}},{key:"createShader",value:function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,i=e.createShader(r);if(e.shaderSource(i,t),e.compileShader(i),!e.getShaderParameter(i,e.COMPILE_STATUS))throw u.lastError=e.getShaderInfoLog(i),console.error("*** Error compiling shader "+i+":"+u.lastError),e.deleteShader(i),{shader:i,source:t,type:r,error:u.lastError,offset:n};return i}},{key:"createProgram",value:function(e,t,r,n){for(var i=e.createProgram(),o=0;o<t.length;++o)e.attachShader(i,t[o]);if(r&&n)for(var a=0;a<r.length;++a)e.bindAttribLocation(i,n?n[a]:a,r[a]);return e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS)?i:(u.lastError=e.getProgramInfoLog(i),console.log("Error in program linking:"+u.lastError),e.deleteProgram(i),null)}},{key:"createVertexBuffers",value:function(e,t){var r=new a,n=e.getAttribLocation(t,"a_texcoord");r.texcoord=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,r.texcoord),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0);var i=e.getAttribLocation(t,"a_position");return r.position=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,r.position),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(i),e.vertexAttribPointer(i,2,e.FLOAT,!1,0,0),r}}],(t=null)&&s(e.prototype,t),r&&s(e,r),u}();n.lastError="",t.default=n})},{}],7:[function(r,n,i){"use strict";function l(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?d(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function y(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var g=function(e){return e&&e.__esModule?e:{default:e}},E=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};!function(e){if("object"===(void 0===n?"undefined":a(n))&&"object"===a(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","promise-polyfill","./buffers","./common","./context","./subscriber","./textures","./uniforms"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),e("promise-polyfill");var a=g(e("./buffers")),u=g(e("./common")),s=E(e("./context")),r=g(e("./subscriber")),f=E(e("./textures")),v=E(e("./uniforms"));t.GlslCanvasOptions=function e(){p(this,e)};var m=function(){function e(){p(this,e),this.delay=0,this.current=0,this.delta=0,this.paused=!1,this.start=this.previous=this.now()}return y(e,[{key:"now",value:function(){return performance.now()}},{key:"play",value:function(){if(this.previous){var e=this.now();this.delay+=e-this.previous,this.previous=e}this.paused=!1}},{key:"pause",value:function(){this.paused=!0}},{key:"next",value:function(){var e=this.now();return this.delta=e-this.previous,this.current=e-this.start-this.delay,this.previous=e,this}}]),e}();t.GlslCanvasTimer=m;var n=function(e){function o(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(p(this,o),(t=l(this,c(o).call(this))).mouse={x:0,y:0},t.uniforms=new v.default,t.buffers=new a.default,t.textures=new f.default,t.textureList=[],t.valid=!1,t.animated=!1,t.dirty=!0,t.visible=!1,t.removeListeners=function(){},!e)return l(t);t.canvas=e,t.width=e.clientWidth,t.height=e.clientHeight,t.rect=e.getBoundingClientRect(),t.vertexString=r.vertexString||s.ContextDefaultVertex,t.fragmentString=r.fragmentString||s.ContextDefaultFragment;var i=s.default.tryGetContext(e,r,n.onError);return i?(t.gl=i,t.devicePixelRatio=window.devicePixelRatio||1,e.style.backgroundColor=r.backgroundColor||"rgba(0,0,0,0)",t.getShaders().then(function(e){t.load(),t.program&&(t.addListeners(),t.loop())},function(e){console.log("error",e)}),o.items.push(d(d(t))),t):l(t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(o,r.default),y(o,[{key:"getShaders",value:function(){var i=this;return new Promise(function(t,e){var r=i.canvas,n={};r.hasAttribute("data-vertex-url")&&(n.vertex=r.getAttribute("data-vertex-url")),r.hasAttribute("data-fragment-url")&&(n.fragment=r.getAttribute("data-fragment-url")),r.hasAttribute("data-vertex")&&(i.vertexString=r.getAttribute("data-vertex")),r.hasAttribute("data-fragment")&&(i.fragmentString=r.getAttribute("data-fragment")),Object.keys(n).length?Promise.all(Object.keys(n).map(function(t,e){var r=n[t];return u.default.fetch(r).then(function(e){return"vertex"===t?i.vertexString=e:i.fragmentString=e})})).then(function(e){t([i.vertexString,i.fragmentString])}):t([i.vertexString,i.fragmentString])})}},{key:"addListeners",value:function(){var o=this,e=function(e){o.rect=o.canvas.getBoundingClientRect(),o.trigger("resize",e)},t=function(e){o.rect=o.canvas.getBoundingClientRect()},r=function(e){o.toggle(),o.trigger("click",e)},n=function(e,t){var r=o.rect,n=Math.max(-20,Math.min(r.width+20,(e-r.left)*o.devicePixelRatio)),i=Math.max(-20,Math.min(r.height+20,o.canvas.height-(t-r.top)*o.devicePixelRatio));n===o.mouse.x&&i===o.mouse.y||(o.mouse.x=n,o.mouse.y=i,o.trigger("move",o.mouse))},i=function(e){n(e.clientX||e.pageX,e.clientY||e.pageY)},a=function(e){o.play(),o.trigger("over",e)},u=function(e){o.pause(),o.trigger("out",e)},s=function(e){var t=[].slice.call(e.touches).reduce(function(e,t){return(e=e||{x:0,y:0}).x+=t.clientX,e.y+=t.clientY,e},null);t&&n(t.x/e.touches.length,t.y/e.touches.length)},f=function e(t){o.pause(),o.trigger("out",t),document.removeEventListener("touchend",e)},l=function(e){o.play(),o.trigger("over",e),document.addEventListener("touchend",f),document.removeEventListener("mousemove",i),o.canvas.hasAttribute("controls")&&(o.canvas.removeEventListener("mouseover",a),o.canvas.removeEventListener("mouseout",u))};this.loop=function e(t){o.checkRender(),window.requestAnimationFrame(e)},window.addEventListener("resize",e),window.addEventListener("scroll",t),document.addEventListener("mousemove",i,!1),document.addEventListener("touchmove",s),this.canvas.hasAttribute("controls")&&(this.canvas.addEventListener("click",r),this.canvas.addEventListener("mouseover",a),this.canvas.addEventListener("mouseout",u),this.canvas.addEventListener("touchstart",l),this.canvas.hasAttribute("data-autoplay")||this.pause()),this.removeListeners=function(){window.removeEventListener("resize",e),window.removeEventListener("scroll",t),document.removeEventListener("mousemove",i),document.removeEventListener("touchmove",s),o.canvas.hasAttribute("controls")&&(o.canvas.removeEventListener("click",r),o.canvas.removeEventListener("mouseover",a),o.canvas.removeEventListener("mouseout",u),o.canvas.removeEventListener("touchstart",l))}}},{key:"load",value:function(e,t){t&&(this.vertexString=t),e&&(this.fragmentString=e);var r=this.gl,n=s.default.createShader(r,this.vertexString,r.VERTEX_SHADER),i=s.default.createShader(r,this.fragmentString,r.FRAGMENT_SHADER);this.valid=!!i||(i=s.default.createShader(r,s.ContextDefaultFragment,r.FRAGMENT_SHADER),!1);var o=s.default.createProgram(r,[n,i]);r.useProgram(o),r.deleteShader(n),r.deleteShader(i),this.program=o,this.valid&&(this.buffers=a.default.getBuffers(r,this.fragmentString,this.vertexString),this.vertexBuffers=s.default.createVertexBuffers(r,o),this.createUniforms()),this.trigger("load",this)}},{key:"test",value:function(c,h){var d=this;return new Promise(function(i,e){var o=d.vertexString,a=d.fragmentString,u=d.timer.paused,s=d.gl.getExtension("EXT_disjoint_timer_query"),f=s.createQueryEXT(),l=d.valid;(c||h)&&(d.load(c,h),l=d.valid,d.render()),d.timer.paused=!0,s.beginQueryEXT(s.TIME_ELAPSED_EXT,f),d.render(),s.endQueryEXT(s.TIME_ELAPSED_EXT);!function e(){d.render();var t=s.getQueryObjectEXT(f,s.QUERY_RESULT_AVAILABLE_EXT),r=d.gl.getParameter(s.GPU_DISJOINT_EXT);if(t&&!r){var n={wasValid:l,fragment:c||d.fragmentString,vertex:h||d.vertexString,timeElapsedMs:s.getQueryObjectEXT(f,s.QUERY_RESULT_EXT)/1e6};d.timer.paused=u,(c||h)&&d.load(a,o),i(n)}else window.requestAnimationFrame(e)}()})}},{key:"destroy",value:function(){this.removeListeners(),this.animated=!1,this.valid=!1;var e=this.gl;for(var t in e.useProgram(null),e.deleteProgram(this.program),this.buffers.values){this.buffers.values[t].destroy(e)}for(var r in this.textures.values){this.textures.values[r].destroy(e)}this.buffers=null,this.textures=null,this.uniforms=null,this.program=null,this.gl=null,o.items.splice(o.items.indexOf(this),1)}},{key:"setUniform",value:function(e){for(var t,r=this,n=arguments.length,i=new Array(1<n?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];var a=(t=v.default).parseUniform.apply(t,[e].concat(i));if(Array.isArray(a))a.forEach(function(e){return r.loadTexture(e.key,e.values[0])});else if(a)switch(a.type){case v.UniformType.Sampler2D:this.loadTexture(e,i[0]);break;default:this.uniforms.set(e,a)}}},{key:"setUniforms",value:function(e){for(var t in e)this.setUniform(t,e[t])}},{key:"pause",value:function(){this.valid&&(this.timer.pause(),this.canvas.classList.add("paused"),this.trigger("pause"))}},{key:"play",value:function(){this.valid&&(this.timer.play(),this.canvas.classList.remove("paused"),this.trigger("play"))}},{key:"toggle",value:function(){this.valid&&(this.timer.paused?this.play():this.pause())}},{key:"isVisible",value:function(){var e=this.rect;return 0<e.top+e.height&&e.top<(window.innerHeight||document.documentElement.clientHeight)}},{key:"isAnimated",value:function(){return(this.animated||this.textures.animated)&&!this.timer.paused}},{key:"isDirty",value:function(){return this.dirty||this.uniforms.dirty||this.textures.dirty}},{key:"sizeDidChanged",value:function(){var e=this.gl,t=this.rect,r=t.width,n=t.height;if(this.width===r&&this.height===n)return!1;this.width=r,this.height=n;var i=Math.floor(r*this.devicePixelRatio),o=Math.floor(n*this.devicePixelRatio);for(var a in e.canvas.width===i&&e.canvas.height===o||(e.canvas.width=i,e.canvas.height=o),this.buffers.values){this.buffers.values[a].resize(e,i,o)}return!0}},{key:"checkRender",value:function(){this.isVisible()&&(this.sizeDidChanged()||this.isAnimated()||this.isDirty())?(this.render(),this.canvas.classList.add("playing")):this.canvas.classList.remove("playing")}},{key:"createUniforms",value:function(){var t=this,e=this.gl,r=this.fragmentString,n=e.drawingBufferWidth,i=e.drawingBufferHeight,o=this.timer=new m,a=1<(r.match(/u_delta/g)||[]).length,u=1<(r.match(/u_time/g)||[]).length,s=1<(r.match(/u_date/g)||[]).length,f=1<(r.match(/u_mouse/g)||[]).length,l=this.parseTextures(r);if(this.animated=u||s||f,this.animated?this.canvas.classList.add("animated"):this.canvas.classList.remove("animated"),this.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_resolution",n,i),a&&this.uniforms.create(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_delta",o.delta/1e3),u&&this.uniforms.create(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_time",o.current/1e3),s){var c=new Date;this.uniforms.create(v.UniformMethod.Uniform4f,v.UniformType.Float,"u_date",c.getFullYear(),c.getMonth(),c.getDate(),3600*c.getHours()+60*c.getMinutes()+c.getSeconds()+.001*c.getMilliseconds())}for(var h in f&&this.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_mouse",0,0),this.buffers.values){var d=this.buffers.values[h];this.uniforms.create(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,d.key,d.input.index)}l&&(this.textureList.forEach(function(e){t.loadTexture(e.key,e.url)}),this.textureList=[])}},{key:"parseTextures",value:function(e){for(var t,n=this,r=/uniform\s*sampler2D\s*([\w]*);(\s*\/\/\s*([\w|\:\/\/|\.|\-|\_]*)|\s*)/gm;null!==(t=r.exec(e));){var i=t[1];if(t[3]){var o=t[3].split(".").pop().toLowerCase(),a=t[3];a&&-1!==f.TextureExtensions.indexOf(o)&&this.textureList.push({key:i,url:a})}else this.buffers.has(i)||this.textureList.push({key:i,url:null})}this.canvas.hasAttribute("data-textures")&&this.canvas.getAttribute("data-textures").split(",").forEach(function(e,t){var r="u_tex"+t;n.textureList.push({key:r,url:e})});return 0<this.textureList.length}},{key:"loadTexture",value:function(n,e){var i=this;if(this.valid)return this.textures.createOrUpdate(this.gl,n,e,this.buffers.count).then(function(e){var t=e.index;i.uniforms.createTexture(n,t).texture=e;var r=-1!==n.indexOf("[")?n.replace("[","Resolution["):n+"Resolution";i.uniforms.create(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,r,e.width,e.height);return e});this.textureList.push({key:n,url:e})}},{key:"updateUniforms",value:function(){var e=this.gl,t=e.drawingBufferWidth,r=e.drawingBufferHeight,n=this.timer.next();if(this.uniforms.update(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_resolution",t,r),this.uniforms.has("u_delta")&&this.uniforms.update(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_delta",n.delta/1e3),this.uniforms.has("u_time")&&this.uniforms.update(v.UniformMethod.Uniform1f,v.UniformType.Float,"u_time",n.current/1e3),this.uniforms.has("u_date")){var i=new Date;this.uniforms.update(v.UniformMethod.Uniform4f,v.UniformType.Float,"u_date",i.getFullYear(),i.getMonth(),i.getDate(),3600*i.getHours()+60*i.getMinutes()+i.getSeconds()+.001*i.getMilliseconds())}if(this.uniforms.has("u_mouse")){var o=this.mouse;this.uniforms.update(v.UniformMethod.Uniform2f,v.UniformType.FloatVec2,"u_mouse",o.x,o.y)}for(var a in this.buffers.values){var u=this.buffers.values[a];this.uniforms.update(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,u.key,u.input.index)}for(var s in this.textures.values){var f=this.textures.values[s];f.tryUpdate(e),this.uniforms.update(v.UniformMethod.Uniform1i,v.UniformType.Sampler2D,f.key,f.index)}}},{key:"render",value:function(){var e=this.gl,t=e.drawingBufferWidth,r=e.drawingBufferHeight;for(var n in this.updateUniforms(),this.buffers.values){var i=this.buffers.values[n];this.uniforms.apply(e,i.program),i.render(e,t,r)}e.useProgram(this.program),this.uniforms.apply(e,this.program),e.viewport(0,0,t,r),e.bindFramebuffer(e.FRAMEBUFFER,null),e.drawArrays(e.TRIANGLES,0,6),this.uniforms.clean(),this.textures.clean(),this.dirty=!1,this.trigger("render",this)}}],[{key:"version",value:function(){return"0.2.0"}},{key:"of",value:function(t){return o.items.find(function(e){return e.canvas===t})||new o(t)}},{key:"loadAll",value:function(){return[].slice.call(document.getElementsByClassName("glsl-canvas")).filter(function(e){return e instanceof HTMLCanvasElement}).map(function(e){return o.of(e)})}}]),o}();n.items=[],t.default=n,window.GlslCanvas=n,document.addEventListener("DOMContentLoaded",n.loadAll)})},{"./buffers":4,"./common":5,"./context":6,"./subscriber":9,"./textures":10,"./uniforms":11,"promise-polyfill":2}],8:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.NumberMap=function e(){a(this,e)};var i=function e(){a(this,e)};t.StringMap=i;var r=function(){function e(){a(this,e),this.values=new i}var t,r,n;return t=e,(r=[{key:"has",value:function(e){return this.values.hasOwnProperty(e)}},{key:"set",value:function(e,t){this.values[e]=t}},{key:"get",value:function(e){return this.values[e]}},{key:"forEach",value:function(e){var t=0;for(var r in this.values)e(this.values[r],t,this.values),t++}},{key:"reduce",value:function(e,t){var r=t,n=0;for(var i in this.values)r=e(r,this.values[i],n,this.values),n++;return r}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{}],9:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var i=function e(t,r){a(this,e),this.event=t,this.callback=r};t.Listener=i;var r=function(){function e(){a(this,e),this.listeners=new Set}var t,r,n;return t=e,(r=[{key:"logListeners",value:function(){this.listeners.forEach(function(e){return console.log(e)})}},{key:"subscribe",value:function(e){this.listeners.add(e)}},{key:"unsubscribe",value:function(e){this.listeners.delete(e)}},{key:"unsubscribeAll",value:function(){this.listeners.clear()}},{key:"on",value:function(e,t){return this.listeners.add(new i(e,t)),this}},{key:"off",value:function(t,e){var r=this;return e?this.listeners.delete(new i(t,e)):this.listeners.forEach(function(e){e.event===t&&r.listeners.delete(e)}),this}},{key:"trigger",value:function(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return this.listeners.forEach(function(e){e.event===t&&"function"==typeof e.callback&&e.callback.apply(e,r)}),this}}])&&o(t.prototype,r),n&&o(t,n),e}();t.default=r})},{}],10:[function(r,n,i){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function d(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var p=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./iterable","./subscriber"],e)}(function(e,s){Object.defineProperty(s,"__esModule",{value:!0});var f,t,a,r,n=p(e("./iterable")),i=p(e("./subscriber"));s.TextureImageExtensions=["jpg","jpeg","png"],s.TextureVideoExtensions=["ogv","webm","mp4"],s.TextureExtensions=s.TextureImageExtensions.concat(s.TextureVideoExtensions),(t=f||(f={}))[t.Data=0]="Data",t[t.Element=1]="Element",t[t.Url=2]="Url",(r=a||(a={})).MipMap="mipmap",r.Linear="linear",r.Nearest="nearest";var o=function e(){y(this,e)};s.TextureData=o;var l=function e(){y(this,e)};s.TextureOptions=l;var c=function(e){function u(e,t,r){var n,i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:new l;return y(this,u),(n=d(this,v(u).call(this))).valid=!1,n.dirty=!1,n.animated=!1,n.powerOf2=!1,n.key=t,n.index=r,n.options=i,n.create(e),n}return m(u,i.default),h(u,[{key:"create",value:function(e){this.texture=e.createTexture(),this.texture&&(this.valid=!0),this.setData(e,1,1,new Uint8Array([0,0,0,0]),{filtering:a.Linear})}},{key:"load",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof(this.options=t).url?void 0===this.url||t.url!==this.url?this.setUrl(e,t.url,t):Promise.resolve(this):t.element?this.setElement(e,t.element,t):t.data&&t.width&&t.height?this.setData(e,t.width,t.height,t.data,t):void 0}},{key:"setUrl",value:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(this.valid){this.url=t,this.source=t,this.sourceType=f.Url,this.options=Object.assign(this.options,r);var n,i,o=t.split(".").pop().toLowerCase(),a=-1!==s.TextureVideoExtensions.indexOf(o);return n.src=(a?(n=document.createElement("video"),i=this.setElement(e,n,r),n.setAttribute("playsinline","true"),n.autoplay=!0,n.muted=!0):(n=new Image,i=this.setElement(e,n,r),u.isSafari()&&"data:"===t.slice(0,5)||(n.crossOrigin="anonymous")),t),i}}},{key:"setElement",value:function(o,a){var u=this,s=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return this.options=Object.assign(this.options,s),new Promise(function(t,r){var e=a;if("string"==typeof a&&(a=document.querySelector(a)),a instanceof HTMLCanvasElement||a instanceof HTMLImageElement||a instanceof HTMLVideoElement)if(u.source=a,u.sourceType=f.Element,a instanceof HTMLVideoElement){var n=a;n.addEventListener("loadeddata",function(e){u.update(o,s),u.setFiltering(o,s),t(u)}),n.addEventListener("error",function(e){r(e)})}else a instanceof HTMLImageElement?(a.addEventListener("load",function(){u.update(o,s),u.setFiltering(o,s),t(u)}),a.addEventListener("error",function(e){r(e)})):(u.update(o,s),u.setFiltering(o,s),t(u));else{var i="the 'element' parameter (`element: ".concat(JSON.stringify(e),"`) must be a CSS selector string, or a <canvas>, <image> or <video> object");console.log("Texture '".concat(u.key,"': ").concat(i),s),r(i)}})}},{key:"setData",value:function(e,t,r,n){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{};return this.width=t,this.height=r,this.options=Object.assign(this.options,i),this.source=n,this.sourceType=f.Data,this.update(e,i),this.setFiltering(e,i),Promise.resolve(this)}},{key:"update",value:function(e,t){if(this.valid){if(e.activeTexture(e.TEXTURE0+this.index),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1===t.UNPACK_FLIP_Y_WEBGL?0:1),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.UNPACK_PREMULTIPLY_ALPHA_WEBGL||0),this.sourceType===f.Element)this.source instanceof HTMLImageElement&&this.source.naturalWidth&&this.source.naturalHeight?(this.width=this.source.naturalWidth,this.height=this.source.naturalHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLVideoElement&&this.source.videoWidth&&this.source.videoHeight?(this.width=this.source.videoWidth,this.height=this.source.videoHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLCanvasElement&&(this.width=this.source.width,this.height=this.source.height,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source));else if(this.sourceType===f.Data){var r=this.source;e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.width,this.height,0,e.RGBA,e.UNSIGNED_BYTE,r)}this.trigger("loaded",this)}}},{key:"tryUpdate",value:function(e){var t=!1;return this.animated&&(t=!0,this.update(e,this.options)),t}},{key:"destroy",value:function(e){this.valid&&(e.deleteTexture(this.texture),this.texture=null,delete this.source,this.source=null,this.valid=!1)}},{key:"setFiltering",value:function(e,t){if(this.valid){var r=u.isPowerOf2(this.width)&&u.isPowerOf2(this.height),n=t.filtering||a.MipMap,i=t.TEXTURE_WRAP_S||t.repeat&&e.REPEAT||e.CLAMP_TO_EDGE,o=t.TEXTURE_WRAP_T||t.repeat&&e.REPEAT||e.CLAMP_TO_EDGE;r||(n=n===a.MipMap?a.Linear:n,i=o=e.CLAMP_TO_EDGE),this.powerOf2=r,this.filtering=n,e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,o),this.filtering===a.MipMap?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.generateMipmap(e.TEXTURE_2D)):this.filtering===a.Nearest?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)):this.filtering===a.Linear&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR))}}}],[{key:"isPowerOf2",value:function(e){return 0==(e&e-1)}},{key:"isSafari",value:function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}},{key:"isTextureUrl",value:function(e){return/\.(jpg|jpeg|png|ogv|webm|mp4)$/i.test(e)}},{key:"isTexture",value:function(e){return void 0!==u.getTextureOptions(e)}},{key:"getMaxTextureSize",value:function(e){return e.getParameter(e.MAX_TEXTURE_SIZE)}},{key:"getTextureOptions",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if("string"==typeof e){if(u.isTextureUrl(e))return t.url=e,t;document&&(e=document.querySelector(e))}return e instanceof HTMLCanvasElement||e instanceof HTMLImageElement||e instanceof HTMLVideoElement?(t.element=e,t):e instanceof o?(t.data=e.data,t.width=e.width,t.height=e.height,t):void 0}}]),u}();s.Texture=c;var u=function(e){function t(){var e;return y(this,t),(e=d(this,v(t).apply(this,arguments))).count=0,e.dirty=!1,e.animated=!1,e}return m(t,n.default),h(t,[{key:"clean",value:function(){for(var e in this.values)this.values[e].dirty=!1;this.dirty=!1}},{key:"createOrUpdate",value:function(r,e,t){var n,i=this,o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:{},u=c.getTextureOptions(t,a);return(n=this.get(e))||(n=new c(r,e,o+this.count,u),this.count++,this.set(e,n)),void 0!==u?n.load(r,u).then(function(e){if(e.source instanceof HTMLVideoElement){var t=e.source;t.addEventListener("play",function(){e.animated=!0,i.animated=!0}),t.addEventListener("pause",function(){e.animated=!1,i.animated=i.reduce(function(e,t){return e||t.animated},!1)}),t.addEventListener("seeked",function(){e.update(r,e.options),i.dirty=!0})}return e}):Promise.resolve(n)}}]),t}();s.default=u})},{"./iterable":8,"./subscriber":9}],11:[function(r,n,i){"use strict";function c(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var y=function(e){return e&&e.__esModule?e:{default:e}};!function(e){if("object"===(void 0===n?"undefined":u(n))&&"object"===u(n.exports)){var t=e(r,i);void 0!==t&&(n.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports","./iterable","./textures"],e)}(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var u,r,s,n,i=y(e("./iterable")),f=e("./textures");(r=u=t.UniformMethod||(t.UniformMethod={})).Uniform1i="uniform1i",r.Uniform2i="uniform2i",r.Uniform3i="uniform3i",r.Uniform4i="uniform4i",r.Uniform1f="uniform1f",r.Uniform2f="uniform2f",r.Uniform3f="uniform3f",r.Uniform4f="uniform4f",r.Uniform1iv="uniform1iv",r.Uniform2iv="uniform2iv",r.Uniform3iv="uniform3iv",r.Uniform4iv="uniform4iv",r.Uniform1fv="uniform1fv",r.Uniform2fv="uniform2fv",r.Uniform3fv="uniform3fv",r.Uniform4fv="uniform4fv",r.UniformMatrix2fv="uniformMatrix2fv",r.UniformMatrix3fv="uniformMatrix3fv",r.UniformMatrix4fv="uniformMatrix4fv",(n=s=t.UniformType||(t.UniformType={}))[n.Int=0]="Int",n[n.IntArray=1]="IntArray",n[n.IntVec2=2]="IntVec2",n[n.IntVec2Array=3]="IntVec2Array",n[n.IntVec3=4]="IntVec3",n[n.IntVec3Array=5]="IntVec3Array",n[n.IntVec4=6]="IntVec4",n[n.IntVec4Array=7]="IntVec4Array",n[n.Float=8]="Float",n[n.FloatArray=9]="FloatArray",n[n.FloatVec2=10]="FloatVec2",n[n.FloatVec2Array=11]="FloatVec2Array",n[n.FloatVec3=12]="FloatVec3",n[n.FloatVec3Array=13]="FloatVec3Array",n[n.FloatVec4=14]="FloatVec4",n[n.FloatVec4Array=15]="FloatVec4Array",n[n.Bool=16]="Bool",n[n.BoolArray=17]="BoolArray",n[n.BoolVec2=18]="BoolVec2",n[n.BoolVec2Array=19]="BoolVec2Array",n[n.BoolVec3=20]="BoolVec3",n[n.BoolVec3Array=21]="BoolVec3Array",n[n.BoolVec4=22]="BoolVec4",n[n.BoolVec4Array=23]="BoolVec4Array",n[n.Sampler2D=24]="Sampler2D",n[n.Sampler2DArray=25]="Sampler2DArray",n[n.SamplerCube=26]="SamplerCube",n[n.SamplerCubeArray=27]="SamplerCubeArray",n[n.Matrix2fv=28]="Matrix2fv",n[n.Matrix3fv=29]="Matrix3fv",n[n.Matrix4fv=30]="Matrix4fv";var l=function(){function t(e){var n=this;v(this,t),this.dirty=!0,e&&Object.assign(this,e),this.apply=function(e,t){if(n.dirty){e.useProgram(t);var r=e.getUniformLocation(t,n.key);e[n.method].apply(e,[r].concat(n.values))}}}return m(t,null,[{key:"Differs",value:function(e,n){return e.length!==n.length||e.reduce(function(e,t,r){return e||t!==n[r]},!1)}}]),t}();t.Uniform=l;var o=function(e){function t(e){return v(this,t),c(this,h(t).call(this,e))}return d(t,l),t}();t.UniformTexture=o;var a=function(e){function a(){var e;return v(this,a),(e=c(this,h(a).apply(this,arguments))).dirty=!1,e}return d(a,i.default),m(a,[{key:"clean",value:function(){for(var e in this.values)this.values[e].dirty=!1;this.dirty=!1}},{key:"create",value:function(e,t,r){for(var n=arguments.length,i=new Array(3<n?n-3:0),o=3;o<n;o++)i[o-3]=arguments[o];var a=new l({method:e,type:t,key:r,values:i});return this.set(r,a),this.dirty=!0,a}},{key:"createTexture",value:function(e,t){var r;return r=-1!==e.indexOf("]")?new o({method:u.Uniform1iv,type:s.Sampler2DArray,key:e,values:[[t]]}):new o({method:u.Uniform1i,type:s.Sampler2D,key:e,values:[t]}),this.set(e,r),this.dirty=!0,r}},{key:"update",value:function(e,t,r){for(var n=this.get(r),i=arguments.length,o=new Array(3<i?i-3:0),a=3;a<i;a++)o[a-3]=arguments[a];n&&(n.method!==e||n.type!==t||l.Differs(n.values,o))&&(n.method=e,n.type=t,n.values=o,n.dirty=!0,this.dirty=!0)}},{key:"createOrUpdate",value:function(e,t,r){for(var n=arguments.length,i=new Array(3<n?n-3:0),o=3;o<n;o++)i[o-3]=arguments[o];this.has(r)?this.update.apply(this,[e,t,r].concat(i)):this.create.apply(this,[e,t,r].concat(i))}},{key:"apply",value:function(e,t){for(var r in this.values)this.values[r].apply(e,t)}}],[{key:"isArrayOfInteger",value:function(e){return e.reduce(function(e,t){return e&&Number.isInteger(t)},!0)}},{key:"isArrayOfNumber",value:function(e){return e.reduce(function(e,t){return e&&"number"==typeof t},!0)}},{key:"isArrayOfBoolean",value:function(e){return e.reduce(function(e,t){return e&&"boolean"==typeof t},!0)}},{key:"isArrayOfTexture",value:function(e){return e.reduce(function(e,t){return e&&f.Texture.isTexture(t)},!0)}},{key:"parseUniform",value:function(r){for(var e=arguments.length,t=new Array(1<e?e-1:0),n=1;n<e;n++)t[n-1]=arguments[n];var i;if(a.isArrayOfInteger(t))switch(t.length){case 1:i=new l({method:u.Uniform1i,type:s.Int,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.IntVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.IntVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.IntVec4,key:r,values:t})}else if(a.isArrayOfNumber(t))switch(t.length){case 1:i=new l({method:u.Uniform1f,type:s.Float,key:r,values:t});break;case 2:i=new l({method:u.Uniform2f,type:s.FloatVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3f,type:s.FloatVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4f,type:s.FloatVec4,key:r,values:t})}else if(a.isArrayOfBoolean(t))switch(t.length){case 1:i=new l({method:u.Uniform1i,type:s.Bool,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.BoolVec2,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.BoolVec3,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.BoolVec4,key:r,values:t})}else if(1===t.length){var o=t[0];if(f.Texture.isTexture(o))i=new l({method:u.Uniform1i,type:s.Sampler2D,key:r,values:o});else if(Array.isArray(o))if(a.isArrayOfInteger(o))switch(o.length){case 1:i=new l({method:u.Uniform1iv,type:s.IntArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2iv,type:s.IntVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3iv,type:s.IntVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4iv,type:s.IntVec4Array,key:r,values:t})}else if(a.isArrayOfNumber(o))switch(o.length){case 1:i=new l({method:u.Uniform1fv,type:s.FloatArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2fv,type:s.FloatVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3fv,type:s.FloatVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4fv,type:s.FloatVec4Array,key:r,values:t})}else if(a.isArrayOfBoolean(o))switch(o.length){case 1:i=new l({method:u.Uniform1iv,type:s.BoolArray,key:r,values:t});break;case 2:i=new l({method:u.Uniform2i,type:s.BoolVec2Array,key:r,values:t});break;case 3:i=new l({method:u.Uniform3i,type:s.BoolVec3Array,key:r,values:t});break;case 4:i=new l({method:u.Uniform4i,type:s.BoolVec4Array,key:r,values:t})}else if(a.isArrayOfTexture(o)){return o.map(function(e,t){return new l({method:u.Uniform1iv,type:s.Sampler2DArray,key:r+"["+t+"]",values:[e]})})}}return i}}]),a}();t.default=a})},{"./iterable":8,"./textures":10}]},{},[7]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,