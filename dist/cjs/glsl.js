"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var buffers_1 = require("./buffers/buffers");
exports.Buffer = buffers_1.Buffer;
exports.BufferFloatType = buffers_1.BufferFloatType;
exports.Buffers = buffers_1.default;
exports.IOBuffer = buffers_1.IOBuffer;
var orbit_camera_1 = require("./camera/orbit-camera");
exports.OrbitCamera = orbit_camera_1.default;
var canvas_1 = require("./canvas/canvas");
exports.Canvas = canvas_1.default;
var canvas_timer_1 = require("./canvas/canvas-timer");
exports.CanvasTimer = canvas_timer_1.default;
var chunks_1 = require("./context/chunks");
exports.DefaultWebGL2BufferFragment = chunks_1.DefaultWebGL2BufferFragment;
exports.DefaultWebGL2BufferVertex = chunks_1.DefaultWebGL2BufferVertex;
exports.DefaultWebGL2FlatFragment = chunks_1.DefaultWebGL2FlatFragment;
exports.DefaultWebGL2MeshFragment = chunks_1.DefaultWebGL2MeshFragment;
exports.DefaultWebGL2MeshVertex = chunks_1.DefaultWebGL2MeshVertex;
exports.DefaultWebGLBufferFragment = chunks_1.DefaultWebGLBufferFragment;
exports.DefaultWebGLBufferVertex = chunks_1.DefaultWebGLBufferVertex;
exports.DefaultWebGLFlatFragment = chunks_1.DefaultWebGLFlatFragment;
exports.DefaultWebGLMeshFragment = chunks_1.DefaultWebGLMeshFragment;
exports.DefaultWebGLMeshVertex = chunks_1.DefaultWebGLMeshVertex;
var context_1 = require("./context/context");
exports.ContextError = context_1.ContextError;
exports.ContextVersion = context_1.ContextVersion;
exports.ContextVertexBuffers = context_1.ContextVertexBuffers;
exports.Context = context_1.default;
var common_1 = require("./core/common");
exports.Common = common_1.default;
var iterable_1 = require("./core/iterable");
exports.IterableStringMap = iterable_1.default;
var subscriber_1 = require("./core/subscriber");
exports.Subscriber = subscriber_1.default;
exports.Listener = subscriber_1.Listener;
var box_geometry_1 = require("./geometry/box-geometry");
exports.BoxGeometry = box_geometry_1.default;
var flat_geometry_1 = require("./geometry/flat-geometry");
exports.FlatGeometry = flat_geometry_1.default;
var geometry_1 = require("./geometry/geometry");
exports.Geometry = geometry_1.default;
var sphere_geometry_1 = require("./geometry/sphere-geometry");
exports.SphereGeometry = sphere_geometry_1.default;
var torus_geometry_1 = require("./geometry/torus-geometry");
exports.TorusGeometry = torus_geometry_1.default;
var obj_loader_1 = require("./loaders/obj-loader");
exports.ObjLoader = obj_loader_1.default;
var logger_1 = require("./logger/logger");
exports.Logger = logger_1.default;
var vector2_1 = require("./math/vector2");
exports.Vector2 = vector2_1.default;
var vector3_1 = require("./math/vector3");
exports.Vector3 = vector3_1.default;
var renderer_1 = require("./renderer/renderer");
exports.Renderer = renderer_1.default;
var textures_1 = require("./textures/textures");
exports.Textures = textures_1.default;
exports.isTextureData = textures_1.isTextureData;
exports.Texture = textures_1.Texture;
exports.TextureExtensions = textures_1.TextureExtensions;
exports.TextureFilteringType = textures_1.TextureFilteringType;
exports.TextureImageExtensions = textures_1.TextureImageExtensions;
exports.TextureSourceType = textures_1.TextureSourceType;
exports.TextureVideoExtensions = textures_1.TextureVideoExtensions;
var uniforms_1 = require("./uniforms/uniforms");
exports.Uniforms = uniforms_1.default;
exports.METHODS_FLOAT = uniforms_1.METHODS_FLOAT;
exports.METHODS_FLOATV = uniforms_1.METHODS_FLOATV;
exports.METHODS_INT = uniforms_1.METHODS_INT;
exports.METHODS_INTV = uniforms_1.METHODS_INTV;
exports.Uniform = uniforms_1.Uniform;
exports.UniformMethod = uniforms_1.UniformMethod;
exports.UniformTexture = uniforms_1.UniformTexture;
exports.UniformType = uniforms_1.UniformType;
var canvas_2 = tslib_1.__importDefault(require("./canvas/canvas"));
function of(canvas, options) {
    return canvas_2.default.items.find(function (x) { return x.canvas === canvas; }) || new canvas_2.default(canvas, options);
}
exports.of = of;
function loadAll() {
    var canvases = [].slice.call(document.getElementsByClassName('glsl-canvas')).filter(function (x) { return x instanceof HTMLCanvasElement; });
    return canvases.map(function (x) { return of(x); });
}
exports.loadAll = loadAll;
if (document) {
    document.addEventListener('DOMContentLoaded', function () {
        loadAll();
    });
}
